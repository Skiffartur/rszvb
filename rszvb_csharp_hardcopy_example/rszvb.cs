namespace InstrumentDrivers
{
    using System;
    using System.Runtime.InteropServices;


    public class rszvb : object, System.IDisposable
    {

        private System.IntPtr _handle;

        private bool _disposed = true;

        ~rszvb() { Dispose(false); }


        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Opens a session to the Default Resource Manager resource and a session to the specified device using the interface and address specified in the Resource_Name control.
        /// 
        /// - Performs an identification query on the Instrument.
        /// 
        /// - Resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to the instrument that set any necessary programmatic variables to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns an Instrument Handle which is used to differentiate between different sessions of this instrument driver.
        /// 
        /// - Each time this function is invoked a Unique Session is opened.  It is possible to have more than one session open for the same resource.
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// This control specifies the interface and address of the device that is to be initialized (Instrument Descriptor). The exact grammar to be used in this control is shown in the note below.
        /// 
        /// Default Value:  "GPIB::20"
        /// 
        /// Notes:
        /// 
        /// (1) Based on the Instrument Descriptor, this operation establishes a communication session with a device.  The grammar for the Instrument Descriptor is shown below.  Optional parameters are shown in square brackets ([]).
        /// 
        /// Interface   Grammar
        /// ------------------------------------------------------
        /// Serial      ASRL&lt;port&gt;[::INSTR]
        /// GPIB        GPIB[board]::primary address[::secondary address]
        ///             [::INSTR]
        /// RSIB        RSIB::remote_host::INSTR
        /// VXI-11      TCPIP[board]:: host address[::LAN device name]
        ///             [::INSTR]
        /// 
        /// The ASRL keyword is used for serial interface.
        /// The GPIB keyword is used for GPIB interface.
        /// The RSIB keyword is used for RSIB interface.
        /// The VXI-11 keyword is used for a TCP/IP device located at the specified address.
        /// 
        /// Examples:
        /// (1) Serial - "ASRL1"
        /// (2) GPIB   - "GPIB::20"
        /// (3) RSIB   - "RSIB::192.168.1.33::INSTR"
        /// (4) VXI-11 - "TCPIP::10.0.0.123::INSTR"
        /// 
        /// The default value for optional parameters are shown below.
        /// 
        /// Optional Parameter          Default Value
        /// -----------------------------------------
        /// board                       0
        /// secondary address           none - 31
        /// 
        /// </param>
        /// <param name="ID_Query">
        /// This control specifies if an ID Query is sent to the instrument during the initialization procedure.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Skip Query
        /// VI_TRUE  (1) - Do Query (Default Value)
        /// 
        /// Notes:
        ///    
        /// (1) Under normal circumstances the ID Query ensures that the instrument initialized is the type supported by this driver. However circumstances may arise where it is undesirable to send an ID Query to the instrument.  In those cases; set this control to "Skip Query" and this function will initialize the selected interface, without doing an ID Query.
        /// 
        /// </param>
        /// <param name="Reset_Device">
        /// This control specifies if the instrument is to be reset to its power-on settings during the initialization procedure.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Don't Reset
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// 
        /// Notes:
        /// 
        /// (1) If you do not want the instrument reset. Set this control to "Don't Reset" while initializing the instrument.
        /// 
        /// </param>
        /// <param name="Instrument_Handle">
        /// This control returns an Instrument Handle that is used in all subsequent function calls to differentiate between different sessions of this instrument driver.
        /// 
        /// Notes:
        /// 
        /// (1) Each time this function is invoked a Unique Session is opened.  It is possible to have more than one session open for the same resource.
        /// 
        /// </param>
        public rszvb(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// This is an simple example of how to use instrument driver functions to run S21-parameter measurement is separate test set.
        /// 
        /// Following functions are performed:
        /// 
        ///  - Window New (rszvb_WindowNew)
        ///  - Trace Add (rszvb_TraceAdd)
        ///  - Trace Assign Diagram Area (rszvb_TraceAssignDiagramArea)
        ///  - Set Sweep Number Of Points (rszvb_SetSweepNumberOfPoints)
        ///  - Set Sweep Single (rszvb_SetSweepSingle)
        ///  - Set Sweep Count (rszvb_SetSweepCount)
        ///  - Set Sweep Type (rszvb_SetSweepType)
        ///  - Set Start Frequency (rszvb_SetStartFrequency)
        ///  - Set Stop Frequency (rszvb_SetStopFrequency)
        ///  - Set Power (rszvb_SetPower)
        ///  - Select S-Parameters (rszvb_SelectSParameters)
        ///  - Set Trace Format (rszvb_SetTraceFormat)
        ///  - Send Channel Trigger and Wait for OPC 
        ///    (SendChannelTriggerWaitOPC)
        ///  - Trace Autoscale (rszvb_TraceAutoscale)
        ///  - Trace Stimulus Data (rszvb_TraceStimulusData)
        ///  - Trace Response Data (rszvb_TraceResponseData)
        ///  - Window Close (rszvb_WindowClose)
        /// 
        /// Note:
        /// 
        /// When this function stops the execution, active test setup is closed (device display do not show measurement result).
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Frequency">
        /// This control defines the start frequency for a frequency sweep which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range: 0.0 to 8.0e9 (depends on the model)
        /// 
        /// Default Value: 300.0e3 Hz
        /// 
        /// </param>
        /// <param name="Stop_Frequency">
        /// This control defines the stop frequency for a frequency sweep which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range: 0.0 to 8.0e9 (depends on the model)
        /// 
        /// Default Value: 4.0e9 Hz
        /// 
        /// </param>
        /// <param name="Power">
        /// This control defines the power of the internal signal source.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// 
        /// Default Value: 0.0 dBm
        /// 
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Stimulus_Data">
        /// Returns array of the current stimnulus values of the active data trace or memory trace.
        /// 
        /// Notes:
        /// 
        /// (1) The unit is the default unit of the sweep variable (Hz or dBm or s).
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// </param>
        /// <param name="Response_Data">
        /// Returns array of the current response values of the active data trace or memory trace.
        /// 
        /// Notes:
        /// 
        /// (1) The data format is parameter-dependent. The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// (3) The total number of measured values depends also on selected data format.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ApplicationExample(int Channel, double Start_Frequency, double Stop_Frequency, double Power, out int No_of_Values, double[] Stimulus_Data, double[] Response_Data)
        {
            int pInvokeResult = PInvoke.ApplicationExample(this._handle, Channel, Start_Frequency, Stop_Frequency, Power, out No_of_Values, Stimulus_Data, Response_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates a new setup &lt;setup_name&gt; using default settings for the traces, channels and diagram areas. The created setup becomes the active setup.
        /// 
        /// Remote-control command(s):
        /// MEMory:DEFine '&lt;setup_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Setup_Name">
        /// String parameter to specify the name of the created setup.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Set1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WindowNew(string Setup_Name)
        {
            int pInvokeResult = PInvoke.WindowNew(this._handle, Setup_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a setup as the active setup.
        /// 
        /// Remote-control command(s):
        /// MEMory:SELect '&lt;setup_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Setup_Name">
        /// String parameter to specify the setup. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Set1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WindowSelect(string Setup_Name)
        {
            int pInvokeResult = PInvoke.WindowSelect(this._handle, Setup_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function closes the specified setup. If &lt;Setup Name&gt; is not specified (NULL), all existing setups are closed.
        /// 
        /// Remote-control command(s):
        /// MEMory:DELete:ALL
        /// MEMory:DELete[:NAME] '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Setup_Name">
        /// String parameter to specify the name of the setup to be closed.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Set1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WindowClose(string Setup_Name)
        {
            int pInvokeResult = PInvoke.WindowClose(this._handle, Setup_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the names of all loaded setups.
        /// 
        /// Remote-control command(s):
        /// MEMory:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Catalog">
        /// This indicator returns the names of all loaded setups as comma separated strings, for example:
        /// 
        /// Set1,Set2,Set3
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WindowList(System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.WindowList(this._handle, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function prints the active setup on selected printer.
        /// 
        /// Note(s):
        /// 
        /// Use Standard Windows Print dialog box to, specify the range of pages to be printed, the number of copies, the destination printer, and other printer setup options.
        /// 
        /// Remote-control command(s):
        /// HCOPy:DESTination &lt;string&gt;
        /// HCOPy[:IMMediate]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Printer_Name">
        /// Define printer name, string variable. One of the printers accessible from your instrument.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int Print(string Printer_Name)
        {
            int pInvokeResult = PInvoke.Print(this._handle, Printer_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specify how the screen contents are stored to a file.
        /// 
        /// Defines a name for a file which can be used to store the printer output. The file is created when it is selected as a printer destination (HCOPy:DESTination 'MMEM'). 
        /// 
        /// Remote-control command(s):
        /// MMEMory:NAME '&lt;file_name&gt;'
        /// HCOPy:DESTination 'MMEM'
        /// HCOPy:ITEM:ALL
        /// HCOPy:ITEM:LOGO[:STATe] &lt;Boolean&gt;
        /// HCOPy:ITEM:MLISt[:STATe] &lt;Boolean&gt;
        /// HCOPy:ITEM:TIME[:STATe] &lt;Boolean&gt;
        /// HCOPy:PAGE:WINDow ALL | ACTive | SINGle
        /// HCOPy:DEVice:LANGuage EMF | EWMF | BMP | PNG | JPG
        /// HCOPy[:IMMediate]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// Specifies a file name to save the screen contents.
        /// 
        /// The supported file formats are *.wmf, *.ewmf, *.bmp, *.png; see command HCOPy:DEVice:LANGuage. The specified directory must exist, otherwise no file can be generated. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "print-out.bmp"
        /// 
        /// </param>
        /// <param name="File_Format">
        /// Selects a file format for printer files. Selecting the format is recommended to ensure that the file defined via MMEMory:NAME can be read or imported by an external application.
        /// 
        /// Valid Values:
        /// RSZVB_EMF (0) - EMF, EWMF
        /// RSZVB_BMP (1) - BMP
        /// RSZVB_JPG (2) - JPG
        /// RSZVB_PNG (3) - PNG
        /// 
        /// Default Value: RSZVB_BMP (1)
        /// 
        /// Notes:
        /// 
        /// (1) EMF, EWMF:
        /// Windows enhanced metafile format (vector-based, file extension *.emf).
        ///  
        /// (2) BMP:
        /// Windows bitmap.
        ///  
        /// (3) JPG:
        /// JPEG bitmap.
        /// 
        /// (4) PNG:
        /// Portable network graphics format.
        /// 
        /// </param>
        /// <param name="Diagram_Area">
        /// Defines the number of diagram areas per printed page.
        /// 
        /// Valid Values:
        /// RSZVB_HCOPY_ALL    (0) - All Diagram Areas
        /// RSZVB_HCOPY_ACTIVE (1) - Active Diagram Area
        /// RSZVB_HCOPY_SINGLE (2) - Single Diagram Area
        /// 
        /// Default Value: RSZVB_HCOPY_ALL (0)
        /// 
        /// </param>
        /// <param name="Logo">
        /// Qualifies whether or not the printed output contains the logo. The default R&amp;S logo (file Logo.gif) is stored in the Resources\Images subdirectory of the NWA program directory and can be replaced by another logo.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Date_and_Time">
        /// Qualifies whether or not the printed output contains the current date and time.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Marker_List">
        /// Qualifies whether or not the printed output contains the information in the marker info field (marker list).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PrinttoFile(string File_Name, int File_Format, int Diagram_Area, bool Logo, bool Date_and_Time, bool Marker_List)
        {
            int pInvokeResult = PInvoke.PrinttoFile(this._handle, File_Name, File_Format, Diagram_Area, System.Convert.ToUInt16(Logo), System.Convert.ToUInt16(Date_and_Time), System.Convert.ToUInt16(Marker_List));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Provides options to specify how the document should be printed.
        /// 
        /// Remote-control command(s):
        /// HCOPy:ITEM:ALL
        /// HCOPy:ITEM:LOGO[:STATe] &lt;Boolean&gt;
        /// HCOPy:ITEM:MLISt[:STATe] &lt;Boolean&gt;
        /// HCOPy:ITEM:TIME[:STATe] &lt;Boolean&gt;
        /// HCOPy:PAGE:MARGin:LEFT &lt;numeric_value&gt;
        /// HCOPy:PAGE:MARGin:RIGHt &lt;numeric_value&gt;
        /// HCOPy:PAGE:MARGin:TOP &lt;numeric_value&gt;
        /// HCOPy:PAGE:MARGin:BOTTom &lt;numeric_value&gt;
        /// HCOPy:PAGE:ORIentation PORTrait | LANDscape
        /// HCOPy:PAGE:WINDow ALL | SINGle | ACTive
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Diagram_Area">
        /// Defines the number of diagram areas per printed page.
        /// 
        /// Valid Values:
        /// RSZVB_HCOPY_ALL    (0) - All Diagram Areas
        /// RSZVB_HCOPY_ACTIVE (1) - Active Diagram Area
        /// RSZVB_HCOPY_SINGLE (2) - Single Diagram Area
        /// 
        /// Default Value: RSZVB_HCOPY_ALL (0)
        /// 
        /// </param>
        /// <param name="Logo">
        /// Qualifies whether or not the printed output contains the logo. The default R&amp;S logo (file Logo.gif) is stored in the Resources\Images subdirectory of the NWA program directory and can be replaced by another logo.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Date_and_Time">
        /// Qualifies whether or not the printed output contains the current date and time.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Marker_List">
        /// Qualifies whether or not the printed output contains the information in the marker info field (marker list).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Page_Orientation">
        /// Defines the orientation of the printed page. Switching between LANDscape and PORTrait rotates the hardcopy result by 90 degrees. No other settings are changed.
        /// 
        /// Valid Values:
        /// RSZVB_PORTRAIT  (0) - Portrait
        /// RSZVB_LANDSCAPE (1) - Landscape
        /// 
        /// Default Value: RSZVB_PORTRAIT (0)
        /// 
        /// </param>
        /// <param name="Left_Margin">
        /// Defines the distance between the left edge of the page and the left edge of the printed information.
        /// 
        /// Valid Range: 0.01 mm to 10000.0 mm
        /// 
        /// Default Value: 0.01 mm
        /// 
        /// </param>
        /// <param name="Right_Margin">
        /// Defines the distance between the right edge of the page and the right edge of the printed information.
        /// 
        /// Valid Range: 0.01 mm to 10000.0 mm
        /// 
        /// Default Value: 0.01 mm
        /// 
        /// </param>
        /// <param name="Top_Margin">
        /// Defines the distance between the top of the page and the top of the printed information.
        /// 
        /// Valid Range: 0.01 mm to 10000.0 mm
        /// 
        /// Default Value: 0.01 mm
        /// 
        /// </param>
        /// <param name="Bottom_Margin">
        /// Defines the distance between the bottom of the page and the bottom of the printed information.
        /// 
        /// Valid Range: 0.01 mm to 10000.0 mm
        /// 
        /// Default Value: 0.01 mm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int PrintSetup(int Diagram_Area, bool Logo, bool Date_and_Time, bool Marker_List, int Page_Orientation, double Left_Margin, double Right_Margin, double Top_Margin, double Bottom_Margin)
        {
            int pInvokeResult = PInvoke.PrintSetup(this._handle, Diagram_Area, System.Convert.ToUInt16(Logo), System.Convert.ToUInt16(Date_and_Time), System.Convert.ToUInt16(Marker_List), Page_Orientation, Left_Margin, Right_Margin, Top_Margin, Bottom_Margin);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function provides operations which allows to do basic file operations on the storage media of the instrument. It consists from the following operations:
        /// 
        ///   Change Drive
        ///   Change Current Directory
        ///   Create Directory
        ///   Delete Directory
        ///   Copy File
        ///   Move File
        ///   Delete File
        /// 
        /// Remote-control command(s):
        /// MMEMory:MSIS '&lt;device&gt;'
        /// MMEMory:CDIRectory '&lt;directory_name&gt;' | DEFault
        /// MMEMory:MDIRectory '&lt;directory_name&gt;'
        /// MMEMory:RDIRectory '&lt;directory_name&gt;'
        /// MMEMory:COPY '&lt;file_source&gt;','&lt;file_destination&gt;'
        /// MMEMory:MOVE '&lt;file_source&gt;','&lt;file_destination&gt;'
        /// MMEMory:DELete '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Operation_to_be_Performed">
        /// This control selects the type of operation to be performed.
        /// 
        /// Valid Values:
        /// RSZVB_FILE_MAN_CDRIVE   (0) - Change Drive
        /// RSZVB_FILE_MAN_CDIR     (1) - Change Current Directory
        /// RSZVB_FILE_MAN_MDIR     (2) - Create Directory
        /// RSZVB_FILE_MAN_RDIR     (3) - Delete Directory
        /// RSZVB_FILE_MAN_COPY     (4) - Copy File
        /// RSZVB_FILE_MAN_MOVE     (5) - Move File
        /// RSZVB_FILE_MAN_DELETE   (6) - Delete File
        /// RSZVB_FILE_MAN_CDIR_DEF (7) - Change Current Directory To Default
        /// 
        /// Default Value: RSZVB_FILE_MAN_CDRIVE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Change Drive:
        /// Changes to the drive indicated. The drive may be the internal hard disk D: or the floppy disk drive A: (Example "A:").
        /// 
        /// (2) Change Current Directory:
        /// Changes the current directory. In addition to the path name, the indication of the directory may contain the drive name. The path name complies with the DOS conventions (Example "D:\\USER\\DATA").
        /// 
        /// (3) Create Directory:
        /// Creates a new directory. The file name includes indication of the path and may also include the drive name. The path name complies with DOS conventions (Example "D:\\USER\\DATA").
        /// 
        /// (4) Delete Directory:
        /// Deletes the indicated directory. The directory name includes indication of the path and may also include the drive name. The path name complies with DOS conventions (Example "D:\\TEST").
        /// 
        /// (5) Copy File:
        /// Copies the files indicated in 'Source' to the destination directory indicated with 'Destination' or to the destination file indicated by 'Destination' when 'Source' is just a file. The indication of the file name may include the path and the drive name. The file names and path information must be in accordance with the DOS conventions (Example "D:\\USER\\DATA\\SETUP.CFG", "A:").
        /// 
        /// (6) Move File:
        /// Renames existing files, if 'Destination' contains no path indication. Otherwise the file is moved to the indicated path and stored under the file name specified there, if any. The file name includes indication of the path and may also include the drive. The path name complies with DOS conventions (Example of renaming "D:\\TEST01.CFG", "SETUP.CFG" and exampe of moving "D:\\TEST01.CFG", "D:\\USER\\DATA").
        /// 
        /// (7) Delete File:
        /// Deletes the indicated files. The indication of the file name contains the path and, optionally, the drive name. Indication of the path complies with DOS conventions (Example "TEST01.HCP").
        /// 
        /// (8) Format Floppy Disk:
        /// Formats the disk in drive A. Formatting deletes all data stored on the floppy disk.
        /// 
        /// (9) Change Current Directory To Default:
        /// The analyzer selects the default directory 'C:\Rohde&amp;Schwarz\Nwa'. 
        /// </param>
        /// <param name="Source">
        /// This control specifies the source of the operation to be performed. If the operation requires a single parameter, this control specifies that parameter.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: "D:\\user\\data"
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control specifies the destination of the operation to be performed.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int FileManager(int Operation_to_be_Performed, string Source, string Destination)
        {
            int pInvokeResult = PInvoke.FileManager(this._handle, Operation_to_be_Performed, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the default directory for mass memory storage (current directory).
        /// 
        /// Remote-control command(s):
        /// MMEMory:CDIRectory?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Current_Directory">
        /// Returns the current directory.
        /// 
        /// Note:
        /// 
        /// The array must contain at least 256 elements ViChar[256].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCurrentDirectory(System.Text.StringBuilder Current_Directory)
        {
            int pInvokeResult = PInvoke.GetCurrentDirectory(this._handle, Current_Directory);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the indicated directory. According to DOS convention, wild card characters can be entered in order to query e.g. a list of all files of a certain type.
        /// 
        /// Remote-control command(s):
        /// MMEMory:CDIRectory '&lt;directory_name&gt;'
        /// MMEMory:CATalog?
        /// MMEMory:CATalog:ALL?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Directory">
        /// This control specifies the directory in which this function will be performed.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: "D:\\user\\data"
        /// 
        /// Note:
        /// 
        /// If directory parameter is not defined (NULL), this function returns the contents of the current directory and all subdirectories.
        /// 
        /// </param>
        /// <param name="Catalog">
        /// This indicator returns the files in the indicated directory as comma separated strings, for example:
        /// 
        /// 'SPOOL1.WMF','SPOOL2.WMF','SPOOL3.WMF'
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int FileCatalog(string Directory, System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.FileCatalog(this._handle, Directory, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Stores the configuration data of the current setup to a specified setup file.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:STATe &lt;numeric_value&gt;,'&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created setup file. The default extension (manual control) for setup files is *.zvx, although other extensions are allowed. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "setup.zvx"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetupSave(string File_Name)
        {
            int pInvokeResult = PInvoke.SetupSave(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads configuration data from a specified setup file and sets the analyzer to the corresponding instrument state.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:STATe &lt;numeric_value&gt;,'&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the setup file to be loaded. The default extension (manual control) for setup files is *.zvx, although other extensions are allowed. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "setup.zvx"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetupRecall(string File_Name)
        {
            int pInvokeResult = PInvoke.SetupRecall(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the instrument and write it to a user specified file on the host computer.
        /// 
        /// Remote-control command(s):
        /// MMEMory:DATA? '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Source">
        /// This control selects file for the data transfer from instrument to control computer.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: "D:\\user\\data\\test.hcp"
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from instrument to control computer applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: "\\test.hcp"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int readToFile(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.readToFile(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used to read data from the host computer and write it to a user specified file in the instrument.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:GPIB[:SELF]:RTERminator LFEOI | EOI
        /// MMEMory:DATA '&lt;file_name&gt;', &lt;data&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Source">
        /// This control selects file for the data transfer from control computer to instrument.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: "\\test.hcp"
        /// 
        /// </param>
        /// <param name="Destination">
        /// This control defines destination file to which the data transfer from control computer to instrument applies.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: "D:\\user\\data\\test.hcp"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int writeFromFile(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.writeFromFile(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects one of two powermeters for the given drive ports into the given trace to prepare a power calibration.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'Pmtr1D1' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'Pmtr1D1' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Power_Meter">
        /// Y-S-parameters are expressed as Y-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// Y-S-parameters are expressed as Y-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectPowerMeter(int Channel, string Trace_Name, int Power_Meter, int Out_Port)
        {
            int pInvokeResult = PInvoke.SelectPowerMeter(this._handle, Channel, Trace_Name, Power_Meter, Out_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select one of the four elements of the standard 2-port scattering matrix (S-parameters) or select S-parameters for multiport measurements.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The S-parameters are the basic measured quantities of a network analyzer. They describe how the DUT modifies a signal that is transmitted or reflected in forward or reverse direction. S-parameters are expressed as S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'S11' | 'S12' | 'S21' | 'S22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'S11' | 'S12' | 'S21' | 'S22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// S-parameters are expressed as S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Port">
        /// S-parameters are expressed as S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectSParameters(int Channel, string Trace_Name, int Out_Port, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectSParameters(this._handle, Channel, Trace_Name, Out_Port, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select S-parameters for multiport measurements (including the 2-port S-parameters) or mixed mode S-parameters. All possible combinations of mixed mode parameters (e.g. Sss, Scs, Sds, Sdd,...) are provided.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// Mixed mode parameters are used to distinguish the following three port modes: 
        /// 
        /// Single-ended (for unbalanced ports)
        /// Differential mode (for balanced ports)
        /// Common mode (for balanced ports) 
        /// 
        /// The notation of a general S-parameter is S&lt;mout&gt;&lt;min&gt;&lt;out&gt;&lt;in&gt;, where &lt;mout&gt; and &lt;min&gt; denote the output and input port modes, &lt;out&gt; and &lt;in&gt; denote the output and input port numbers.
        /// 
        /// The selected modes must be compatible with the port configuration. If an attempt is made to select an incompatible parameter (e.g. a single-ended parameter for a balanced port), the analyzer displays an error message.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'S11' | 'S12' | 'S21' | 'S22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'S11' | 'S12' | 'S21' | 'S22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// S-parameters are expressed as S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="In_Port">
        /// S-parameters are expressed as S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectMoreSParameters(int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectMoreSParameters(this._handle, Channel, Trace_Name, Out_Mode, Out_Port, In_Mode, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select predefined complex ratios of the standard 2-port wave quantities a1, a2, b1, and b2.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The predefined wave quantities are all obtained with the same test set configuration, port 1 providing the stimulus signal (source port 1, forward measurement if the stimulus signal is fed to the input of the DUT). 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'B2D1/A1D1' | 'B1D1/A1D1' | 'B2D1/B1D1' | 'B1D1/B2D1'
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'B2D1/A1D1' | 'B1D1/A1D1' | 'B2D1/B1D1' | 'B1D1/B2D1'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Ratios">
        /// Select predefined complex ratios of the standard 2-port wave quantities a1, a2, b1, and b2.
        /// 
        /// Valid Values:
        /// RSZVB_RATIO_B2_A1_SRC_PORT_1 (0) - b2/a1 Src Port 1
        /// RSZVB_RATIO_B1_A1_SRC_PORT_1 (1) - b1/a1 Src Port 1
        /// RSZVB_RATIO_B2_B1_SRC_PORT_1 (2) - b2/b1 Src Port 1
        /// RSZVB_RATIO_B1_B2_SRC_PORT_1 (3) - b1/b2 Src Port 1
        /// 
        /// Default Value: RSZVB_RATIO_B2_A1_SRC_PORT_1 (0)
        /// 
        /// Notes:
        /// 
        /// (1) b2/a1 Src Port 1:
        /// Is the ratio of the wave quantities b2 and a1 and corresponds to the S-parameter S21 (forward transmission coefficient). 
        /// 
        /// (2) b1/a1 Src Port 1:
        /// Is the ratio of the wave quantities b1 and a1, measured at PORT 1, and corresponds to the S-parameter S11 (input reflection coefficient). 
        /// 
        /// (3) b2/b1 Src Port 1:
        /// Is the ratio of the transmitted to the reflected wave quantities in a forward measurement.
        /// 
        /// (4) b1/b2 Src Port 1:
        /// Is the inverse of b2/a1 Src Port 1.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectRatios(int Channel, string Trace_Name, int Ratios)
        {
            int pInvokeResult = PInvoke.SelectRatios(this._handle, Channel, Trace_Name, Ratios);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select arbitrary ratios of wave quantities, e.g. for different detectors and source ports or more than 2 ports.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The notation for ratios and the functionality of the More Ratios dialog is analogous to the definition of S-parameters.
        /// 
        /// Ratio of wave quantities with port numbers and source port numbers (D&lt;no&gt; for drive port; the source port for the numerator and the denominator can be equal or different).
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'B2D1/A1D1' | 'B1D1/A1D1' | 'B2D1/B1D1' | 'B1D1/B2D1' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'B2D1/A1D1' | 'B1D1/A1D1' | 'B2D1/B1D1' | 'B1D1/B2D1' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Source_Port">
        /// Source Port selects one of the available test ports of the analyzer as a source of the stimulus signal.
        /// 
        /// Valid Values:
        /// 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Numerator_Type">
        /// Selects the type of the wave that forms the numerator of the ratio.
        /// 
        /// Valid Values:
        /// RSZVB_A (0) - a
        /// RSZVB_B (1) - b
        /// 
        /// Default Value: RSZVB_A (0)
        /// 
        /// </param>
        /// <param name="Numerator_Port_Number">
        /// Port number assignment. The input (stimulus) or output (response) port number is selected. The range of output and input port numbers depends on the analyzer model.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Denominator_Type">
        /// Selects the type of the wave that forms the denominator of the ratio.
        /// 
        /// Valid Values:
        /// RSZVB_A (0) - a
        /// RSZVB_B (1) - b
        /// 
        /// Default Value: RSZVB_A (0)
        /// 
        /// </param>
        /// <param name="Denominator_Port_Number">
        /// Port number assignment. The input (stimulus) or output (response) port number is selected. The range of output and input port numbers depends on the analyzer model.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectMoreRatios(int Channel, string Trace_Name, int Source_Port, int Numerator_Type, int Numerator_Port_Number, int Denominator_Type, int Denominator_Port_Number)
        {
            int pInvokeResult = PInvoke.SelectMoreRatios(this._handle, Channel, Trace_Name, Source_Port, Numerator_Type, Numerator_Port_Number, Denominator_Type, Denominator_Port_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select arbitrary ratios of wave quantities with detector, e.g. for different detectors and source ports or more than 2 ports.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The notation for ratios and the functionality of the More Ratios dialog is analogous to the definition of S-parameters.
        /// 
        /// Ratio of wave quantities with port numbers and source port numbers (D&lt;no&gt; for drive port; the source port for the numerator and the denominator can be equal or different).
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'B2D1/A1D1SAM' | 'B1D1/A1D1RMS' | 'B2D1/B1D1PEAK' | 'B1D1/B2D1SAM' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'B2D1/A1D1SAM' | 'B1D1/A1D1RMS' | 'B2D1/B1D1PEAK' | 'B1D1/B2D1SAM' | ...
        /// [SENSe&lt;Ch&gt;:]SWEep:DETector:TIME
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Source_Port">
        /// Source Port selects one of the available test ports of the analyzer as a source of the stimulus signal.
        /// 
        /// Valid Values:
        /// 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Numerator_Type">
        /// Selects the type of the wave that forms the numerator of the ratio.
        /// 
        /// Valid Values:
        /// RSZVB_A (0) - a
        /// RSZVB_B (1) - b
        /// 
        /// Default Value: RSZVB_A (0)
        /// 
        /// </param>
        /// <param name="Numerator_Port_Number">
        /// Port number assignment. The input (stimulus) or output (response) port number is selected. The range of output and input port numbers depends on the analyzer model.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Denominator_Type">
        /// Selects the type of the wave that forms the denominator of the ratio.
        /// 
        /// Valid Values:
        /// RSZVB_A (0) - a
        /// RSZVB_B (1) - b
        /// 
        /// Default Value: RSZVB_A (0)
        /// 
        /// </param>
        /// <param name="Denominator_Port_Number">
        /// Port number assignment. The input (stimulus) or output (response) port number is selected. The range of output and input port numbers depends on the analyzer model.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Detector">
        /// Selects the algorithm that is used to calculate the displayed measurement points from the raw data.
        /// 
        /// Valid Values:
        /// RSZVB_DET_RMS  (0) - RMS
        /// RSZVB_DET_PEAK (1) - Peak
        /// RSZVB_DET_AVG  (2) - Average
        /// 
        /// Default Value: RSZVB_DET_RMS (0)
        /// 
        /// </param>
        /// <param name="Observation_Time">
        /// This control sets the detector observation time ratios and wave quantities if a Peak or RMS detector is active.
        /// 
        /// Valid Values:
        /// 0.0 to 3456000.0 s
        /// 
        /// Default Value:
        /// 0.01 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectMoreRatiosWithDetector(int Channel, string Trace_Name, int Source_Port, int Numerator_Type, int Numerator_Port_Number, int Denominator_Type, int Denominator_Port_Number, int Detector, double Observation_Time)
        {
            int pInvokeResult = PInvoke.SelectMoreRatiosWithDetector(this._handle, Channel, Trace_Name, Source_Port, Numerator_Type, Numerator_Port_Number, Denominator_Type, Denominator_Port_Number, Detector, Observation_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the standard 2-port wave quantities a1, a2, b1, and b2 for different source ports.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The predefined wave quantities are obtained with different source ports. a1 Src Port 1, b1 Src Port 1 and b1 Src Port 2 are measured at Port 1 of the analyzer. a2 Src Port 2, b2 Src Port 1 and b2 Src Port 2 are measured at Port 2 of the analyzer.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'A1D1' | 'B1D1' | 'B2D1' | 'A2D2' | 'B1D2' | 'B2D2'
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'A1D1' | 'B1D1' | 'B2D1' | 'A2D2' | 'B1D2' | 'B2D2'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Wave_Quantities">
        /// Select the standard 2-port wave quantities a1, a2, b1, and b2 for different source ports.
        /// 
        /// Valid Values:
        /// RSZVB_WQUANTITY_A1_SRC_PORT_1 (0) - a1 Src Port 1
        /// RSZVB_WQUANTITY_B1_SRC_PORT_1 (1) - b1 Src Port 1
        /// RSZVB_WQUANTITY_B2_SRC_PORT_1 (2) - b2 Src Port 1
        /// RSZVB_WQUANTITY_A2_SRC_PORT_2 (3) - a2 Src Port 2
        /// RSZVB_WQUANTITY_B1_SRC_PORT_2 (4) - b1 Src Port 2
        /// RSZVB_WQUANTITY_B2_SRC_PORT_2 (5) - b2 Src Port 2
        /// 
        /// Default Value: RSZVB_WQUANTITY_A1_SRC_PORT_1 (0)
        /// 
        /// Notes:
        /// 
        /// (1) a1 Src Port 1:
        /// Is the wave transmitted at test port 1. In a standard S-parameter measurement, this wave is fed to the input port (port 1) of the DUT (forward measurement).  
        /// 
        /// (2) b1 Src Port 1:
        /// Is the wave received at test port 1. In a standard S-parameter measurement, this is the reflected wave at port 1 of the DUT (forward measurement).
        /// 
        /// (3) b2 Src Port 1:
        /// Is the wave received at test port 2. In a standard S-parameter measurement, this wave is transmitted at port 2 of the DUT (forward measurement). 
        /// 
        /// (4) a2 Src Port 2:
        /// Is the wave transmitted at test port 2. In a standard S-parameter measurement, this wave is fed to the output port (port 2) of the DUT (reverse measurement).
        /// 
        /// (5) b1 Src Port 2:
        /// Is the wave received at test port 1. In a standard S-parameter measurement, this wave is transmitted at port 2 of the DUT (reverse measurement).
        /// 
        /// (6) b2 Src Port 2:
        /// Is the wave received at test port 2. In a standard S-parameter measurement, this wave is fed to the output port (port 2) of the DUT (reverse measurement).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectWaveQuantities(int Channel, string Trace_Name, int Wave_Quantities)
        {
            int pInvokeResult = PInvoke.SelectWaveQuantities(this._handle, Channel, Trace_Name, Wave_Quantities);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select arbitrary wave quantities, e.g. for different detectors and source ports or more than 2 ports, frequency offsets, or mixed mode measurements.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The notation for wave quantities and the functionality of the More Wave Quantities is analogous to the definition of S-parameters.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'A1D1' | 'B1D1' | 'B2D1' | 'A2D2' | 'B1D2' | 'B2D2' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'A1D1' | 'B1D1' | 'B2D1' | 'A2D2' | 'B1D2' | 'B2D2' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Wave_Quantity_Type">
        /// Selects the type of the wave quantity.
        /// 
        /// Valid Values:
        /// RSZVB_A (0) - a
        /// RSZVB_B (1) - b
        /// 
        /// Default Value: RSZVB_A (0)
        /// 
        /// </param>
        /// <param name="Wave_Quantity_Port_Number">
        /// Port number assignment. The input (stimulus) or output (response) port number is selected. The range of output and input port numbers depends on the analyzer model.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source_Port">
        /// Source Port selects one of the available test ports of the analyzer as a source of the stimulus signal. The analyzer places no restriction on the combination of source ports and port numbers of the measured wave quantity, so it is even possible to measure a2 while the source port is port 1 (e.g. in order to estimate the directivity of the coupler).
        /// 
        /// Valid Values:
        /// 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectMoreWaveQuantities(int Channel, string Trace_Name, int Wave_Quantity_Type, int Wave_Quantity_Port_Number, int Source_Port)
        {
            int pInvokeResult = PInvoke.SelectMoreWaveQuantities(this._handle, Channel, Trace_Name, Wave_Quantity_Type, Wave_Quantity_Port_Number, Source_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select arbitrary wave quantities with detector, e.g. for different detectors and source ports or more than 2 ports, frequency offsets, or mixed mode measurements.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The notation for wave quantities and the functionality of the More Wave Quantities is analogous to the definition of S-parameters.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'A1D1SAM' | 'B1D1RMS' | 'B2D1PEAK' | 'A2D2SAM' | 'B1D2RMS' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'A1D1SAM' | 'B1D1RMS' | 'B2D1PEAK' | 'A2D2SAM' | 'B1D2RMS' | ...
        /// [SENSe&lt;Ch&gt;:]SWEep:DETector:TIME
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Wave_Quantity_Type">
        /// Selects the type of the wave quantity.
        /// 
        /// Valid Values:
        /// RSZVB_A (0) - a
        /// RSZVB_B (1) - b
        /// 
        /// Default Value: RSZVB_A (0)
        /// 
        /// </param>
        /// <param name="Wave_Quantity_Port_Number">
        /// Port number assignment. The input (stimulus) or output (response) port number is selected. The range of output and input port numbers depends on the analyzer model.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source_Port">
        /// Source Port selects one of the available test ports of the analyzer as a source of the stimulus signal. The analyzer places no restriction on the combination of source ports and port numbers of the measured wave quantity, so it is even possible to measure a2 while the source port is port 1 (e.g. in order to estimate the directivity of the coupler).
        /// 
        /// Valid Values:
        /// 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Detector">
        /// Selects the algorithm that is used to calculate the displayed measurement points from the raw data.
        /// 
        /// Valid Values:
        /// RSZVB_DET_RMS  (0) - RMS
        /// RSZVB_DET_PEAK (1) - Peak
        /// RSZVB_DET_AVG  (2) - Average
        /// 
        /// Default Value: RSZVB_DET_RMS (0)
        /// 
        /// 
        /// </param>
        /// <param name="Observation_Time">
        /// This control sets the detector observation time ratios and wave quantities if a Peak or RMS detector is active.
        /// 
        /// Valid Values:
        /// 0.0 to 3456000.0 s
        /// 
        /// Default Value:
        /// 0.01 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectMoreWaveQuantitiesWithDetector(int Channel, string Trace_Name, int Wave_Quantity_Type, int Wave_Quantity_Port_Number, int Source_Port, int Detector, double Observation_Time)
        {
            int pInvokeResult = PInvoke.SelectMoreWaveQuantitiesWithDetector(this._handle, Channel, Trace_Name, Wave_Quantity_Type, Wave_Quantity_Port_Number, Source_Port, Detector, Observation_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the 2-port (or more ports) matched-circuit, converted impedances. The parameters describe the impedances of a 2-port (or more ports) DUT, obtained in forward and reverse transmission and reflection measurements:
        /// 
        /// Z11 is the input impedance of a 2-port DUT that is terminated at its output with the reference impedance Z0 (matched-circuit impedance measured in a forward reflection measurement).  
        /// 
        /// Z22 is the output impedance of a 2-port DUT that is terminated at its input with the reference impedance Z0 (matched-circuit impedance measured in a reverse reflection measurement).  
        /// 
        /// Z12 and Z21 denote the forward and reverse transfer impedances, respectively. 
        /// 
        /// The analyzer can also provide matched-circuit impedances for more drive ports or balanced port configurations.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The notation for converted impedance parameters and the functionality is analogous to the definition of S-parameters.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'Z-S11' | 'Z-S12' | 'Z-S21' | 'Z-S22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'Z-S11' | 'Z-S12' | 'Z-S21' | 'Z-S22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// Z-S-parameters are expressed as Z-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Port">
        /// Z-S-parameters are expressed as Z-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectImpedances(int Channel, string Trace_Name, int Out_Port, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectImpedances(this._handle, Channel, Trace_Name, Out_Port, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select converted, matched-circuit impedance parameters for more ports or balanced port measurements. All possible combinations of mixed mode parameters (e.g. Z-Sss, Z-Scs, Z-Sds, Z-Sdd,...) are provided.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// Mixed mode parameters are used to distinguish the following three port modes: 
        /// 
        /// Single-ended (for unbalanced ports)
        /// Differential mode (for balanced ports)
        /// Common mode (for balanced ports) 
        /// 
        /// The notation of a general Z-S-parameter is Z-S&lt;mout&gt;&lt;min&gt;&lt;out&gt;&lt;in&gt;, where &lt;mout&gt; and &lt;min&gt; denote the output and input port modes, &lt;out&gt; and &lt;in&gt; denote the output and input port numbers.
        /// 
        /// The selected modes must be compatible with the port configuration. If an attempt is made to select an incompatible parameter (e.g. a single-ended parameter for a balanced port), the analyzer displays an error message.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'Z-S11' | 'Z-S12' | 'Z-S21' | 'Z-S22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'Z-S11' | 'Z-S12' | 'Z-S21' | 'Z-S22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// Z-S-parameters are expressed as Z-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="In_Port">
        /// Z-S-parameters are expressed as Z-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectMoreImpedances(int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectMoreImpedances(this._handle, Channel, Trace_Name, Out_Mode, Out_Port, In_Mode, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the 2-port (or more ports) converted matched-circuit admittance parameters. The parameters describe the admittances of a 2-port (or more ports) DUT, obtained in forward and reverse transmission and reflection measurements:
        /// 
        /// Y11 is the input admittance of a 2-port DUT that is terminated at its output with the reference impedance Z0 (matched-circuit admittance measured in a forward reflection measurement).
        /// 
        /// Y22 is the output admittance of a 2-port DUT that is terminated at its input with the reference impedance Z0 (matched-circuit admittance measured in a reverse reflection measurement).
        /// 
        /// Y12 and Y21 denote the forward and reverse transfer admittances, respectively.
        /// 
        /// The analyzer can also provide matched-circuit admittances for more drive ports or balanced port configurations.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// The notation for converted admittance parameters and the functionality is analogous to the definition of S-parameters.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'Y-S11' | 'Y-S12' | 'Y-S21' | 'Y-S22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'Y-S11' | 'Y-S12' | 'Y-S21' | 'Y-S22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// Y-S-parameters are expressed as Y-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Port">
        /// Y-S-parameters are expressed as Y-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectAdmitances(int Channel, string Trace_Name, int Out_Port, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectAdmitances(this._handle, Channel, Trace_Name, Out_Port, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select converted, matched-circuit admittance parameters for more ports or balanced port measurements. All possible combinations of mixed mode parameters (e.g. Y-Sss, Y-Scs, Y-Sds, Y-Sdd,...) are provided.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// Mixed mode parameters are used to distinguish the following three port modes: 
        /// 
        /// Single-ended (for unbalanced ports)
        /// Differential mode (for balanced ports)
        /// Common mode (for balanced ports) 
        /// 
        /// The notation of a general Y-S-parameter is Y-S&lt;mout&gt;&lt;min&gt;&lt;out&gt;&lt;in&gt;, where &lt;mout&gt; and &lt;min&gt; denote the output and input port modes, &lt;out&gt; and &lt;in&gt; denote the output and input port numbers.
        /// 
        /// The selected modes must be compatible with the port configuration. If an attempt is made to select an incompatible parameter (e.g. a single-ended parameter for a balanced port), the analyzer displays an error message.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'Y-S11' | 'Y-S12' | 'Y-S21' | 'Y-S22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'Y-S11' | 'Y-S12' | 'Y-S21' | 'Y-S22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// Y-S-parameters are expressed as Y-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="In_Port">
        /// Y-S-parameters are expressed as Y-S&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectMoreAdmitances(int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectMoreAdmitances(this._handle, Channel, Trace_Name, Out_Mode, Out_Port, In_Mode, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select open-circuit Z-parameters for multiport measurements (including the 2-port Z-parameters) or mixed mode Z-parameters. All possible combinations of mixed mode parameters (e.g. Zss, Zcs, Zds, Zdd,...) are provided.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// Mixed mode parameters are used to distinguish the following three port modes: 
        /// 
        /// Single-ended (for unbalanced ports)
        /// Differential mode (for balanced ports)
        /// Common mode (for balanced ports) 
        /// 
        /// The notation of a general Z-parameter is Z&lt;mout&gt;&lt;min&gt;&lt;out&gt;&lt;in&gt;, where &lt;mout&gt; and &lt;min&gt; denote the output and input port modes, &lt;out&gt; and &lt;in&gt; denote the output and input port numbers.
        /// 
        /// The selected modes must be compatible with the port configuration. If an attempt is made to select an incompatible parameter (e.g. a single-ended parameter for a balanced port), the analyzer displays an error message.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'Z11' | 'Z12' | 'Z21' | 'Z22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'Z11' | 'Z12' | 'Z21' | 'Z22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// Z-parameters are expressed as Z&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="In_Port">
        /// Z-parameters are expressed as Z&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectZParameters(int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectZParameters(this._handle, Channel, Trace_Name, Out_Mode, Out_Port, In_Mode, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select short-circuit Y-parameters for multiport measurements (including the 2-port Y-parameters) or mixed mode Y-parameters. All possible combinations of mixed mode parameters (e.g. Yss, Ycs, Yds, Ydd,...) are provided.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// Mixed mode parameters are used to distinguish the following three port modes: 
        /// 
        /// Single-ended (for unbalanced ports)
        /// Differential mode (for balanced ports)
        /// Common mode (for balanced ports) 
        /// 
        /// The notation of a general Y-parameter is Y&lt;mout&gt;&lt;min&gt;&lt;out&gt;&lt;in&gt;, where &lt;mout&gt; and &lt;min&gt; denote the output and input port modes, &lt;out&gt; and &lt;in&gt; denote the output and input port numbers.
        /// 
        /// The selected modes must be compatible with the port configuration. If an attempt is made to select an incompatible parameter (e.g. a single-ended parameter for a balanced port), the analyzer displays an error message.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'Y11' | 'Y12' | 'Y21' | 'Y22' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'Y11' | 'Y12' | 'Y21' | 'Y22' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Out_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="Out_Port">
        /// Y-parameters are expressed as Y&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="In_Mode">
        /// Define port mode. 
        /// 
        /// Valid Values:
        /// RSZVB_SINGLE_ENDED (0) - Single-ended (for unbalanced ports)
        /// RSZVB_DIFFERENTIAL (1) - Differential mode (for balanced ports)
        /// RSZVB_COMMON       (2) - Common mode (for balanced ports) 
        /// 
        /// Default Value: RSZVB_SINGLE_ENDED (0)
        /// 
        /// </param>
        /// <param name="In_Port">
        /// Y-parameters are expressed as Y&lt;out&gt;&lt;in&gt;, where &lt;out&gt; and &lt;in&gt; denote the output and input port numbers of the DUT. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectYParameters(int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port)
        {
            int pInvokeResult = PInvoke.SelectYParameters(this._handle, Channel, Trace_Name, Out_Mode, Out_Port, In_Mode, In_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select one of the three two port stability factors K, u1 or u2.
        /// 
        /// Stability factors are calculated as functions of the frequency or another stimulus parameter. They provide criteria for linear stability of two-ports such as amplifiers. A linear circuit is said to be unconditionally stable if no combination of passive source or load can cause the circuit to oscillate.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// Stability factors can be calculated for unbalanced ports only. If a balanced port configuration is selected, the analyzer generates an error message.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'KFAC21' | 'MUF121' | 'MUF221' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'KFAC21' | 'MUF121' | 'MUF221' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="DUT_Out">
        /// Selects the test port number of the analyzer to be connected to the input (DUT Input) and the output of the DUT (DUT Output). The ports can be arbitrary, however, the stability factor calculation is based on 2-port reflection and transmission S-parameters so that the input and output port numbers must be different. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 2
        /// 
        /// </param>
        /// <param name="DUT_In">
        /// Selects the test port number of the analyzer to be connected to the input (DUT Input) and the output of the DUT (DUT Output). The ports can be arbitrary, however, the stability factor calculation is based on 2-port reflection and transmission S-parameters so that the input and output port numbers must be different. 
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stability_Factor">
        /// Selects the stability factor to be calculated.
        /// 
        /// Valid Values:
        /// RSZVB_SFACTOR_K  (0) - K
        /// RSZVB_SFACTOR_U1 (1) - u1
        /// RSZVB_SFACTOR_U2 (2) - u2
        /// 
        /// Default Value: RSZVB_SFACTOR_K (0)
        /// 
        /// Notes:
        /// 
        /// (1) K:
        /// The K-factor provides a necessary condition for unconditional stability: A circuit is unconditionally stable if K&gt;1 and an additional condition is met. The additional condition can be tested by means of the stability factors u1 and u2.
        /// 
        /// (2) u1, u2:
        /// The u1 and u2 factors both provide a necessary and sufficient condition for unconditional stability: The conditions u1&gt;1 or u2&gt;1 are both equivalent to unconditional stability. This means that u1 and u2 provide direct insight into the degree of stability or potential instability of linear circuits.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectStabilityFactors(int Channel, string Trace_Name, int DUT_Out, int DUT_In, int Stability_Factor)
        {
            int pInvokeResult = PInvoke.SelectStabilityFactors(this._handle, Channel, Trace_Name, DUT_Out, DUT_In, Stability_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the DC voltages fed to the DC MEAS input connectors as measured quantities. The input connectors are located at the rear panel of the instrument.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'DC+1V' | 'DC+10V'
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'DC+1V' | 'DC+10V'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="DC_Meas">
        /// Select the DC voltages fed to the DC MEAS input connectors as measured quantities.
        /// 
        /// Valid Values:
        /// RSZVB_DC_MEAS_1V  (0) - DC MEAS +/-1V
        /// RSZVB_DC_MEAS_10V (1) - DC MEAS +/-10V
        /// 
        /// Default Value: RSZVB_DC_MEAS_1V (0)
        /// 
        /// Notes:
        /// 
        /// (1) DC MEAS +/-1V:
        /// DC MEAS +/-1V provides the most accurate measurement for smaller voltages but has a restricted input level range.
        /// 
        /// (2) DC MEAS +/-10V:
        /// DC MEAS +/-10V can be used for larger voltages.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectDCMeasurement(int Channel, string Trace_Name, int DC_Meas)
        {
            int pInvokeResult = PInvoke.SelectDCMeasurement(this._handle, Channel, Trace_Name, DC_Meas);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the Power Added Efficiency (PAE) of an active 2-port device as measured quantity and to define the parameters for the PAE measurement. 
        /// 
        /// The Power Added Efficiency (PAE) is the ratio of the added RF power generated by an active two-port device (e.g. an amplifier) to the supplied DC power PDC. The added RF power can be expressed as the difference between the power of the outgoing wave b2 at the output of the DUT and the power of the incident wave a1 at the input of the DUT.
        /// 
        /// Assigns a measurement parameter to an existing trace or creates a trace and assigns a channel number, a name and a measurement parameter to it. The trace is not displayed.
        /// 
        /// To obtain reasonable results, the test model and the respective Constant must be selected in accordance to the test setup.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'PAE21' | 'PAE12' | ...
        /// CALCulate&lt;Ch&gt;:PARameter:MEASure '&lt;string&gt;', 'PAE21' | 'PAE12' | ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="DUT_Out">
        /// Selects the analyzer port providing the input signal a1 (DUT Input) and the receiver port for the output signal b2 (DUT Output). The input and output port numbers must be different.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 2
        /// 
        /// </param>
        /// <param name="DUT_In">
        /// Selects the analyzer port providing the input signal a1 (DUT Input) and the receiver port for the output signal b2 (DUT Output). The input and output port numbers must be different.
        /// 
        /// Valid Range: 1 to number of available ports
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SelectPAEMeasurement(int Channel, string Trace_Name, int DUT_Out, int DUT_In)
        {
            int pInvokeResult = PInvoke.SelectPAEMeasurement(this._handle, Channel, Trace_Name, DUT_Out, DUT_In);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function select the test model and the parameters for measuring the DC power PDC supplied to the DUT.
        /// 
        /// The power PDC supplied to the DUT can be measured using either one of the DC inputs DC MEAS +/-10V (for large voltages), DC MEAS +/-1V (for small voltages) or both inputs. Define DC Power Measurement in the PAE measurement suggests different models involving different test setups and approximations.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch/Tr&gt;:]PAE:EXPRession C10 | C1 | K101 | CK11
        /// [SENSe&lt;Ch/Tr&gt;:]PAE:C &lt;numeric_value&gt;
        /// [SENSe&lt;Ch/Tr&gt;:]PAE:K &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Test_Model">
        /// Selects the test model for the PAE measurement.
        /// 
        /// Valid Values:
        /// RSZVB_PAE_EXP_C10  (0) - c * U (DC Meas +/-10 V)
        /// RSZVB_PAE_EXP_C1   (1) - c * U (DC Meas +/-1 V)
        /// RSZVB_PAE_EXP_K101 (2) - k * U (DC Meas +/-10 V) * U (DC Meas +/-1 V)
        /// RSZVB_PAE_EXP_CK11 (3) - c * U (DC Meas +/-1 V) - k * U (DC Meas +/-1 V)^2
        /// 
        /// Default Value: RSZVB_PAE_EXP_C10 (0)
        /// 
        /// Notes:
        /// 
        /// (1) c * U (DC Meas +/-10 V):
        /// The DC power is equal to the constant c ([SENSe&lt;Ch/Tr&gt;:]PAE:C) times the DC voltage measured at the DC input DC MEAS +/-10 V.
        /// 
        /// (2) c * U (DC Meas +/-1 V):
        /// The DC power is equal to the constant c times the DC voltage measured at the DC input DC MEAS +/-1 V.
        /// 
        /// (3) k * U (DC Meas +/-10 V) * U (DC Meas +/-1 V):
        /// The DC power is equal to the constant k ([SENSe&lt;Ch/Tr&gt;:]PAE:K) times the DC voltage measured at the DC input DC MEAS +/-10 V times the DC voltage measured at the DC input DC MEAS +/-1 V.
        /// 
        /// (4) c * U (DC Meas +/-1 V) - k * U (DC Meas +/-1 V)^2:
        /// The DC power is equal to the constant c times the DC voltage measured at the DC input DC MEAS +/-1 V minus k times the square of the DC voltage measured at the DC input DC MEAS +/-1 V.
        /// 
        /// </param>
        /// <param name="Constant_c">
        /// Defines the constant c for the PAE measurement.
        /// 
        /// Valid Range: -3.4028234664E+038 W/V to 3.4028234664E+038 W/V
        /// 
        /// Default Value: 0.0 W/V
        /// 
        /// Note:
        /// 
        /// Value of the constant c in the PAE test model ([SENSe&lt;Ch/Tr&gt;:]PAE:EXPRession). The value is used if one of the test models C10 | C1 | CK11 is selected.
        /// 
        /// </param>
        /// <param name="Constant_k">
        /// Defines the constant k for the PAE measurement.
        /// 
        /// Valid Range: -3.4028234664E+038 W/V^2 to 3.4028234664E+038 W/V^2 
        /// 
        /// Default Value: 0.0 W/V^2
        /// 
        /// Note:
        /// 
        /// Value of the constant k in the PAE test model ([SENSe&lt;Ch/Tr&gt;:]PAE:EXPRession). The value is used if one of the test models K101 | CK11 is selected.
        ///  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefinePAEMeasurement(int Channel__Trace_, int Test_Model, double Constant_c, double Constant_k)
        {
            int pInvokeResult = PInvoke.DefinePAEMeasurement(this._handle, Channel__Trace_, Test_Model, Constant_c, Constant_k);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines how the measured result at any sweep point is post-processed and presented in the graphical display.
        /// 
        /// Note(s):
        /// 
        /// The analyzer allows arbitrary combinations of display formats and measured quantities. Nevertheless, it is advisable to check which display formats are generally appropriate for an analysis of a particular measured quantity.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FORMat MLINear | MLOGarithmic | PHASe | UPHase | POLar | SMITh | ISMith | GDELay | REAL | IMAGinary | SWR | COMPlex | MAGNitude
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Format">
        /// Defines how the measured data is presented in the graphical display.
        /// 
        /// Valid Values:
        /// RSZVB_DB_MAG  (0) - dB Mag
        /// RSZVB_PHASE   (1) - Phase
        /// RSZVB_SMITH   (2) - Smith
        /// RSZVB_POLAR   (3) - Polar
        /// RSZVB_DELAY   (4) - Delay
        /// RSZVB_SWR     (5) - SWR
        /// RSZVB_LIN_MAG (6) - Lin Mag
        /// RSZVB_REAL    (7) - Real
        /// RSZVB_IMAG    (8) - Imag
        /// RSZVB_ISMITH  (9) - Inverted Smith
        /// RSZVB_UPHASE  (10) - Unwrapped Phase
        /// 
        /// Default Value: RSZVB_DB_MAG (0)
        /// 
        /// Notes:
        /// 
        /// (1) dB Mag:
        /// Selects a Cartesian diagram with a logarithmic scale of the vertical axis to display the magnitude of a complex measured quantity. 
        /// 
        /// (2) Phase:
        /// Selects a Cartesian diagram with a linear vertical axis to display the phase of a complex measured quantity in the range between -180 degrees and +180 degrees. 
        /// 
        /// (3) Smith:
        /// Selects a Smith diagram to display an S-parameter or ratio.
        /// 
        /// (4) Polar:
        /// Selects a polar diagram to display an S-parameter or ratio.
        /// 
        /// (5) Delay:
        /// Calculates the group delay from an S-parameter or ratio and displays it in a Cartesian diagram. 
        /// 
        /// (6) SWR:
        /// Calculates the Standing Wave Ratio from the measured reflection S-parameters and displays it in a Cartesian diagram. 
        /// 
        /// (7) Lin Mag:
        /// Selects a Cartesian diagram with a linear scale of the vertical axis to display the magnitude of the measured quantity. 
        /// 
        /// (8) Real:
        /// Selects a Cartesian diagram to display the real part of a complex measured quantity. 
        /// 
        /// (9) Imag:
        /// Selects a Cartesian diagram to display the imaginary part of a complex measured quantity.
        /// 
        /// (10) Inverted Smith:
        /// Selects an inverted Smith diagram to display an S-parameter or ratio.
        /// 
        /// (11) Unwrapped Phase:
        /// Selects a Cartesian diagram with a linear vertical axis to display the phase of the measured quantity in an arbitrary phase range.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceFormat(int Channel__Trace_, int Format)
        {
            int pInvokeResult = PInvoke.SetTraceFormat(this._handle, Channel__Trace_, Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns how the measured result at any sweep point is post-processed and presented in the graphical display.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FORMat?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Format">
        /// Returns how the measured data is presented in the graphical display.
        /// 
        /// Valid Values:
        /// RSZVB_DB_MAG  (0) - dB Mag
        /// RSZVB_PHASE   (1) - Phase
        /// RSZVB_SMITH   (2) - Smith
        /// RSZVB_POLAR   (3) - Polar
        /// RSZVB_DELAY   (4) - Delay
        /// RSZVB_SWR     (5) - SWR
        /// RSZVB_LIN_MAG (6) - Lin Mag
        /// RSZVB_REAL    (7) - Real
        /// RSZVB_IMAG    (8) - Imag
        /// RSZVB_ISMITH  (9) - Inverted Smith
        /// RSZVB_UPHASE  (10) - Unwrapped Phase
        /// 
        /// Notes:
        /// 
        /// (1) dB Mag:
        /// Selects a Cartesian diagram with a logarithmic scale of the vertical axis to display the magnitude of a complex measured quantity. 
        /// 
        /// (2) Phase:
        /// Selects a Cartesian diagram with a linear vertical axis to display the phase of a complex measured quantity in the range between -180 degrees and +180 degrees. 
        /// 
        /// (3) Smith:
        /// Selects a Smith diagram to display an S-parameter or ratio.
        /// 
        /// (4) Polar:
        /// Selects a polar diagram to display an S-parameter or ratio.
        /// 
        /// (5) Delay:
        /// Calculates the group delay from an S-parameter or ratio and displays it in a Cartesian diagram. 
        /// 
        /// (6) SWR:
        /// Calculates the Standing Wave Ratio from the measured reflection S-parameters and displays it in a Cartesian diagram. 
        /// 
        /// (7) Lin Mag:
        /// Selects a Cartesian diagram with a linear scale of the vertical axis to display the magnitude of the measured quantity. 
        /// 
        /// (8) Real:
        /// Selects a Cartesian diagram to display the real part of a complex measured quantity. 
        /// 
        /// (9) Imag:
        /// Selects a Cartesian diagram to display the imaginary part of a complex measured quantity.
        /// 
        /// (10) Inverted Smith:
        /// Selects an inverted Smith diagram to display an S-parameter or ratio.
        /// 
        /// (11) Unwrapped Phase:
        /// Selects a Cartesian diagram with a linear vertical axis to display the phase of the measured quantity in an arbitrary phase range.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceFormat(int Channel__Trace_, out int Format)
        {
            int pInvokeResult = PInvoke.GetTraceFormat(this._handle, Channel__Trace_, out Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines an aperture for the calculation of the group delay as an integer number of frequency sweep steps.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:GDAPerture:SCOunt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Steps">
        /// Defines an aperture for the calculation of the group delay as an integer number of frequency sweep steps.
        /// 
        /// Valid Values:
        /// 1 to 10000
        /// 
        /// Default Value: 10
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetApertureGroupDelaySteps(int Channel__Trace_, int Steps)
        {
            int pInvokeResult = PInvoke.SetApertureGroupDelaySteps(this._handle, Channel__Trace_, Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an aperture for the calculation of the group delay as an integer number of frequency sweep steps.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:GDAPerture:SCOunt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Steps">
        /// Returns an aperture for the calculation of the group delay as an integer number of frequency sweep steps.
        /// 
        /// Valid Values:
        /// 1 to 10000
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetApertureGroupDelaySteps(int Channel__Trace_, out int Steps)
        {
            int pInvokeResult = PInvoke.GetApertureGroupDelaySteps(this._handle, Channel__Trace_, out Steps);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adjusts the Scale Divisions and the Ref. Value in order to display the entire active trace in the diagram area, leaving an appropriate display margin.
        /// 
        /// In Cartesian diagrams, the analyzer re-calculates the values of the vertical divisions so that the trace fits onto 80% of the vertical grid. The reference value is chosen to center the trace in the diagram.
        /// 
        /// In circular diagrams (Polar, Smith, Inverted Smith), the analyzer re-calculates the values of the radial divisions so that the diagram is confined to approx. 80% of the outer circumference. The reference value is set to the value of the outer circumference.
        /// 
        /// Autoscale does not affect the stimulus values and the horizontal axis.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// (3) The trace is be referenced by its number &lt;WndTr&gt;. 
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:AUTO ONCE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceAutoscale(int Window, int Window__Trace_)
        {
            int pInvokeResult = PInvoke.TraceAutoscale(this._handle, Window, Window__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adjusts the Scale Divisions and the Ref. Value in order to display the entire active trace in the diagram area, leaving an appropriate display margin.
        /// 
        /// In Cartesian diagrams, the analyzer re-calculates the values of the vertical divisions so that the trace fits onto 80% of the vertical grid. The reference value is chosen to center the trace in the diagram.
        /// 
        /// In circular diagrams (Polar, Smith, Inverted Smith), the analyzer re-calculates the values of the radial divisions so that the diagram is confined to approx. 80% of the outer circumference. The reference value is set to the value of the outer circumference.
        /// 
        /// Autoscale does not affect the stimulus values and the horizontal axis.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// (3) The trace is referenced by its name &lt;trace_name&gt;. 
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe:Y[:SCALe]:AUTO ONCE[, '&lt;trace_name&gt;']
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// This control sets the trace name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceAutoscaleByName(int Window, string Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceAutoscaleByName(this._handle, Window, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the lower (minimum) edge of the diagram area &lt;Wnd&gt;.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:BOTTom  &lt;lower_value&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Bottom">
        /// Value for the lower (minimum) edge of the diagram area &lt;Wnd&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: -80.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range is depending on the measured quantity.
        /// 
        /// (2) The default lower edge for a dB Mag diagram is -80 dB.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceBottom(int Window, int Window__Trace_, double Bottom)
        {
            int pInvokeResult = PInvoke.SetTraceBottom(this._handle, Window, Window__Trace_, Bottom);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the lower (minimum) edge of the diagram area &lt;Wnd&gt;.  
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:BOTTom?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Bottom">
        /// Value of the lower (minimum) edge of the diagram area &lt;Wnd&gt;.  
        /// 
        /// Notes:
        /// 
        /// (1) Unit is depending on the measured quantity.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceBottom(int Window, int Window__Trace_, out double Bottom)
        {
            int pInvokeResult = PInvoke.GetTraceBottom(this._handle, Window, Window__Trace_, out Bottom);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the value of the vertical diagram divisions in Cartesian diagrams.
        /// 
        /// Scale /Div corresponds to the increment between two consecutive grid lines. The unit depends on the display format: dB for display format dB Mag, degrees for Phase and Unwrapped Phase, ns for Delay, U (units) for all other (dimensionless) formats.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:PDIVision &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Scale_Divisions">
        /// Value for the vertical diagram divisions.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 10.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range is depending on the measured quantity.
        /// 
        /// (2) The default scale divisions for an S-parameter displayed in a dB Mag diagram is 10 dB.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceScaleDivisions(int Window, int Window__Trace_, double Scale_Divisions)
        {
            int pInvokeResult = PInvoke.SetTraceScaleDivisions(this._handle, Window, Window__Trace_, Scale_Divisions);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the value of the vertical diagram divisions in Cartesian diagrams.
        /// 
        /// Scale /Div corresponds to the increment between two consecutive grid lines. The unit depends on the display format: dB for display format dB Mag, degrees for Phase and Unwrapped Phase, ns for Delay, U (units) for all other (dimensionless) formats.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// (3) The trace is referenced by its name &lt;trace_name&gt;. 
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:PDIVision &lt;numeric_value&gt;[,'&lt;trace_name&gt;']
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Scale_Divisions">
        /// Value for the vertical diagram divisions.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 10.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range is depending on the measured quantity.
        /// 
        /// (2) The default scale divisions for an S-parameter displayed in a dB Mag diagram is 10 dB.
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// This control sets the trace name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceScaleDivisionsByName(int Window, double Scale_Divisions, string Trace_Name)
        {
            int pInvokeResult = PInvoke.SetTraceScaleDivisionsByName(this._handle, Window, Scale_Divisions, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the value of the vertical diagram divisions in Cartesian diagrams.
        /// 
        /// Scale /Div corresponds to the increment between two consecutive grid lines. The unit depends on the display format: dB for display format dB Mag, degrees for Phase and Unwrapped Phase, ns for Delay, U (units) for all other (dimensionless) formats.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:PDIVision?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Scale_Divisions">
        /// Value of the vertical diagram divisions.
        /// 
        /// Notes:
        /// 
        /// (1) Unit is depending on the measured quantity.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceScaleDivisions(int Window, int Window__Trace_, out double Scale_Divisions)
        {
            int pInvokeResult = PInvoke.GetTraceScaleDivisions(this._handle, Window, Window__Trace_, out Scale_Divisions);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the reference level (or reference value) for a particular displayed trace. Setting a new reference level does not affect the value of PDIVision. 
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:RLEVel &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Level">
        /// Reference level value.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range is depending on the measured quantity.
        /// 
        /// (2) The default reference level for an S-parameter displayed in a dB Mag diagram is 0 dB.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceRefValue(int Window, int Window__Trace_, double Reference_Level)
        {
            int pInvokeResult = PInvoke.SetTraceRefValue(this._handle, Window, Window__Trace_, Reference_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the reference level (or reference value) for a particular displayed trace. Setting a new reference level does not affect the value of PDIVision. 
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// (3) The trace is referenced by its name &lt;trace_name&gt;.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:RLEVel &lt;numeric_value&gt;[,'&lt;trace_name&gt;']
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Level">
        /// Reference level value.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range is depending on the measured quantity.
        /// 
        /// (2) The default reference level for an S-parameter displayed in a dB Mag diagram is 0 dB.
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// This control sets the trace name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceRefValueByName(int Window, double Reference_Level, string Trace_Name)
        {
            int pInvokeResult = PInvoke.SetTraceRefValueByName(this._handle, Window, Reference_Level, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the reference level (or reference value) for a particular displayed trace.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:RLEVel?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Level">
        /// Reference level value.
        /// 
        /// Notes:
        /// 
        /// (1) Unit is depending on the measured quantity.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceRefValue(int Window, int Window__Trace_, out double Reference_Level)
        {
            int pInvokeResult = PInvoke.GetTraceRefValue(this._handle, Window, Window__Trace_, out Reference_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the point on the y-axis to be used as the reference position as a percentage of the length of the y-axis. The reference position is the point on the y-axis which should equal the RLEVel.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:RPOSition &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Position">
        /// Value of the reference position in percent. The top of the y-axis is defined to have a reference position of 100%, while the bottom of the y-axis is defined to have a reference position of 0%.
        /// 
        /// Valid Range: 0.0 % to 100.0 %
        /// 
        /// Default Value: 80.0 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceRefPosition(int Window, int Window__Trace_, double Reference_Position)
        {
            int pInvokeResult = PInvoke.SetTraceRefPosition(this._handle, Window, Window__Trace_, Reference_Position);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the point on the y-axis to be used as the reference position as a percentage of the length of the y-axis. The reference position is the point on the y-axis which should equal the RLEVel.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// (3) The trace is referenced by its name &lt;trace_name&gt;. 
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:RPOSition &lt;numeric_value&gt;[,'&lt;trace_name&gt;']
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Position">
        /// Value of the reference position in percent. The top of the y-axis is defined to have a reference position of 100%, while the bottom of the y-axis is defined to have a reference position of 0%.
        /// 
        /// Valid Range: 0.0 % to 100.0 %
        /// 
        /// Default Value: 80.0 %
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// This control sets the trace name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceRefPositionByName(int Window, double Reference_Position, string Trace_Name)
        {
            int pInvokeResult = PInvoke.SetTraceRefPositionByName(this._handle, Window, Reference_Position, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the point on the y-axis used as the reference position as a percentage of the length of the y-axis. The reference position is the point on the y-axis which should equal the RLEVel.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:RPOSition?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Position">
        /// Returns value of the reference position in percent.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceRefPosition(int Window, int Window__Trace_, out double Reference_Position)
        {
            int pInvokeResult = PInvoke.GetTraceRefPosition(this._handle, Window, Window__Trace_, out Reference_Position);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the upper (maximum) edge of the diagram area &lt;Wnd&gt;.  
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:TOP  &lt;upper_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Top">
        /// Value for the upper (maximum) edge of the diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 20.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range is depending on the measured quantity.
        /// 
        /// (2) The default lower edge for a dB Mag diagram is +20 dB.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceTop(int Window, int Window__Trace_, double Top)
        {
            int pInvokeResult = PInvoke.SetTraceTop(this._handle, Window, Window__Trace_, Top);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the upper (maximum) edge of the diagram area &lt;Wnd&gt;.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON). 
        ///  
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y[:SCALe]:TOP?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Top">
        /// Value of the upper (maximum) edge of the diagram area &lt;Wnd&gt;.
        /// 
        /// Notes:
        /// 
        /// (1) Unit is depending on the measured quantity.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceTop(int Window, int Window__Trace_, out double Top)
        {
            int pInvokeResult = PInvoke.GetTraceTop(this._handle, Window, Window__Trace_, out Top);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates a new trace in the current diagram area and assigns it to the selected channel. The new trace is created with the default trace and channel settings. Trace is not displayed. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'S21'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceAdd(int Channel, string Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceAdd(this._handle, Channel, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Displays or hides an existing trace, identified by its trace name (CALCulate&lt;Ch&gt;:PARameter:SDEFine &lt;Trace_Name&gt;), or a group of traces.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow&lt;Wnd&gt;]:TRACe&lt;WndTr&gt;:SHOW DALL | MALL | '&lt;trace_name&gt;', &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Type">
        /// This control selects the type of trace.
        /// 
        /// Valid Values:
        /// RSZVB_DISP_TRAC_DATA (0) - All Data Traces
        /// RSZVB_DISP_TRAC_MEM  (1) - All Memory Traces
        /// RSZVB_DISP_TRAC_SING (2) - Single Trace
        /// 
        /// Default value: RSZVB_DISP_TRAC_DATA (0)
        /// 
        /// Note(s):
        /// 
        /// (1) When Single Trace is selected, the trace name can be inputed into the Single Trace Name control.
        /// </param>
        /// <param name="Single_Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available if Trace Type control is set to Single Trace.
        /// </param>
        /// <param name="Show_Trace">
        /// This control displays or hides trace(s).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Values: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceDisplayState(int Trace_Type, string Single_Trace_Name, bool Show_Trace)
        {
            int pInvokeResult = PInvoke.SetTraceDisplayState(this._handle, Trace_Type, Single_Trace_Name, System.Convert.ToUInt16(Show_Trace));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the trace is shown or not.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow&lt;Wnd&gt;]:TRACe&lt;WndTr&gt;:SHOW? DALL | MALL | '&lt;trace_name&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Type">
        /// This control selects the type of trace.
        /// 
        /// Valid Values:
        /// RSZVB_DISP_TRAC_DATA (0) - All Data Traces
        /// RSZVB_DISP_TRAC_MEM  (1) - All Memory Traces
        /// RSZVB_DISP_TRAC_SING (2) - Single Trace
        /// 
        /// Default value: RSZVB_DISP_TRAC_DATA (0)
        /// 
        /// Note(s):
        /// 
        /// (1) When Single Trace is selected, the trace name can be inputed into the Single Trace Name control.
        /// </param>
        /// <param name="Single_Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available if Trace Type control is set to Single Trace.
        /// </param>
        /// <param name="Show_Trace">
        /// This control returns whether the trace is shown or not.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceDisplayState(int Trace_Type, string Single_Trace_Name, out bool Show_Trace)
        {
            ushort Show_TraceAsUShort;
            int pInvokeResult = PInvoke.GetTraceDisplayState(this._handle, Trace_Type, Single_Trace_Name, out Show_TraceAsUShort);
            Show_Trace = System.Convert.ToBoolean(Show_TraceAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates the traces for all S-parameters associated with a group of logical ports (S-parameter group).  
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:DEFine:SGRoup &lt;log_port1&gt;[, &lt;log_port2&gt;,...]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number. Channel may be used to reference a previously defined channel. If channel does not exist, it is generated with default channel settings. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_of_Logical_Port_Numbers">
        /// This control sets teh number of logical port numbers used.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Logical_Port_Number_s_">
        /// Define logical (balanced or unbalanced) port numbers. The port numbers must be in ascending order, their number is limited by the test ports of the analyzer.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: None
        /// 
        /// Note(s):
        /// 
        /// (1) The amount of logical port numbers is set by control Number of Logical Port Numbers.
        /// 
        /// (2) With n logical port numbers, the command generates n^2 traces. The traces represent the following S-parameters: 
        /// 
        /// S&lt;log_port1&gt;&lt;log_port1&gt;, S&lt;log_port1&gt;&lt;log_port2&gt; ... S&lt;log_port1&gt;&lt;log_port&lt;n&gt;&gt; 
        /// ...
        /// S&lt;log_port&lt;n&gt;&gt;&lt;log_port1&gt;, S&lt;log_port&lt;n&gt;&gt;&lt;log_port2&gt;... S&lt;log_port&lt;n&gt;&gt;&lt;log_port&lt;n&gt;&gt;,
        /// 
        /// e.g. S11, S12, S21, S22 for &lt;log_port1&gt; = 1, &lt;log_port2&gt; = 2. 
        /// 
        /// (3) If only one logical port &lt;log_port1&gt; is specified, a single trace with the reflection coefficient S&lt;log_port1&gt;&lt;log_port1&gt; is created. 
        /// 
        /// (4) The generated traces are assigned the following trace names: 
        /// 
        /// &lt;Ch_name&gt;_SG_S&lt;log_port1&gt;&lt;log_port1&gt;, &lt;Ch_name&gt;_SG_S&lt;log_port1&gt;&lt;log_port2&gt; ... &lt;Ch_name&gt;_SG_S&lt;log_port1&gt;&lt;log_port&lt;n&gt;&gt; 
        /// ...
        /// &lt;Ch_name&gt;_SG_S&lt;log_port&lt;n&gt;&gt;&lt;log_port1&gt;, &lt;Ch_name&gt;_SG_S&lt;log_port&lt;n&gt;&gt;&lt;log_port2&gt;... &lt;Ch_name&gt;_SG_S&lt;log_port&lt;n&gt;&gt;&lt;log_port&lt;n&gt;&gt;,
        /// 
        /// e.g. Ch1_SG_S11, Ch1_SG_S12, Ch1_SG_S21, Ch1_SG_S22 for &lt;Ch_name&gt; = Ch1, &lt;log_port1&gt; = 1, &lt;log_port2&gt; = 2. Channel name here is taken from the Channel parameter (integer number) of this function.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceAddSParameterGroup(int Channel, int Number_of_Logical_Port_Numbers, int[] Logical_Port_Number_s_)
        {
            int pInvokeResult = PInvoke.TraceAddSParameterGroup(this._handle, Channel, Number_of_Logical_Port_Numbers, Logical_Port_Number_s_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a group of logical ports (S-parameter group).  
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:DEFine:SGRoup?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number. Channel may be used to reference a previously defined channel. If channel does not exist, it is generated with default channel settings. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port_Number_s_">
        /// Returns logical (balanced or unbalanced) port numbers. The port numbers are in ascending order, their number is limited by the test ports of the analyzer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryTraceAddSParameterGroup(int Channel, int[] Logical_Port_Number_s_)
        {
            int pInvokeResult = PInvoke.QueryTraceAddSParameterGroup(this._handle, Channel, Logical_Port_Number_s_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates a new trace in a new diagram area and assigns the trace to the selected channel. The new trace is created with the default trace and channel settings and displayed in the new diagram area.
        /// 
        /// Note(s):
        /// 
        /// A trace can be assigned to a diagram only once. If a attempt is made to assign the same trace a second time an error message -114,"Header suffix out of range" is generated.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'S21'
        /// DISPlay:WINDow&lt;Wnd&gt;:STATe ON
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceAddDiagramArea(int Window, int Window__Trace_, int Channel, string Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceAddDiagramArea(this._handle, Window, Window__Trace_, Channel, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function assigns the active trace to another diagram area. Selecting one of the existing area numbers assigns the active trace to the existing diagram area: The active trace is removed from the previous area and displayed in the new diagram area.
        /// 
        /// Note(s):
        /// 
        /// A trace can be assigned to a diagram only once. If a attempt is made to assign the same trace a second time an error message -114,"Header suffix out of range" is generated.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:STATe ON
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceAssignDiagramArea(int Window, int Window__Trace_, string Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceAssignDiagramArea(this._handle, Window, Window__Trace_, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function assigns an existing trace to a diagram area, and displays the trace. Use DISPlay[:WINDow&lt;Wnd&gt;]:TRACe&lt;WndTr&gt;:FEED to assign the trace to a diagram area using a numeric suffix 
        /// 
        /// Note(s):
        /// 
        /// (1) You can open the trace manager (DISPlay:MENU:KEY:EXECute 'Trace Manager') to obtain an overview of all channels and traces, including the traces that are not displayed. 
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:STATe ON
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe:EFEed '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Ch1Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceAssignWindowDiagramArea(int Window, string Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceAssignWindowDiagramArea(this._handle, Window, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function releases the assignment between a trace and a diagram area, as defined by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED &lt;Trace_Name&gt; and expressed by the &lt;WndTr&gt; suffix. The trace itself is not deleted; this must be done via CALCulate&lt;Ch&gt;:PARameter:DELete &lt;Trace_Name&gt;.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:DELete
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceUnassignDiagramArea(int Window, int Window__Trace_)
        {
            int pInvokeResult = PInvoke.TraceUnassignDiagramArea(this._handle, Window, Window__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects an existing trace as the active trace of the channel. All trace commands without explicit reference to the trace name act on the active trace (e.g. CALCulate&lt;Ch&gt;:FORMat).
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:SELect '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceSelect(int Channel, string Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceSelect(this._handle, Channel, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes a trace with a specified trace name and channel.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:DELete '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceDelete(int Channel, string Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceDelete(this._handle, Channel, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trace names and measurement parameters of all traces assigned to a particular channel.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Catalog">
        /// Response is a string parameter with comma-separated list of trace names and measurement parameters, e.g. 'CH4TR1,S11,CH4TR2,S12'. The measurement parameters are returned according to the naming convention of CALCulate&lt;Ch&gt;:PARameter:SDEFine. The order of traces in the list reflects their creation time: The oldest trace is the first, the newest trace is the last trace in the list.
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceList(int Channel, System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.TraceList(this._handle, Channel, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function assigns a new name to a trace. The trace does not have to be the active trace.
        /// 
        /// Remote-control command(s):
        /// CONFigure:TRACe:REName '&lt;old_trace_name&gt;','&lt;new_trace_name&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Old_Trace_Name">
        /// Define old trace name name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// </param>
        /// <param name="New_Trace_Name">
        /// Define new trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc2"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceRename(string Old_Trace_Name, string New_Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceRename(this._handle, Old_Trace_Name, New_Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function assigns a new name to the active trace in channel &lt;ch&gt;.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;TRACe:REName '&lt;trace_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define new trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc2"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelTraceRename(int Channel, string Trace_Name)
        {
            int pInvokeResult = PInvoke.ChannelTraceRename(this._handle, Channel, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the numbers and names of all traces in the current setup.
        /// 
        /// Remote-control command(s):
        /// CONFigure:TRACe&lt;Trc&gt;:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Catalog">
        /// Returns string with comma-separated list of trace numbers and names. If all traces have been deleted the response is an empty string ("").
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceListCatalog(System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.TraceListCatalog(this._handle, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trace &lt;Trc&gt; name.
        /// 
        /// Remote-control command(s):
        /// CONFigure:TRACe&lt;Trc&gt;:NAME?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Number">
        /// Trace number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Returns the trace name.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceGetTraceName(int Trace_Number, System.Text.StringBuilder Trace_Name)
        {
            int pInvokeResult = PInvoke.TraceGetTraceName(this._handle, Trace_Number, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trace number (numeric suffix) of a trace with known trace name.
        /// 
        /// Remote-control command(s):
        /// CONFigure:TRACe:NAME:ID? '&lt;Trc_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Sets the trace name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "Trc1"
        /// </param>
        /// <param name="Trace_Number">
        /// Returns the trace number (numeric suffix) of a trace with known trace name.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceGetTraceNumber(string Trace_Name, out int Trace_Number)
        {
            int pInvokeResult = PInvoke.TraceGetTraceNumber(this._handle, Trace_Name, out Trace_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel name for an existing trace named '&lt;Trc_name&gt;'. 
        /// 
        /// Remote-control command(s):
        /// CONFigure:TRACe:CHANnel:NAME? '&lt;Trc_name&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Sets the trace name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "Ch2Trc2"
        /// </param>
        /// <param name="Channel_Name">
        /// Returns the channel name for an existing trace.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceGetChannelName(string Trace_Name, System.Text.StringBuilder Channel_Name)
        {
            int pInvokeResult = PInvoke.TraceGetChannelName(this._handle, Trace_Name, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns channel number (numeric suffix) for an existing trace named '&lt;Trc_name&gt;'.
        /// 
        /// Remote-control command(s):
        /// CONFigure:TRACe:CHANnel:NAME:ID? '&lt;Trc_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Sets the trace name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "Ch2Trc2"
        /// </param>
        /// <param name="Channel_Number">
        /// Returns the channel number (numeric suffix) for an existing trace.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceGetChannelNumber(string Trace_Name, out int Channel_Number)
        {
            int pInvokeResult = PInvoke.TraceGetChannelNumber(this._handle, Trace_Name, out Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function copies the current state of the active data trace to a memory trace. If a mathematical trace is active, the data trace associated with the mathematical trace is copied. The memory trace is named Mem&lt;n&gt;[&lt;Data_Trace&gt;] where &lt;n&gt; counts all data and memory traces in the active setup in chronological order, and &lt;Data_Trace&gt; is the name of the associated (copied) data trace. 
        /// 
        /// The exact function of the command depends on the number of memory traces associated to the active data trace:
        /// 
        /// - If no memory trace is associated to the active trace, a new memory trace is generated.
        /// 
        /// - If several memory traces are associated to the active trace, the current measurement data overwrites the last generated or changed memory trace. 
        /// 
        /// Note(s):
        /// 
        /// To copy a trace to the memory without overwriting an existing memory trace or define a memory trace name, use TRACe:COPY &lt;memory_trc&gt;,&lt;data_trc&gt;. To copy an active mathematical trace use TRACe:COPY:MATH &lt;memory_trc&gt;,&lt;data_trc&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MATH:MEMorize
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceDataToMemory(int Channel__Trace_)
        {
            int pInvokeResult = PInvoke.TraceDataToMemory(this._handle, Channel__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function copies a data trace to a memory trace. The trace to be copied is specified as a trace with a name (string variable). The created memory trace is specified as a memory trace with an arbitrary name (string variable). An existing memory trace with the same name is overwritten.
        /// 
        /// Note(s):
        /// 
        /// The copied trace is the data trace which is not modified by any mathematical operations. To copy a mathematical trace to a memory trace, use TRACe:COPY:MATH. To copy the active trace to the memory using an automatic memory trace name, use CALCulate&lt;Ch/Tr&gt;:MATH:MEMorize.
        /// 
        /// Remote-control command(s):
        /// TRACe:COPY '&lt;memory_trc&gt;','&lt;data_trc&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Memory_Trace">
        /// Name of the memory trace.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Mem1"
        /// 
        /// </param>
        /// <param name="Data_Trace">
        /// Name of the data trace.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceDataToMemoryTrace(string Memory_Trace, string Data_Trace)
        {
            int pInvokeResult = PInvoke.TraceDataToMemoryTrace(this._handle, Memory_Trace, Data_Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function copies a mathematical trace to a memory trace. The trace to be copied is specified as a trace with a name (string variable). The created memory trace is specified as a memory trace with an arbitrary name (string variable). An existing memory trace with the same name is overwritten.
        /// 
        /// Note(s):
        /// 
        /// To copy a data trace which is not modified by any mathematical operations, use TRACe:COPY.
        /// 
        /// Remote-control command(s):
        /// TRACe:COPY:MATH '&lt;memory_trc&gt;','&lt;data_trc&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Memory_Trace">
        /// Name of the memory trace.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Mem1"
        /// 
        /// </param>
        /// <param name="Data_Trace">
        /// Name of the data trace.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceMathToMemoryTrace(string Memory_Trace, string Data_Trace)
        {
            int pInvokeResult = PInvoke.TraceMathToMemoryTrace(this._handle, Memory_Trace, Data_Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes one of the memory traces Mem&lt;n&gt;[Trc&lt;m&gt;], where n = 1, ... 8.
        /// 
        /// Remote-control command(s):
        /// TRACe:CLEar MDATA1 | MDATA2 | MDATA3 | MDATA4 | MDATA5 | MDATA6 | MDATA7 | MDATA8
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Memory_Trace">
        /// Deletes one of the memory traces Mem&lt;n&gt;[Trc&lt;m&gt;], where n = 1, ... 8. 
        /// 
        /// Valid Range:
        /// RSZVB_TRACE_MDATA1 (0) - Memory Trace 1
        /// RSZVB_TRACE_MDATA2 (1) - Memory Trace 2
        /// RSZVB_TRACE_MDATA3 (2) - Memory Trace 3
        /// RSZVB_TRACE_MDATA4 (3) - Memory Trace 4
        /// RSZVB_TRACE_MDATA5 (4) - Memory Trace 5
        /// RSZVB_TRACE_MDATA6 (5) - Memory Trace 6
        /// RSZVB_TRACE_MDATA7 (6) - Memory Trace 7
        /// RSZVB_TRACE_MDATA8 (7) - Memory Trace 8
        /// 
        /// Default Value: RSZVB_TRACE_MDATA1 (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteMemoryTrace(int Memory_Trace)
        {
            int pInvokeResult = PInvoke.DeleteMemoryTrace(this._handle, Memory_Trace);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the mathematical mode where the active data trace is divided by the last generated memory trace. The division is calculated on a point-to-point basis: Each measurement point of the active trace is divided by the corresponding measurement point of the memory trace. The result of the division is a mathematical trace and replaces the active data trace in the diagram area. The mathematical trace is updated as the measurement goes on and the analyzer provides new active trace data.
        /// 
        /// This function is disabled unless a memory trace is coupled to the active data trace. Trace coupling ensures that the two traces have the same number of points so that the mathematical trace Data/Mem.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MATH[:EXPRession]:SDEFine '&lt;string&gt;'
        /// CALCulate&lt;Ch/Tr&gt;:MATH:STATe ON
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mathematical_Expression">
        /// String parameter for the mathematical expression, enclosed in brackets. Defines a general mathematical relation between traces.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// The string format must correspond to an allowed string (see also user manual):
        /// 
        /// - Operands:
        /// 
        ///     &lt;Trace name&gt; | activeTrc | Mem[activeTrc]
        /// 
        /// - Constants:
        /// 
        ///     e, pi | 1, -1.2, 8e9 | 1 + 2j, 2 + 1e-9j
        /// 
        /// - Operators:
        /// 
        ///     - + , - , * , / , ^
        /// 
        /// - Functions:
        /// 
        ///     linMag (), dBMag (), Arg (), Re (), Im (), log (), ln (),
        ///     tan (), atan (), sin (), asin (), cos (), acos (),
        ///     Min ( ... , ... ), Max ( ... , ... )
        /// 
        /// - Special Functions:
        /// 
        ///     StimVal ()
        /// 
        /// - Brackets:
        /// 
        ///     ( )
        /// 
        /// Example:
        /// 
        /// Define a mathematical trace, dividing the data trace by the stored memory trace.
        /// 
        ///     Trc1 / Mem2[Trc1]
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceUserDefinedMath(int Channel__Trace_, string Mathematical_Expression)
        {
            int pInvokeResult = PInvoke.TraceUserDefinedMath(this._handle, Channel__Trace_, Mathematical_Expression);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates or deactivates the mathematical mode where the mathematical trace defined via CALCulate&lt;Ch/Tr&gt;:MATH[:EXPRession]:SDEFine is calculated and displayed instead of the active data trace.
        /// 
        /// Note(s):
        /// 
        /// This function is not valid for mathematical traces calculated via CALCulate&lt;Ch/Tr&gt;:MATH:FUNCtion.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MATH:STATe &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Math_State">
        /// Activates or deactivates the mathematical mode (ON - Display the active data trace, OFF - Display the mathematical trace).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceMathState(int Channel__Trace_, bool Math_State)
        {
            int pInvokeResult = PInvoke.SetTraceMathState(this._handle, Channel__Trace_, System.Convert.ToUInt16(Math_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns state of the mathematical mode where the mathematical trace is calculated and displayed instead of the active data trace.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MATH:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Math_State">
        /// Returns state of the mathematical mode where the mathematical trace is calculated and displayed instead of the active data trace.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceMathState(int Channel__Trace_, out bool Math_State)
        {
            ushort Math_StateAsUShort;
            int pInvokeResult = PInvoke.GetTraceMathState(this._handle, Channel__Trace_, out Math_StateAsUShort);
            Math_State = System.Convert.ToBoolean(Math_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a simple mathematical relation between the active trace and the active memory trace to calculate a new mathematical trace and displays the mathematical trace.
        /// 
        /// Notes:
        /// 
        /// (1) This command places some restrictions on the mathematical expression and the operands. Use CALCulate&lt;Chn&gt;:MATH[:EXPRession]:SDEFine to define general expressions. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MATH:FUNCtion NORMal | ADD | SUBTract | MULTiply | DIVide
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mathematical_Function">
        /// This control defines a simple mathematical relation between the active trace and the active memory trace to calculate a new mathematical trace and displays the mathematical trace.
        /// 
        /// Valid Range: 
        /// RSZVB_MATH_FUNC_NORM  (0) - Normal
        /// RSZVB_MATH_FUNC_ADD   (1) - Add
        /// RSZVB_MATH_FUNC_SUB   (2) - Subtract
        /// RSZVB_MATH_FUNC_MULT  (3) - Multiply
        /// RSZVB_MATH_FUNC_DIV   (4) - Divide
        /// 
        /// Default Value: RSZVB_MATH_FUNC_NORM
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// NORMal    - Math. trace = active data trace
        /// ADD       - Math. trace = data + memory
        /// SUBTract  - Math. trace = data - memory
        /// MULTiply  - Math. trace = data * memory
        /// DIVide    - Math. trace = data / memory
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceMathFunction(int Channel__Trace_, int Mathematical_Function)
        {
            int pInvokeResult = PInvoke.SetTraceMathFunction(this._handle, Channel__Trace_, Mathematical_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a simple mathematical relation between the active trace and the active memory trace to calculate a new mathematical trace and displays the mathematical trace.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MATH:FUNCtion?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mathematical_Function">
        /// This control returns a simple mathematical relation between the active trace and the active memory trace to calculate a new mathematical trace and displays the mathematical trace.
        /// 
        /// Valid Range: 
        /// RSZVB_MATH_FUNC_NORM  (0) - Normal
        /// RSZVB_MATH_FUNC_ADD   (1) - Add
        /// RSZVB_MATH_FUNC_SUB   (2) - Subtract
        /// RSZVB_MATH_FUNC_MULT  (3) - Multiply
        /// RSZVB_MATH_FUNC_DIV   (4) - Divide
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// NORMal    - Math. trace = active data trace
        /// ADD       - Math. trace = data + memory
        /// SUBTract  - Math. trace = data - memory
        /// MULTiply  - Math. trace = data * memory
        /// DIVide    - Math. trace = data / memory
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceMathFunction(int Channel__Trace_, out int Mathematical_Function)
        {
            int pInvokeResult = PInvoke.GetTraceMathFunction(this._handle, Channel__Trace_, out Mathematical_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function controls the conversion and formatting of the mathematic expression defined via CALCulate&lt;Chn&gt;:MATH[:EXPRession]:SDEFine.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MATH:WUNit[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Math_Wave_Quantity_State">
        /// Controls the conversion and formatting of the mathematic expression. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s);
        /// 
        /// (1) ON - Result is Wave Quantity enabled; the analyzer assumes that the result of the mathematical expression represents a voltage.  
        /// 
        /// (2) OFF - Result is Wave Quantity disabled; the analyzer assumes that the result of the mathematical expression is dimensionless.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceMathWaveQuantityState(int Channel__Trace_, bool Math_Wave_Quantity_State)
        {
            int pInvokeResult = PInvoke.SetTraceMathWaveQuantityState(this._handle, Channel__Trace_, System.Convert.ToUInt16(Math_Wave_Quantity_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the conversion and formatting of the mathematic expression defined via CALCulate&lt;Chn&gt;:MATH[:EXPRession]:SDEFine.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MATH:WUNit[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Math_Wave_Quantity_State">
        /// Returns the state of the conversion and formatting of the mathematic expression. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s);
        /// 
        /// (1) ON - Result is Wave Quantity enabled; the analyzer assumes that the result of the mathematical expression represents a voltage.  
        /// 
        /// (2) OFF - Result is Wave Quantity disabled; the analyzer assumes that the result of the mathematical expression is dimensionless.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceMathWaveQuantityState(int Channel__Trace_, out bool Math_Wave_Quantity_State)
        {
            ushort Math_Wave_Quantity_StateAsUShort;
            int pInvokeResult = PInvoke.GetTraceMathWaveQuantityState(this._handle, Channel__Trace_, out Math_Wave_Quantity_StateAsUShort);
            Math_Wave_Quantity_State = System.Convert.ToBoolean(Math_Wave_Quantity_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the domain for active trace representation.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STATe ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Transform_Domain">
        /// This control selects the domain for active trace representation.
        /// 
        /// Valid Values:
        /// RSZVB_FREQUENCY (0) - Frequency
        /// RSZVB_TIME      (1) - Time
        /// 
        /// Default Value: RSZVB_FREQUENCY (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceTransformDomain(int Channel__Trace_, int Transform_Domain)
        {
            int pInvokeResult = PInvoke.SetTraceTransformDomain(this._handle, Channel__Trace_, Transform_Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the domain for active trace representation.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Transform_Domain">
        /// This control returns the domain for active trace representation.
        /// 
        /// Valid Values:
        /// RZVB_FREQUENCY (0) - Frequency
        /// RZVB_TIME      (1) - Time
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceTransformDomain(int Channel__Trace_, out int Transform_Domain)
        {
            int pInvokeResult = PInvoke.GetTraceTransformDomain(this._handle, Channel__Trace_, out Transform_Domain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function converts S-parameters into matched-circuit (converted) Y-parameters or Z-parameters and vice versa.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:TRANsform:COMPlex S | Y | Z
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Conversion">
        /// This control converts S-parameters into matched-circuit (converted) Y-parameters or Z-parameters and vice versa.
        /// 
        /// Valid Values:
        /// RSZVB_CONV_S    (0) - S
        /// RSZVB_CONV_Y    (1) - Y
        /// RSZVB_CONV_Z    (2) - Z
        /// 
        /// Default Value: RSZVB_CONV_S (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceTransformConversion(int Channel__Trace_, int Conversion)
        {
            int pInvokeResult = PInvoke.SetTraceTransformConversion(this._handle, Channel__Trace_, Conversion);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the conversion type.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:TRANsform:COMPlex?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Conversion">
        /// This control returns the conversion type.
        /// 
        /// Valid Values:
        /// RSZVB_CONV_S    (0) - S
        /// RSZVB_CONV_Y    (1) - Y
        /// RSZVB_CONV_Z    (2) - Z
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceTransformConversion(int Channel__Trace_, out int Conversion)
        {
            int pInvokeResult = PInvoke.GetTraceTransformConversion(this._handle, Channel__Trace_, out Conversion);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the start time of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Time">
        /// This control defines start time of the diagram in time domain.
        /// 
        /// Valid Range: -100 s to +99.999999999998 s
        /// 
        /// Default Value: -1.0E-9s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainStartTime(int Channel__Trace_, double Start_Time)
        {
            int pInvokeResult = PInvoke.SetTimeDomainStartTime(this._handle, Channel__Trace_, Start_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the start time of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Time">
        /// This control returns start time of the diagram in time domain.
        /// 
        /// Valid Range: -100 s to +99.999999999998 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainStartTime(int Channel__Trace_, out double Start_Time)
        {
            int pInvokeResult = PInvoke.GetTimeDomainStartTime(this._handle, Channel__Trace_, out Start_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stop time of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STOP
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Time">
        /// This control defines stop time of the diagram in time domain.
        /// 
        /// Valid Range: -99.999999999998 s to +100 s
        /// 
        /// Default Value: 4E-009s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainStopTime(int Channel__Trace_, double Stop_Time)
        {
            int pInvokeResult = PInvoke.SetTimeDomainStopTime(this._handle, Channel__Trace_, Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the stop time of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Time">
        /// This control returns stop time of the diagram in time domain.
        /// 
        /// Valid Range: -99.999999999998 s to +100 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainStopTime(int Channel__Trace_, out double Stop_Time)
        {
            int pInvokeResult = PInvoke.GetTimeDomainStopTime(this._handle, Channel__Trace_, out Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the center time of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:CENTer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Time">
        /// This control defines center time of the diagram in time domain.
        /// 
        /// Valid Range: -99.999999999998 s to +99.99999999999 s
        /// 
        /// Default Value: 1.5E-009s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainCenterTime(int Channel__Trace_, double Center_Time)
        {
            int pInvokeResult = PInvoke.SetTimeDomainCenterTime(this._handle, Channel__Trace_, Center_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the center time of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:CENTer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Time">
        /// This control returns center time of the diagram in time domain.
        /// 
        /// Valid Range: -99.999999999998 s to +99.99999999999 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainCenterTime(int Channel__Trace_, out double Center_Time)
        {
            int pInvokeResult = PInvoke.GetTimeDomainCenterTime(this._handle, Channel__Trace_, out Center_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the time span of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:SPAN
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Span">
        /// This control defines time span of the diagram in time domain.
        /// 
        /// Valid Range: 2E-012 s to 200 s
        /// 
        /// Default Value: 5E-009 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainTimeSpan(int Channel__Trace_, double Time_Span)
        {
            int pInvokeResult = PInvoke.SetTimeDomainTimeSpan(this._handle, Channel__Trace_, Time_Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the time span of the diagram in time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:SPAN?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Span">
        /// This control returns time span of the diagram in time domain.
        /// 
        /// Valid Range: 2E-012 s to 200 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainTimeSpan(int Channel__Trace_, out double Time_Span)
        {
            int pInvokeResult = PInvoke.GetTimeDomainTimeSpan(this._handle, Channel__Trace_, out Time_Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches over between the x-axis scaling in time units or distance units.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:XAXis TIME | DISTance
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Axis_Scaling">
        /// This control switches over between the x-axis scaling in time units or distance units.
        /// 
        /// Valid Values:
        /// RSZVB_DISTANCE (0) - Distance
        /// RSZVB_TIME     (1) - Time
        /// 
        /// Default Value: RSZVB_TIME (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainTimeAxisScaling(int Channel__Trace_, int Time_Axis_Scaling)
        {
            int pInvokeResult = PInvoke.SetTimeDomainTimeAxisScaling(this._handle, Channel__Trace_, Time_Axis_Scaling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the x-axis scaling in time units or distance units.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:XAXis?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Axis_Scaling">
        /// This control returns the state of the x-axis scaling in time units or distance units.
        /// 
        /// Valid Values:
        /// RZVB_DISTANCE (0) - Distance
        /// RZVB_TIME     (1) - Time
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainTimeAxisScaling(int Channel__Trace_, out int Time_Axis_Scaling)
        {
            int pInvokeResult = PInvoke.GetTimeDomainTimeAxisScaling(this._handle, Channel__Trace_, out Time_Axis_Scaling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines time domain transformation type.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME[:TYPE] BPASs | LPASs
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STIMulus STEP | IMPulse
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Transformation_Type">
        /// This control defines time domain transformation type.
        /// 
        /// Valid Values:
        /// RSZVB_TYPE_BPAS_IMP  (0) - Band Pass Impulse
        /// RSZVB_TYPE_LPAS_IMP  (1) - Low Pass Impulse
        /// RSZVB_TYPE_LPAS_STEP (2) - Low Pass Step
        /// 
        /// 
        /// Default Value: RSZVB_TYPE_BPAS_IMP (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainTransformationType(int Channel__Trace_, int Transformation_Type)
        {
            int pInvokeResult = PInvoke.SetTimeDomainTransformationType(this._handle, Channel__Trace_, Transformation_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the time domain transformation type.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME[:TYPE]?
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:STIMulus?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Transformation_Type">
        /// This control returns time domain transformation type.
        /// 
        /// Valid Values:
        /// RSZVB_TYPE_BPAS_IMP  (0) - Band Pass Impulse
        /// RSZVB_TYPE_LPAS_IMP  (1) - Low Pass Impulse
        /// RSZVB_TYPE_LPAS_STEP (2) - Low Pass Step
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainTransformationType(int Channel__Trace_, out int Transformation_Type)
        {
            int pInvokeResult = PInvoke.GetTimeDomainTransformationType(this._handle, Channel__Trace_, out Transformation_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the window type for filtering the data in the frequency domain prior to the time domain transformation.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:WINDow RECT | HAMMing | HANN | BOHMan | DCHebyshev
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Filter_Type">
        /// This control defines time domain transformation filter.
        /// 
        /// Valid Values:
        /// RSZVB_FILTER_RECT (0) - No profiling (rectangle)
        /// RSZVB_FILTER_HANN (1) - Normal profile (Hann)
        /// RSZVB_FILTER_HAMM (2) - Low first sidelobe (Hamming)
        /// RSZVB_FILTER_BOHM (3) - Steep falloff (Bohman)
        /// RSZVB_FILTER_DCH  (4) - Arbitrary sidelobes (Dolph-Chebychev)
        /// 
        /// 
        /// Default Value: RSZVB_FILTER_RECT (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainTransformationFilter(int Channel__Trace_, int Filter_Type)
        {
            int pInvokeResult = PInvoke.SetTimeDomainTransformationFilter(this._handle, Channel__Trace_, Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the window type for filtering the data in the frequency domain prior to the time domain transformation.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:WINDow?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Filter_Type">
        /// This control returns time domain transformation filter.
        /// 
        /// Valid Values:
        /// RSZVB_FILTER_RECT (0) - No profiling (rectangle)
        /// RSZVB_FILTER_HANN (1) - Normal profile (Hann)
        /// RSZVB_FILTER_HAMM (2) - Low first sidelobe (Hamming)
        /// RSZVB_FILTER_BOHM (3) - Steep falloff (Bohman)
        /// RSZVB_FILTER_DCH  (4) - Arbitrary sidelobes (Dolph-Chebychev)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainTransformationFilter(int Channel__Trace_, out int Filter_Type)
        {
            int pInvokeResult = PInvoke.GetTimeDomainTransformationFilter(this._handle, Channel__Trace_, out Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the sideband suppression for the Dolph-Chebyshev window. The command is only available if a Dolph-Chebyshev window is active.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:DCHebyshev
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sideband_Suppression">
        /// This control sets the sideband suppression for the Dolph-Chebyshev window. The command is only available if a Dolph-Chebyshev window is active.
        /// 
        /// Valid Values:
        /// 10 dB to 120 dB
        /// 
        /// Default Value: 32dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainTransformationSidebandSuppression(int Channel__Trace_, double Sideband_Suppression)
        {
            int pInvokeResult = PInvoke.SetTimeDomainTransformationSidebandSuppression(this._handle, Channel__Trace_, Sideband_Suppression);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the sideband suppression for the Dolph-Chebyshev window. The command is only available if a Dolph-Chebyshev window is active.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:DCHebyshev?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sideband_Suppression">
        /// This control returns the sideband suppression for the Dolph-Chebyshev window. The command is only available if a Dolph-Chebyshev window is active.
        /// 
        /// Valid Values:
        /// 10 dB to 120 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainTransformationSidebandSuppression(int Channel__Trace_, out double Sideband_Suppression)
        {
            int pInvokeResult = PInvoke.GetTimeDomainTransformationSidebandSuppression(this._handle, Channel__Trace_, out Sideband_Suppression);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the resolution enhancement factor for time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:RESolution:EFACtor
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Resolution">
        /// This control sets the resolution enhancement factor.
        /// 
        /// Valid Range: 1.0 to 10.0
        /// 
        /// Default Value: 1.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeDomainTransformationResolutionEfactor(int Channel__Trace_, double Resolution)
        {
            int pInvokeResult = PInvoke.SetTimeDomainTransformationResolutionEfactor(this._handle, Channel__Trace_, Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the resolution enhancement factor for time domain.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:RESolution:EFACtor?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Resolution">
        /// This control returns the resolution enhancement factor for time domain.
        /// 
        /// Valid Range: 1.0 to 10.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeDomainTransformationResolutionEfactor(int Channel__Trace_, out double Resolution)
        {
            int pInvokeResult = PInvoke.GetTimeDomainTransformationResolutionEfactor(this._handle, Channel__Trace_, out Resolution);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calculates the harmonic grid for low pass time domain transforms according to one of the three alternative algorithms.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs KFSTop | KDFRequency | KSDFrequency
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calculation_Method">
        /// This control selects the calculation method.
        /// 
        /// Valid Values:
        /// RSZVB_GRID_KFST  (0) - Keep stop frequency and number of points
        /// RSZVB_GRID_KDFR  (1) - Keep frequency gap and number of points
        /// RSZVB_GRID_KSDFR (2) - Keep stop frequency and approximate frequency gap
        /// 
        /// Default Value: RSZVB_GRID_KFST (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHarmonicGridAndKeep(int Channel__Trace_, int Calculation_Method)
        {
            int pInvokeResult = PInvoke.SetHarmonicGridAndKeep(this._handle, Channel__Trace_, Calculation_Method);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the DC value for low pass transforms. The function is enabled only if the sweep points are on a harmonic grid (to be set explicitly or using CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs).
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs:DCSParam
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="DC_Value">
        /// This control sets the DC value for low pass transforms.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDCValue(int Channel__Trace_, double DC_Value)
        {
            int pInvokeResult = PInvoke.SetDCValue(this._handle, Channel__Trace_, DC_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the DC value for low pass transforms.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs:DCSParam?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="DC_Value">
        /// This control returns the DC value for low pass transforms.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDCValue(int Channel__Trace_, out double DC_Value)
        {
            int pInvokeResult = PInvoke.GetDCValue(this._handle, Channel__Trace_, out DC_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function extrapolates the measured trace towards f = 0 and overwrites the current DC value (CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs:DCSParam). The function is relevant for low pass time domain transforms.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs:DCSParam:EXTRapolate
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ExtrapolateDCValue(int Channel__Trace_)
        {
            int pInvokeResult = PInvoke.ExtrapolateDCValue(this._handle, Channel__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether continuous extrapolation for the DC value is enabled.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs:DCSParam:CONTinuous ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Continuous_Extrapolation">
        /// This control determines whether continuous extrapolation for the DC value is enabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetContinuousExtrapolation(int Channel__Trace_, bool Continuous_Extrapolation)
        {
            int pInvokeResult = PInvoke.SetContinuousExtrapolation(this._handle, Channel__Trace_, System.Convert.ToUInt16(Continuous_Extrapolation));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether continuous extrapolation for the DC value is enabled.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPASs:DCSParam:CONTinuous?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Continuous_Extrapolation">
        /// This control returns whether continuous extrapolation for the DC value is enabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetContinuousExtrapolation(int Channel__Trace_, out bool Continuous_Extrapolation)
        {
            ushort Continuous_ExtrapolationAsUShort;
            int pInvokeResult = PInvoke.GetContinuousExtrapolation(this._handle, Channel__Trace_, out Continuous_ExtrapolationAsUShort);
            Continuous_Extrapolation = System.Convert.ToBoolean(Continuous_ExtrapolationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calculates the harmonic grid for low pass time domain transforms, keeping the stop frequency and the number of points.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:TRANsform:TIME:LPFRequency
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalculateHarmonicGrid(int Channel__Trace_)
        {
            int pInvokeResult = PInvoke.CalculateHarmonicGrid(this._handle, Channel__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether the time gate for trace no. &lt;Ch/Tr&gt; is enabled.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STATe ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate">
        /// This control determines whether the time gate for trace no. &lt;Ch/Tr&gt; is enabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateState(int Channel__Trace_, bool Time_Gate)
        {
            int pInvokeResult = PInvoke.SetTimeGateState(this._handle, Channel__Trace_, System.Convert.ToUInt16(Time_Gate));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the time gate for trace no. &lt;Ch/Tr&gt; is enabled.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate">
        /// This control returns whether the time gate for trace no. &lt;Ch/Tr&gt; is enabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateState(int Channel__Trace_, out bool Time_Gate)
        {
            ushort Time_GateAsUShort;
            int pInvokeResult = PInvoke.GetTimeGateState(this._handle, Channel__Trace_, out Time_GateAsUShort);
            Time_Gate = System.Convert.ToBoolean(Time_GateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the start time of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Time">
        /// This control defines the start time of the time gate.
        /// 
        /// Valid Range: -100 s to +99.999999999998 s
        /// 
        /// Default Value: -1.0E-9s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateStartTime(int Channel__Trace_, double Start_Time)
        {
            int pInvokeResult = PInvoke.SetTimeGateStartTime(this._handle, Channel__Trace_, Start_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the start time of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Time">
        /// This control returns the start time of the time gate.
        /// 
        /// Valid Range: -100 s to +99.999999999998 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateStartTime(int Channel__Trace_, out double Start_Time)
        {
            int pInvokeResult = PInvoke.GetTimeGateStartTime(this._handle, Channel__Trace_, out Start_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stop time of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STOP
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Time">
        /// This control defines the stop time of the time gate.
        /// 
        /// Valid Range: -99.999999999998 s to +100 s
        /// 
        /// Default Value: 4.0E-9s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateStopTime(int Channel__Trace_, double Stop_Time)
        {
            int pInvokeResult = PInvoke.SetTimeGateStopTime(this._handle, Channel__Trace_, Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the stop time of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Time">
        /// This control returns the stop time of the time gate.
        /// 
        /// Valid Range: -99.999999999998 s to +100 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateStopTime(int Channel__Trace_, out double Stop_Time)
        {
            int pInvokeResult = PInvoke.GetTimeGateStopTime(this._handle, Channel__Trace_, out Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the center time of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:CENTer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Time">
        /// This control defines the center time of the time gate.
        /// 
        /// Valid Range: -99.8999999 s to +99.8999999 s
        /// 
        /// Default Value: 1.5E-9s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateCenterTime(int Channel__Trace_, double Center_Time)
        {
            int pInvokeResult = PInvoke.SetTimeGateCenterTime(this._handle, Channel__Trace_, Center_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the center time of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:CENTer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Time">
        /// This control returns the center time of the time gate.
        /// 
        /// Valid Range: -99.8999999 s to +99.8999999 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateCenterTime(int Channel__Trace_, out double Center_Time)
        {
            int pInvokeResult = PInvoke.GetTimeGateCenterTime(this._handle, Channel__Trace_, out Center_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines time gate type.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME[:TYPE] BPASs | NOTCh
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate_Type">
        /// This control defines time gate type.
        /// 
        /// 
        /// Valid Values:
        /// RSZVB_TGATE_TYPE_BPAS  (0) - Band Pass
        /// RSZVB_TGATE_TYPE_NOTCH (1) - Notch
        /// 
        /// 
        /// Default Value: RSZVB_TGATE_TYPE_BPAS (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateType(int Channel__Trace_, int Time_Gate_Type)
        {
            int pInvokeResult = PInvoke.SetTimeGateType(this._handle, Channel__Trace_, Time_Gate_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries time gate type.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME[:TYPE]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate_Type">
        /// This control returns time gate type.
        /// 
        /// 
        /// Valid Values:
        /// RSZVB_TGATE_TYPE_BPAS  (0) - Band Pass
        /// RSZVB_TGATE_TYPE_NOTCH (1) - Notch
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateType(int Channel__Trace_, out int Time_Gate_Type)
        {
            int pInvokeResult = PInvoke.GetTimeGateType(this._handle, Channel__Trace_, out Time_Gate_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines time gate filter type, defining what occurs to the data in the specific time region.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:WINDow RECT | HAMMing | HANN | BOHMan | DCHebyshev
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Filter_Type">
        /// This control defines time gate filter type, defining what occurs to the data in the specific time region.
        /// 
        /// Valid Values:
        /// RSZVB_FILTER_RECT (0) - No profiling (rectangle)
        /// RSZVB_FILTER_HANN (1) - Normal profile (Hann)
        /// RSZVB_FILTER_HAMM (2) - Low first sidelobe (Hamming)
        /// RSZVB_FILTER_BOHM (3) - Steep falloff (Bohman)
        /// RSZVB_FILTER_DCH  (4) - Arbitrary sidelobes (Dolph-Chebychev)
        /// 
        /// 
        /// Default Value: RSZVB_FILTER_RECT (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateFilter(int Channel__Trace_, int Filter_Type)
        {
            int pInvokeResult = PInvoke.SetTimeGateFilter(this._handle, Channel__Trace_, Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries time gate filter type.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:WINDow?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Filter_Type">
        /// This control returns time gate filter type, defining what occurs to the data in the specific time region.
        /// 
        /// Valid Values:
        /// RSZVB_FILTER_RECT (0) - No profiling (rectangle)
        /// RSZVB_FILTER_HANN (1) - Normal profile (Hann)
        /// RSZVB_FILTER_HAMM (2) - Low first sidelobe (Hamming)
        /// RSZVB_FILTER_BOHM (3) - Steep falloff (Bohman)
        /// RSZVB_FILTER_DCH  (4) - Arbitrary sidelobes (Dolph-Chebychev)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateFilter(int Channel__Trace_, out int Filter_Type)
        {
            int pInvokeResult = PInvoke.GetTimeGateFilter(this._handle, Channel__Trace_, out Filter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the sideband suppression for the Dolph-Chebyshev time gate. The command is only available if a Dolph-Chebyshev time gate is active.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:DCHebyshev
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sideband_Suppression">
        /// This control sets the sideband suppression for the Dolph-Chebyshev time gate. The command is only available if a Dolph-Chebyshev time gate is active.
        /// 
        /// Valid Values:
        /// 10 dB to 120 dB
        /// 
        /// Default Value: 32dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateSidebandSuppression(int Channel__Trace_, double Sideband_Suppression)
        {
            int pInvokeResult = PInvoke.SetTimeGateSidebandSuppression(this._handle, Channel__Trace_, Sideband_Suppression);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the sideband suppression for the Dolph-Chebyshev time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:DCHebyshev?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sideband_Suppression">
        /// This control returns the sideband suppression for the Dolph-Chebyshev time gate.
        /// 
        /// Valid Values:
        /// 10 dB to 120 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateSidebandSuppression(int Channel__Trace_, out double Sideband_Suppression)
        {
            int pInvokeResult = PInvoke.GetTimeGateSidebandSuppression(this._handle, Channel__Trace_, out Sideband_Suppression);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the time gate to be applied to the time domain transform.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:SHAPe MAXimum | WIDE | NORMal | MINimum
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate_Shape">
        /// This control selects the time gate to be applied to the time domain transform. 
        /// 
        /// 
        /// Valid Values:
        /// RSZVB_TGATE_SHAPE_MAX  (0) - Maximum
        /// RSZVB_TGATE_SHAPE_WIDE (1) - Wide
        /// RSZVB_TGATE_SHAPE_NORM (2) - Normal
        /// RSZVB_TGATE_SHAPE_MIN  (3) - Minimum
        /// 
        /// 
        /// Default Value: RSZVB_TGATE_SHAPE_WIDE (0)
        /// 
        /// Notes:
        /// 
        /// (1) 
        /// MINimum - Steepest edges (rectangle)
        /// WIDE    - Normal gate (Hann)
        /// NORM    - Steep edges (Hamming)
        /// Maximum - Maximum flatness (Bohman) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateShape(int Channel__Trace_, int Time_Gate_Shape)
        {
            int pInvokeResult = PInvoke.SetTimeGateShape(this._handle, Channel__Trace_, Time_Gate_Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the time gate applied to the time domain transform.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:SHAPe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate_Shape">
        /// This control returns the time gate to be applied to the time domain transform. 
        /// 
        /// 
        /// Valid Values:
        /// RSZVB_TGATE_SHAPE_MAX  (0) - Maximum
        /// RSZVB_TGATE_SHAPE_WIDE (1) - Wide
        /// RSZVB_TGATE_SHAPE_NORM (2) - Normal
        /// RSZVB_TGATE_SHAPE_MIN  (3) - Minimum
        /// 
        /// Notes:
        /// 
        /// (1) 
        /// MINimum - Steepest edges (rectangle)
        /// WIDE    - Normal gate (Hann)
        /// NORM    - Steep edges (Hamming)
        /// Maximum - Maximum flatness (Bohman) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateShape(int Channel__Trace_, out int Time_Gate_Shape)
        {
            int pInvokeResult = PInvoke.GetTimeGateShape(this._handle, Channel__Trace_, out Time_Gate_Shape);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the span of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:SPAN
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Span">
        /// This control defines the span of the time gate.
        /// 
        /// Valid Range: 2.0E-12 s to 200.0 s
        /// 
        /// Default Value: 5.0E-9s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateSpan(int Channel__Trace_, double Span)
        {
            int pInvokeResult = PInvoke.SetTimeGateSpan(this._handle, Channel__Trace_, Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the span of the time gate.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:SPAN?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Span">
        /// This control returns the span of the time gate.
        /// 
        /// Valid Range: 2.0E-12 s to 200.0 s
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateSpan(int Channel__Trace_, out double Span)
        {
            int pInvokeResult = PInvoke.GetTimeGateSpan(this._handle, Channel__Trace_, out Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines whether the time gate limits for trace no. &lt;Ch/Tr&gt; are displayed permanently.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STATe ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate_Display">
        /// This control determines whether the time gate limits for trace no. &lt;Ch/Tr&gt; are displayed permanently.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTimeGateDisplayState(int Channel__Trace_, bool Time_Gate_Display)
        {
            int pInvokeResult = PInvoke.SetTimeGateDisplayState(this._handle, Channel__Trace_, System.Convert.ToUInt16(Time_Gate_Display));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the time gate limits for trace no. &lt;Ch/Tr&gt; are displayed permanently.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:FILTer[:GATE]:TIME:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Gate_Display">
        /// This control returns whether the time gate limits for trace no. &lt;Ch/Tr&gt; are displayed permanently.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTimeGateDisplayState(int Channel__Trace_, out bool Time_Gate_Display)
        {
            ushort Time_Gate_DisplayAsUShort;
            int pInvokeResult = PInvoke.GetTimeGateDisplayState(this._handle, Channel__Trace_, out Time_Gate_DisplayAsUShort);
            Time_Gate_Display = System.Convert.ToBoolean(Time_Gate_DisplayAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function define the range for the statistical and phase evaluation. The evaluation range is a continuous interval of the sweep variable.
        /// 
        /// It is possible to define and select up to ten different evaluation ranges for each setup. Full Span means that the search range is equal to the sweep range. The statistical and phase evaluation takes into account all measurement points with stimulus values xi between the Start and Stop value of the evaluation range:
        /// 
        ///     Start  &lt;= xi &lt;= Stop
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:STATistics:DOMain:USER &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:STATistics:DOMain:USER:STARt &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:STATistics:DOMain:USER:STOP &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Evaluation_Range">
        /// Selects one out of 10 evaluation ranges.
        /// 
        /// Valid Values:
        /// RSZVB_FULL_SPAN (0) - Full Span
        /// RSZVB_RANGE_1   (1) - Range 1
        /// RSZVB_RANGE_2   (2) - Range 2
        /// RSZVB_RANGE_3   (3) - Range 3
        /// RSZVB_RANGE_4   (4) - Range 4
        /// RSZVB_RANGE_5   (5) - Range 5
        /// RSZVB_RANGE_6   (6) - Range 6
        /// RSZVB_RANGE_7   (7) - Range 7
        /// RSZVB_RANGE_8   (8) - Range 8
        /// RSZVB_RANGE_9   (9) - Range 9
        /// RSZVB_RANGE_10  (10) - Range 10
        /// 
        /// Default Value: RSZVB_FULL_SPAN (0)
        /// 
        /// Note:
        /// 
        /// Full span denotes the (non-configurable) evaluation range. Start and Stop parameters does not apply.
        /// 
        /// </param>
        /// <param name="Start">
        /// Defines the start value of the selected evaluation range.
        /// 
        /// Valid range: -1000.0e9 Hz to 999.999999999e9 Hz
        /// 
        /// Default Value: 300.0e3 Hz
        /// 
        /// </param>
        /// <param name="Stop">
        /// Defines the stop value of the selected evaluation range.
        /// 
        /// Valid range: -1000.0e9 Hz to 999.999999999e9 Hz
        /// 
        /// Default Value: 4.0e9 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceEvaluationRange(int Channel__Trace_, int Evaluation_Range, double Start, double Stop)
        {
            int pInvokeResult = PInvoke.TraceEvaluationRange(this._handle, Channel__Trace_, Evaluation_Range, Start, Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects how to evaluate and display statistical and phase information of the entire trace or of a specific evaluation range.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:STATistics[:STATe] &lt;Boolean&gt;
        /// CALCulate&lt;Ch/Tr&gt;:STATistics:RESult? MEAN | STDDev | MAX | MIN | RMS | PTPeak | ELENgth | PDELay | ALL | SLOPe | FLATness | GAIN
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Statistical_Parameter">
        /// Define statistical parameter.
        /// 
        /// Valid Values:
        /// RSZVB_ALL      (0) - All
        /// RSZVB_MEAN     (1) - Mean
        /// RSZVB_STDDEV   (2) - Std Deviation
        /// RSZVB_MAX      (3) - Max
        /// RSZVB_MIN      (4) - Min
        /// RSZVB_RMS      (5) - RMS
        /// RSZVB_PTPEAK   (6) - Peak-to-peak
        /// RSZVB_ELENGTH  (7) - Electrical Length
        /// RSZVB_PDELAY   (8) - Phase Delay
        /// RSZVB_SLOPE    (9) - Slope
        /// RSZVB_FLATNESS (10) - Flatness
        /// RSZVB_GAIN     (11) - Gain
        /// 
        /// Default Vlaue: RSZVB_ALL (0)
        /// 
        /// Notes:
        /// 
        /// (1) All:
        /// Return all statistical values, observing the order used above.
        /// 
        /// (2) Mean:
        /// Return arithmetic mean value of all response values of the trace in the entire sweep range (or in the evaluation range defined in manual control)
        /// 
        /// (3) Std Deviation:
        /// Return standard deviation of all response values.
        /// 
        /// (4) Max:
        /// Return the maximum of all response values.
        /// 
        /// (5) Min:
        /// Return the minimum of all response values.
        /// 
        /// (6) RMS:
        /// Return the root mean square of all response values.
        /// 
        /// (7) Peak-to-peak:
        /// Return the peak-to-peak value (MAX - MIN).
        /// 
        /// (8) Electrical Length:
        /// Return the electrical length.
        /// 
        /// (9) Phase Delay:
        /// Return the phase delay.
        /// 
        /// (10) Slope: 
        /// Return the slope between two marker values.
        /// 
        /// (11) Flatness: 
        /// Return the flatness between two marker values.
        /// 
        /// (12) Gain: 
        /// Return the gain, i.e. the larger of two marker values 
        /// </param>
        /// <param name="Info_Field">
        /// Displays or hides all statistical results in the diagram area of trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Response_Value_s_">
        /// The data is returned as a list of real numbers. The unit is the default unit of the measured parameter.
        /// 
        /// If a polar trace format is selected, then the statistical parameters are calculated from the linear magnitude of the measurement parameter.
        /// 
        /// Note:
        /// 
        /// The array must contain at least number of elements defined for the type of measured parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceStatisticalEvaluation(int Channel__Trace_, int Statistical_Parameter, bool Info_Field, double[] Response_Value_s_)
        {
            int pInvokeResult = PInvoke.TraceStatisticalEvaluation(this._handle, Channel__Trace_, Statistical_Parameter, System.Convert.ToUInt16(Info_Field), Response_Value_s_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Displays or hides range limit lines for the evaluation range.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:STATistics:DOMain:USER:SHOW
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Show_Range">
        /// Displays or hides range limit lines for the evaluation range.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceEvaluationRangeShow(int Channel__Trace_, bool Show_Range)
        {
            int pInvokeResult = PInvoke.SetTraceEvaluationRangeShow(this._handle, Channel__Trace_, System.Convert.ToUInt16(Show_Range));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries whether range limit lines for the evaluation range is displayed
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:STATistics:DOMain:USER:SHOW?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Show_Range">
        /// Returns whether range limit lines for the evaluation range is displayed.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceEvaluationRangeShow(int Channel__Trace_, out bool Show_Range)
        {
            ushort Show_RangeAsUShort;
            int pInvokeResult = PInvoke.GetTraceEvaluationRangeShow(this._handle, Channel__Trace_, out Show_RangeAsUShort);
            Show_Range = System.Convert.ToBoolean(Show_RangeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the compression value x for the x-dB compression point measurement.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:STATistics:NLINear:COMP:LEVel 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Compression_Value">
        /// Defines the compression value x for the x-dB compression point measurement.
        /// 
        /// Valid range: 0.01 dBm to 100.0 dBm
        /// 
        /// Default Value: 1.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceCompressionValue(int Channel__Trace_, double Compression_Value)
        {
            int pInvokeResult = PInvoke.SetTraceCompressionValue(this._handle, Channel__Trace_, Compression_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the compression value x for the x-dB compression point measurement.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:STATistics:NLINear:COMP:LEVel? 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Compression_Value">
        /// Returns the compression value x for the x-dB compression point measurement.
        /// 
        /// Valid range: 0.01 dBm to 100.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceCompressionValue(int Channel__Trace_, out double Compression_Value)
        {
            int pInvokeResult = PInvoke.GetTraceCompressionValue(this._handle, Channel__Trace_, out Compression_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the x-dB compression point of an S-parameter or ratio measured in a power sweep. The compression value x is set via rszvb_SetTraceCompressionValue (CALCulate&lt;Chn&gt;:STATistics:NLINear:COMP:LEVel).
        /// 
        /// Note(s):
        /// 
        /// (1) An execution error message (error no. -200) is returned if no compression point is found.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:STATistics:NLINear:COMP:RESult? 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Compression_Point_In">
        /// This control returns compression point in. It is the stimulus level at the compression point in units of dBm
        /// 
        /// Notes:
        /// 
        /// (1) The ratio Compression Point Out / Compression Point In is equal to the magnitude of the measured S-parameter or ratio at the compression point. 
        /// </param>
        /// <param name="Compression_Point_Out">
        /// This control returns compression point out. It is the magnitude of the wave reflected or transmitted by the DUT. If an S-parameter Sij is measured, then compression point out is the magnitude of the wave bi. 
        /// 
        /// Notes:
        /// 
        /// (1) The ratio Compression Point Out / Compression Point In is equal to the magnitude of the measured S-parameter or ratio at the compression point. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceCompressionPoint(int Channel__Trace_, out double Compression_Point_In, out double Compression_Point_Out)
        {
            int pInvokeResult = PInvoke.GetTraceCompressionPoint(this._handle, Channel__Trace_, out Compression_Point_In, out Compression_Point_Out);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays or hides the Phase Delay/El Length, Min/Max/Peak-Peak, Mean/Std Dev, RMS, Gain/Slope/Flatness or Compression Point results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:STATistics:EPDelay[:STATe] &lt;Boolean&gt;
        /// CALCulate&lt;Chn&gt;:STATistics:MMPTpeak[:STATe] &lt;Boolean&gt;
        /// CALCulate&lt;Chn&gt;:STATistics:MSTDdev[:STATe] &lt;Boolean&gt;
        /// CALCulate&lt;Chn&gt;:STATistics:RMS[:STATe] &lt;Boolean&gt;
        /// CALCulate&lt;Chn&gt;:STATistics:SFLatness[:STATe] &lt;Boolean&gt;
        /// CALCulate&lt;Chn&gt;:STATistics:NLINear:COMP[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Result_Type">
        /// This control selects the reuslt type.
        /// 
        /// Valid Values:
        /// RSZVB_DISPLAY_RESULTS_EPD   (0) - Phase Delay/El Length
        /// RSZVB_DISPLAY_RESULTS_MMPT  (1) - Min/Max/Peak-Peak
        /// RSZVB_DISPLAY_RESULTS_MSTD  (2) - Mean/Std Dev
        /// RSZVB_DISPLAY_RESULTS_RMS   (3) - RMS
        /// RSZVB_DISPLAY_RESULTS_SFL   (4) - Gain/Slope/Flatness
        /// RSZVB_DISPLAY_RESULTS_COMP  (5) - Compression Point
        /// 
        /// Default Value: RSZVB_DISPLAY_RESULTS_EPD   (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Phase Delay/El Length: Displays or hides the Phase Delay/El Length results in the diagram area of trace no. &lt;Chn&gt;. 
        /// 
        /// (2) Min/Max/Peak-Peak: Displays or hides the Min/Max/Peak-Peak results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// (3) Mean/Std Dev: Displays or hides the Mean/Std Dev results in the diagram area of trace no. &lt;Chn&gt;. 
        /// 
        /// (4) RMS: Displays or hides the RMS results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// (5) Gain/Slope/Flatness: Displays or hides the Gain/Slope/Flatness results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// (6) Compression Point: Displays or hides the compression point result in the diagram area of trace no. &lt;Chn&gt;.
        /// </param>
        /// <param name="Display_Results">
        /// This control displays or hides the Phase Delay/El Length, Min/Max/Peak-Peak, Mean/Std Dev, RMS, Gain/Slope/Flatness or Compression Point results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayResultsState(int Channel__Trace_, int Result_Type, bool Display_Results)
        {
            int pInvokeResult = PInvoke.SetDisplayResultsState(this._handle, Channel__Trace_, Result_Type, System.Convert.ToUInt16(Display_Results));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Phase Delay/El Length, Min/Max/Peak-Peak, Mean/Std Dev, RMS, Gain/Slope/Flatness or Compression Point results state.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:STATistics:EPDelay[:STATe]?
        /// CALCulate&lt;Chn&gt;:STATistics:MMPTpeak[:STATe]?
        /// CALCulate&lt;Chn&gt;:STATistics:MSTDdev[:STATe]?
        /// CALCulate&lt;Chn&gt;:STATistics:RMS[:STATe]?
        /// CALCulate&lt;Chn&gt;:STATistics:SFLatness[:STATe]?
        /// CALCulate&lt;Chn&gt;:STATistics:NLINear:COMP[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Result_Type">
        /// This control selects the reuslt type.
        /// 
        /// Valid Values:
        /// RSZVB_DISPLAY_RESULTS_EPD   (0) - Phase Delay/El Length
        /// RSZVB_DISPLAY_RESULTS_MMPT  (1) - Min/Max/Peak-Peak
        /// RSZVB_DISPLAY_RESULTS_MSTD  (2) - Mean/Std Dev
        /// RSZVB_DISPLAY_RESULTS_RMS   (3) - RMS
        /// RSZVB_DISPLAY_RESULTS_SFL   (4) - Gain/Slope/Flatness
        /// RSZVB_DISPLAY_RESULTS_COMP  (5) - Compression Point
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Phase Delay/El Length: Displays or hides the Phase Delay/El Length results in the diagram area of trace no. &lt;Chn&gt;. 
        /// 
        /// (2) Min/Max/Peak-Peak: Displays or hides the Min/Max/Peak-Peak results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// (3) Mean/Std Dev: Displays or hides the Mean/Std Dev results in the diagram area of trace no. &lt;Chn&gt;. 
        /// 
        /// (4) RMS: Displays or hides the RMS results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// (5) Gain/Slope/Flatness: Displays or hides the Gain/Slope/Flatness results in the diagram area of trace no. &lt;Chn&gt;.
        /// 
        /// (6) Compression Point: Displays or hides the compression point result in the diagram area of trace no. &lt;Chn&gt;.
        /// </param>
        /// <param name="Display_Results">
        /// This control returns the Phase Delay/El Length, Min/Max/Peak-Peak, Mean/Std Dev, RMS, Gain/Slope/Flatness or Compression Point results state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayResultsState(int Channel__Trace_, int Result_Type, out bool Display_Results)
        {
            ushort Display_ResultsAsUShort;
            int pInvokeResult = PInvoke.GetDisplayResultsState(this._handle, Channel__Trace_, Result_Type, out Display_ResultsAsUShort);
            Display_Results = System.Convert.ToBoolean(Display_ResultsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the smoothing function for the active trace, which may be a data or a memory trace. With active smoothing function, each measurement point is replaced by the arithmetic mean value of all measurement points located in a symmetric interval centered on the stimulus value. The width of the smoothing interval is referred to as the Smoothing Apertureand can be adjusted according to the properties of the trace. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:SMOothing[:STATe] &lt;Boolean&gt;
        /// CALCulate&lt;Ch/Tr&gt;:SMOothing:APERture &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Smoothing">
        /// Enables or disables smoothing for trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Aperture">
        /// Defines how many measurement points are averaged to smooth the trace.
        /// 
        /// Valid Range: 0.05 % to 100.0 %
        /// 
        /// Default Value: 1.0 %
        /// 
        /// Note:
        /// 
        /// A smoothing aperture of n % means that the smoothing interval for each sweep point i with stimulus value xi is equal to [xi - span*n/200, xi + span*n/200], and that the result of i is replaced by the arithmetic mean value of all measurement points in this interval.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceSmoothing(int Channel__Trace_, bool Smoothing, double Aperture)
        {
            int pInvokeResult = PInvoke.SetTraceSmoothing(this._handle, Channel__Trace_, System.Convert.ToUInt16(Smoothing), Aperture);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns state of the smoothing function parameters.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:SMOothing[:STATe]?
        /// CALCulate&lt;Ch/Tr&gt;:SMOothing:APERture?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Smoothing">
        /// Returns if smoothing for trace no. &lt;Ch/Tr&gt; is enabled or disabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <param name="Aperture">
        /// Returns how many measurement points are averaged to smooth the trace (in %).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceSmoothing(int Channel__Trace_, out bool Smoothing, out double Aperture)
        {
            ushort SmoothingAsUShort;
            int pInvokeResult = PInvoke.GetTraceSmoothing(this._handle, Channel__Trace_, out SmoothingAsUShort, out Aperture);
            Smoothing = System.Convert.ToBoolean(SmoothingAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the current response values of the active data trace or memory trace.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Ch/Tr&gt;:DATA? FDATa | SDATa | MDATa | TSData
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED      (0) - Unformatted
        /// RSZVB_FORMATTED        (1) - Formatted
        /// RSZVB_UNFORMATTED_MATH (2) - Unformatted With Trace Mathematics
        /// RSZVB_PULSE_PROFILE    (3) - Pulse Profile
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Notes:
        /// 
        /// (1) Unformatted:
        /// Real and imaginary part of each measurement point. 2 values per trace point irrespective of the selected trace format. The trace mathematics is not taken into account.
        ///  
        /// (2) Formatted:
        /// Formatted trace data, according to the selected trace format (CALCulate&lt;Ch/Tr&gt;:FORMat). 1 value per trace point for Cartesian diagrams, 2 values for polar diagrams. 
        /// 
        /// (3) Unformatted With Trace Mathematics:
        /// Unformatted trace data (see Unformated) after evaluation of the trace mathematics.
        /// 
        /// (4) Pulse Profile:
        /// Raw measured values in pulse profile mode, only available for wave quantities and if pulse profile mode is active. The 
        /// values correspond to the real output values of the A/D converter; acquired at a fixed sampling rate of 1/12.5 ns. The 
        /// number of values in the returned array is not correlated with the number of sweep points; it is equal to the Optimum 
        /// No of Points plus a few values at the beginning which the analyzer acquires during the settling time of the IF filter.
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the current response values of the active data trace or memory trace.
        /// 
        /// Notes:
        /// 
        /// (1) The data format is parameter-dependent. The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// (3) The total number of measured values depends also on selected data format.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseData(int Channel__Trace_, int Data_Format, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseData(this._handle, Channel__Trace_, Data_Format, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the current response values of the active data trace or memory trace.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Ch/Tr&gt;:DATA? SCORr1 | ... | SCORr27
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Error_Term">
        /// Denotes the error terms generated during a calibration.
        /// 
        /// Valid Values:
        /// 1 to 27
        /// 
        /// Default Value: 1
        /// 
        /// Notes:
        /// 
        /// (1) Error Term, Description, Receive Ports (S-parameter)
        ///  
        /// SCORr1, ... SCORr12, 2-port error terms; see [SENSe&lt;Ch&gt;:]CORRection:DATA, 1 and 2 (S11, S12, S21, S22)
        ///  
        /// SCORr13, Directivity, 3 (S33)
        ///  
        /// SCORr14, Source match, 3 (S33)
        ///  
        /// SCORr15, Reflection tracking, 3 (S33)
        ///  
        /// SCORr16, Isolation, 3 (S31)
        ///  
        /// SCORr17, Load match, 3 (S31)
        ///  
        /// SCORr18, Transmission tracking, 3 (S13)
        ///  
        /// SCORr19, Isolation, 1 (S13)
        ///  
        /// SCORr20, Load match, 1 (S13)
        ///  
        /// SCORr21, Transmission tracking, 1 (S13)
        ///  
        /// SCORr22, Isolation, 3 (S32)
        ///  
        /// SCORr23, Load match, 3 (S32)
        ///  
        /// SCORr24, Transmission tracking, 3 (S32)
        ///  
        /// SCORr25, Isolation, 2 (S23)
        ///  
        /// SCORr26, Load match, 2 (S23)
        ///  
        /// SCORR27, Transmission tracking, 2 (S23)
        ///  
        /// 
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the current response values of the active data trace or memory trace.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseDataError(int Channel__Trace_, int Error_Term, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseDataError(this._handle, Channel__Trace_, Error_Term, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the current response values of all traces of the current test setup.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Ch&gt;:DATA:ALL? FDATa | SDATa | MDATa
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED      (0) - Unformatted
        /// RSZVB_FORMATTED        (1) - Formatted
        /// RSZVB_UNFORMATTED_MATH (2) - Unformatted With Trace Mathematics
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Notes:
        /// 
        /// (1) Unformatted:
        /// Real and imaginary part of each measurement point. 2 values per trace point irrespective of the selected trace format. The trace mathematics is not taken into account.
        ///  
        /// (2) Formatted:
        /// Formatted trace data, according to the selected trace format (CALCulate&lt;Ch/Tr&gt;:FORMat). 1 value per trace point for Cartesian diagrams, 2 values for polar diagrams. 
        /// 
        /// (3) Unformatted With Trace Mathematics:
        /// Unformatted trace data (see Unformated) after evaluation of the trace mathematics.
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns the current response values of all traces of the current test setup. 
        /// 
        /// Notes:
        /// 
        /// (1) The data format is parameter-dependent. The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// (3) The total number of measured values depends also on selected data format.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseDataAll(int Channel__Trace_, int Data_Format, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseDataAll(this._handle, Channel__Trace_, Data_Format, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Reads the current response values of all data traces of the current test setup.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Chn&gt;:DATA:DALL? FDATa | SDATa | MDATa 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED      (0) - Unformatted
        /// RSZVB_FORMATTED        (1) - Formatted
        /// RSZVB_UNFORMATTED_MATH (2) - Unformatted With Trace Mathematics
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Notes:
        /// 
        /// (1) Unformatted:
        /// Real and imaginary part of each measurement point. 2 values per trace point irrespective of the selected trace format. The trace mathematics is not taken into account.
        ///  
        /// (2) Formatted:
        /// Formatted trace data, according to the selected trace format (CALCulate&lt;Ch/Tr&gt;:FORMat). 1 value per trace point for Cartesian diagrams, 2 values for polar diagrams. 
        /// 
        /// (3) Unformatted With Trace Mathematics:
        /// Unformatted trace data (see Unformated) after evaluation of the trace mathematics.
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns the current response values of all traces of the current test setup. 
        /// 
        /// Notes:
        /// 
        /// (1) The data format is parameter-dependent. The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// (3) The total number of measured values depends also on selected data format.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseDataAllData(int Channel__Trace_, int Data_Format, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseDataAllData(this._handle, Channel__Trace_, Data_Format, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the response values of a trace acquired in single sweep mode (INITiate&lt;Ch&gt;:CONTinuous OFF).
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Ch/Tr&gt;:DATA:NSWeep? SDATa,&lt;Trace_Hist_Count&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Number">
        /// Number of sweep to be read.
        /// 
        /// Valid Range: 1 to sweep count ([SENSe&lt;Ch&gt;:]SWEep:COUNt)
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the response values of a trace acquired in single sweep mode.
        /// 
        /// Notes:
        /// 
        /// (1) Read unformatted sweep data (fixed parameter): Returns the real and imaginary part of each measurement point (2 values per trace point irrespective of the selected trace format).
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseSingleSweepData(int Channel__Trace_, int Sweep_Number, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseSingleSweepData(this._handle, Channel__Trace_, Sweep_Number, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the number of completed sweeps in single sweep mode (INITiate&lt;Ch&gt;:CONTinuous OFF). The trace can be any of the traces acquired during the single sweep cycle. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:DATA:NSWeep:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Count">
        /// Returns the number of completed sweeps in single sweep mode. 
        /// 
        /// Valid Values:
        /// 1 to sweep count defined via [SENSe&lt;Ch&gt;:]SWEep:COUNt
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseSingleSweepDataCount(int Channel__Trace_, out int Sweep_Count)
        {
            int pInvokeResult = PInvoke.TraceResponseSingleSweepDataCount(this._handle, Channel__Trace_, out Sweep_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the response values of a trace acquired in single sweep mode (INITiate&lt;Ch&gt;:CONTinuous OFF).
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Ch/Tr&gt;:DATA:NSWeep:FIRSt? SDATa,&lt;Forward_Count&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Number">
        /// Number of sweep to be read. 1 denotes the first sweep acquired, 2 denotes the second and so forth. 
        /// 
        /// Valid Range: 1 to sweep count ([SENSe&lt;Ch&gt;:]SWEep:COUNt)
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the response values of a trace acquired in single sweep mode.
        /// 
        /// Notes:
        /// 
        /// (1) Read unformatted sweep data (fixed parameter): Returns the real and imaginary part of each measurement point (2 values per trace point irrespective of the selected trace format).
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseSingleSweepDataForward(int Channel__Trace_, int Sweep_Number, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseSingleSweepDataForward(this._handle, Channel__Trace_, Sweep_Number, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the stimulus values of the active data or memory trace.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Ch/Tr&gt;:DATA:STIMulus?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the current stimnulus values of the active data trace or memory trace.
        /// 
        /// Notes:
        /// 
        /// (1) The unit is the default unit of the sweep variable (Hz or dBm or s).
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceStimulusData(int Channel__Trace_, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceStimulusData(this._handle, Channel__Trace_, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes a memory trace data to the instrument.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:DATA SDATa, &lt;data&gt;
        /// FORMat ASCII
        /// FORMat REAL,32
        /// SYSTem:COMMunicate:GPIB:SELF:RTERminator EOI
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="No_of_Points">
        /// Sets the number of trace points to be written to the instrument.
        /// 
        /// Valid Range: 0 to 250000
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Trace data array.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code
        /// either indicates success or describes an error or warning
        /// condition. You examine the status code from each call to an
        /// instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the
        /// rsfsq_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        /// 
        /// BFFC0002  Parameter 2 (Destination Trace) out of range.
        /// BFFC0003  Parameter 3 (No of Points) out of range.
        /// BFFC0004  Parameter 4 (Trace Data) out of range.
        /// 
        /// BFFC09F0  Instrument status error
        /// BFFC09F1  Option not installed
        /// BFFC09F2  Conflict with setup parameters
        /// BFFC09F3  Data are not available
        /// BFFC09F4  Unknown option
        /// BFFC09F5  Calibration failed
        /// BFFC09F6  Function does not support FSEx parameter value
        /// BFFC09F7  Overload. Instrument does not return I/Q values
        /// 
        /// This instrument driver also returns errors and warnings defined
        /// by other sources. The following table defines the ranges of
        /// additional status codes that this driver can return. The table
        /// lists the different include files that contain the defined
        /// constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteMemoryTraceData(int Channel__Trace_, int No_of_Points, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.WriteMemoryTraceData(this._handle, Channel__Trace_, No_of_Points, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes a memory trace data to the instrument.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:DATA FDATa | SDATa | MDATa, &lt;data&gt;
        /// FORMat ASCII
        /// FORMat REAL,32
        /// SYSTem:COMMunicate:GPIB:SELF:RTERminator EOI
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED      (0) - Unformatted
        /// RSZVB_FORMATTED        (1) - Formatted
        /// RSZVB_UNFORMATTED_MATH (2) - Unformatted With Trace Mathematics
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Notes:
        /// 
        /// (1) Unformatted:
        /// Real and imaginary part of each measurement point. 2 values per trace point irrespective of the selected trace format. The trace mathematics is not taken into account.
        ///  
        /// (2) Formatted:
        /// Formatted trace data, according to the selected trace format (CALCulate&lt;Ch/Tr&gt;:FORMat). 1 value per trace point for Cartesian diagrams, 2 values for polar diagrams. 
        /// 
        /// (3) Unformatted With Trace Mathematics:
        /// Unformatted trace data (see Unformated) after evaluation of the trace mathematics.
        /// </param>
        /// <param name="No_of_Points">
        /// Sets the number of trace points to be written to the instrument.
        /// 
        /// Valid Range: 0 to 250000
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Trace data array.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code
        /// either indicates success or describes an error or warning
        /// condition. You examine the status code from each call to an
        /// instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the
        /// rsfsq_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        /// 
        /// BFFC0002  Parameter 2 (Destination Trace) out of range.
        /// BFFC0003  Parameter 3 (No of Points) out of range.
        /// BFFC0004  Parameter 4 (Trace Data) out of range.
        /// 
        /// BFFC09F0  Instrument status error
        /// BFFC09F1  Option not installed
        /// BFFC09F2  Conflict with setup parameters
        /// BFFC09F3  Data are not available
        /// BFFC09F4  Unknown option
        /// BFFC09F5  Calibration failed
        /// BFFC09F6  Function does not support FSEx parameter value
        /// BFFC09F7  Overload. Instrument does not return I/Q values
        /// 
        /// This instrument driver also returns errors and warnings defined
        /// by other sources. The following table defines the ranges of
        /// additional status codes that this driver can return. The table
        /// lists the different include files that contain the defined
        /// constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteMemoryTraceDataExt(int Channel__Trace_, int Data_Format, int No_of_Points, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.WriteMemoryTraceDataExt(this._handle, Channel__Trace_, Data_Format, No_of_Points, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the format for traces retrieved with the ZVR-compatible command TRACe[:DATA][:RESPonse][:ALL]? 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is ZVR compatible.
        /// 
        /// Remote-control command(s):
        /// FORMat:DEXPort:SOURce FDATa | SDATa | MDATa
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED      (0) - Unformatted
        /// RSZVB_FORMATTED        (1) - Formatted
        /// RSZVB_UNFORMATTED_MATH (2) - Unformatted With Trace Mathematics
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Notes:
        /// 
        /// (1) Unformatted:
        /// Real and imaginary part of each measurement point. 2 values per trace point irrespective of the selected trace format. The trace mathematics is not taken into account.
        ///  
        /// (2) Formatted:
        /// Formatted trace data, according to the selected trace format (CALCulate&lt;Ch/Tr&gt;:FORMat). 1 value per trace point for Cartesian diagrams, 2 values for polar diagrams. 
        /// 
        /// (3) Unformatted With Trace Mathematics:
        /// Unformatted trace data (see Unformated) after evaluation of the trace mathematics.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceFormatZVR(int Data_Format)
        {
            int pInvokeResult = PInvoke.SetTraceFormatZVR(this._handle, Data_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the format for traces retrieved with the ZVR-compatible command TRACe[:DATA][:RESPonse][:ALL]? 
        /// 
        /// Remote-control command(s):
        /// FORMat:DEXPort:SOURce?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Data_Format">
        /// Returns trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED      (0) - Unformatted
        /// RSZVB_FORMATTED        (1) - Formatted
        /// RSZVB_UNFORMATTED_MATH (2) - Unformatted With Trace Mathematics
        /// 
        /// Notes:
        /// 
        /// (1) Unformatted:
        /// Real and imaginary part of each measurement point. 2 values per trace point irrespective of the selected trace format. The trace mathematics is not taken into account.
        ///  
        /// (2) Formatted:
        /// Formatted trace data, according to the selected trace format (CALCulate&lt;Ch/Tr&gt;:FORMat). 1 value per trace point for Cartesian diagrams, 2 values for polar diagrams. 
        /// 
        /// (3) Unformatted With Trace Mathematics:
        /// Unformatted trace data (see Unformated) after evaluation of the trace mathematics.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceFormatZVR(out int Data_Format)
        {
            int pInvokeResult = PInvoke.GetTraceFormatZVR(this._handle, out Data_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the response values of the active data trace or memory trace.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is ZVR compatible.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// TRACe[:DATA][:RESPonse][:ALL]? CH1DATA | CH2DATA | CH3DATA | CH4DATA | CH1MEM | CH2MEM | CH3MEM | CH4MEM | MDATA1 | MDATA2 | MDATA3 | MDATA4 | MDATA5 | MDATA6 | MDATA7 | MDATA8 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_TRACE_ZVR_CH1DATA (0)  - Channel 1 Data
        /// RSZVB_TRACE_ZVR_CH2DATA (1)  - Channel 2 Data
        /// RSZVB_TRACE_ZVR_CH3DATA (2)  - Channel 3 Data
        /// RSZVB_TRACE_ZVR_CH4DATA (3)  - Channel 4 Data
        /// RSZVB_TRACE_ZVR_CH1MEM  (4)  - Channel 1 Memory
        /// RSZVB_TRACE_ZVR_CH2MEM  (5)  - Channel 2 Memory
        /// RSZVB_TRACE_ZVR_CH3MEM  (6)  - Channel 3 Memory
        /// RSZVB_TRACE_ZVR_CH4MEM  (7)  - Channel 4 Memory
        /// RSZVB_TRACE_ZVR_MDATA1  (8)  - Memory Trace 1
        /// RSZVB_TRACE_ZVR_MDATA2  (9)  - Memory Trace 2
        /// RSZVB_TRACE_ZVR_MDATA3  (10) - Memory Trace 3
        /// RSZVB_TRACE_ZVR_MDATA4  (11) - Memory Trace 4
        /// RSZVB_TRACE_ZVR_MDATA5  (12) - Memory Trace 5
        /// RSZVB_TRACE_ZVR_MDATA6  (13) - Memory Trace 6
        /// RSZVB_TRACE_ZVR_MDATA7  (14) - Memory Trace 7
        /// RSZVB_TRACE_ZVR_MDATA8  (15) - Memory Trace 8
        /// 
        /// 
        /// Default Value: RSZVB_TRACE_ZVR_CH1DATA (0)
        /// 
        /// Notes:
        /// 
        /// (1) Channel Data:
        /// Active data trace of channels 1 to 4
        ///  
        /// (2) Channel Memory:
        /// Active memory trace associated to the active data trace CH1DATA, CH2DATA, CH3DATA, CH4DATA, respectively
        /// 
        /// (3) Memory Trace:
        /// Memory trace named Mem&lt;n&gt;[Trc&lt;m&gt;]. The trace name is unique because &lt;n&gt; counts all data and memory traces in the active setup.
        /// </param>
        /// <param name="Values_To_Return">
        /// This control sets how much values should be returned.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 100
        /// 
        /// Note(s):
        /// 
        /// (1) Not used.
        /// </param>
        /// <param name="No_Of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the current response values of the active data trace or memory trace.
        /// 
        /// Notes:
        /// 
        /// (1) The data format is parameter-dependent. The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// (3) The total number of measured values depends also on selected data format.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseDataZVR(int Data_Format, int Values_To_Return, out int No_Of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseDataZVR(this._handle, Data_Format, Values_To_Return, out No_Of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stimulus values of the active data trace or memory trace.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is ZVR compatible.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// TRACe[:DATA]:STIMulus[:ALL]? CH1DATA | CH2DATA | CH3DATA | CH4DATA | CH1MEM | CH2MEM | CH3MEM | CH4MEM | MDATA1 | MDATA2 | MDATA3 | MDATA4 | MDATA5 | MDATA6 | MDATA7 | MDATA8 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_TRACE_ZVR_CH1DATA (0)  - Channel 1 Data
        /// RSZVB_TRACE_ZVR_CH2DATA (1)  - Channel 2 Data
        /// RSZVB_TRACE_ZVR_CH3DATA (2)  - Channel 3 Data
        /// RSZVB_TRACE_ZVR_CH4DATA (3)  - Channel 4 Data
        /// RSZVB_TRACE_ZVR_CH1MEM  (4)  - Channel 1 Memory
        /// RSZVB_TRACE_ZVR_CH2MEM  (5)  - Channel 2 Memory
        /// RSZVB_TRACE_ZVR_CH3MEM  (6)  - Channel 3 Memory
        /// RSZVB_TRACE_ZVR_CH4MEM  (7)  - Channel 4 Memory
        /// RSZVB_TRACE_ZVR_MDATA1  (8)  - Memory Trace 1
        /// RSZVB_TRACE_ZVR_MDATA2  (9)  - Memory Trace 2
        /// RSZVB_TRACE_ZVR_MDATA3  (10) - Memory Trace 3
        /// RSZVB_TRACE_ZVR_MDATA4  (11) - Memory Trace 4
        /// RSZVB_TRACE_ZVR_MDATA5  (12) - Memory Trace 5
        /// RSZVB_TRACE_ZVR_MDATA6  (13) - Memory Trace 6
        /// RSZVB_TRACE_ZVR_MDATA7  (14) - Memory Trace 7
        /// RSZVB_TRACE_ZVR_MDATA8  (15) - Memory Trace 8
        /// 
        /// 
        /// Default Value: RSZVB_TRACE_ZVR_CH1DATA (0)
        /// 
        /// Notes:
        /// 
        /// (1) Channel Data:
        /// Active data trace of channels 1 to 4
        ///  
        /// (2) Channel Memory:
        /// Active memory trace associated to the active data trace CH1DATA, CH2DATA, CH3DATA, CH4DATA, respectively
        /// 
        /// (3) Memory Trace:
        /// Memory trace named Mem&lt;n&gt;[Trc&lt;m&gt;]. The trace name is unique because &lt;n&gt; counts all data and memory traces in the active setup.
        /// </param>
        /// <param name="Values_To_Return">
        /// This control sets how much values should be returned.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 100
        /// 
        /// Note(s):
        /// 
        /// (1) Not used.
        /// </param>
        /// <param name="No_Of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the current response values of the active data trace or memory trace.
        /// 
        /// Notes:
        /// 
        /// (1) The data format is parameter-dependent. The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// (3) The total number of measured values depends also on selected data format.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceStimulusDataZVR(int Data_Format, int Values_To_Return, out int No_Of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceStimulusDataZVR(this._handle, Data_Format, Values_To_Return, out No_Of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the current response values of all S-parameters associated to a group of logical ports (S-parameter group). The S-parameter group must be created before using CALCulate&lt;Ch&gt;:PARameter:DEFine:SGRoup.
        /// 
        /// Remote-control command(s):
        /// FORMat[:DATA] REAL ,32
        /// CALCulate&lt;Ch&gt;:DATA:SGRoup? FDATa | SDATa | MDATa
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Data_Format">
        /// Selects trace data format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED      (0) - Unformatted
        /// RSZVB_FORMATTED        (1) - Formatted
        /// RSZVB_UNFORMATTED_MATH (2) - Unformatted With Trace Mathematics
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Notes:
        /// 
        /// (1) Unformatted:
        /// Real and imaginary part of each measurement point. 2 values per trace point irrespective of the selected trace format. The trace mathematics is not taken into account.
        ///  
        /// (2) Formatted:
        /// Formatted trace data, according to the selected trace format (CALCulate&lt;Ch/Tr&gt;:FORMat). 1 value per trace point for Cartesian diagrams, 2 values for polar diagrams. 
        /// 
        /// (3) Unformatted With Trace Mathematics:
        /// Unformatted trace data (see Unformated) after evaluation of the trace mathematics.
        /// </param>
        /// <param name="Values_To_Return">
        /// This control sets how much values should be returned.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 100
        /// 
        /// Note(s):
        /// 
        /// (1) Not used.
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns array of the current response values of all S-parameters associated to a group of logical ports (S-parameter group). 
        /// 
        /// Notes:
        /// 
        /// (1) The data format is parameter-dependent. The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// (2) The total number of measurement points per sweep (Number of Points) is defined via [SENSe&lt;Ch&gt;:]SWEep:POINts.
        /// 
        /// (3) The total number of measured values depends also on selected data format.
        /// 
        /// (4) The order of the returned S-parameters within the S-parameter group is fixed (for S-parameters 1 and 2: S11 trace, followed by the S12, S21, and S22) .
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceResponseDataSParameterGroup(int Channel__Trace_, int Data_Format, int Values_To_Return, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.TraceResponseDataSParameterGroup(this._handle, Channel__Trace_, Data_Format, Values_To_Return, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads trace data from a specified trace file and assigns it to a trace with a specified name.
        /// 
        /// Note(s):
        /// 
        /// Traces are created using the CALCulte&lt;Ch&gt;:PARameter:SDEFine... command.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:TRACe '&lt;trc_name&gt;','&lt;file_name&gt;'[,'&lt;parameter_name&gt;']
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing data trace in the active setup (string parameter). The trace data is loaded into a memory trace associated with the specified data trace. If one or more memory traces are already associated with the specified data trace, the last generated memory trace is overwritten.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the trace file to be loaded. Several file formats for trace files are supported. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.s1p"
        /// 
        /// Note:
        /// 
        /// Trace files are ASCII files with selectable file format:
        /// 
        /// - Touchstone (*.s&lt;n&gt;p) files
        /// - ASCII (*.csv) files
        /// - Mathlab (*.dat) files
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceImportData(string Trace_Name, string File_Name)
        {
            int pInvokeResult = PInvoke.TraceImportData(this._handle, Trace_Name, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the trace data of a specified trace to a trace file.
        /// 
        /// Note(s):
        /// 
        /// Traces are created using the CALCulte&lt;Ch&gt;:PARameter:SDEFine... command.
        /// 
        /// *.s&lt;n&gt;p touchstone files (&lt;n&gt; = 2, 3, 4) are intended for a complete set of &lt;n&gt;-port S-parameters. Data export fails if the active channel does not contain the full set of &lt;n&gt;^2 traces. If the necessary trace are available, '&lt;trc_name&gt;' can be the name of any of the traces.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:TRACe '&lt;trc_name&gt;','&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing data trace in the active setup (string parameter).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created trace file. Several file formats for trace files are supported. If no path is specified the analyzer uses the C:\Rohde&amp;Schwarz\NWA\Traces directory.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.s1p"
        /// 
        /// Note:
        /// 
        /// Trace files are ASCII files with selectable file format:
        /// 
        /// - Touchstone (*.s&lt;n&gt;p) files
        /// - ASCII (*.csv) files
        /// - Mathlab (*.dat) files
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceExportData(string Trace_Name, string File_Name)
        {
            int pInvokeResult = PInvoke.TraceExportData(this._handle, Trace_Name, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the trace data of a specified trace to a trace file.
        /// 
        /// Note(s):
        /// 
        /// Traces are created using the CALCulte&lt;Ch&gt;:PARameter:SDEFine... command.
        /// 
        /// *.s&lt;n&gt;p touchstone files (&lt;n&gt; = 2, 3, 4) are intended for a complete set of &lt;n&gt;-port S-parameters. Data export fails if the active channel does not contain the full set of &lt;n&gt;^2 traces. If the necessary trace are available, '&lt;trc_name&gt;' can be the name of any of the traces.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:TRACe '&lt;trc_name&gt;','&lt;file_name&gt;'[,UNFormatted | FORMatted, COMPlex | LINPhase | LOGPhase]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing data trace in the active setup (string parameter).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created trace file. Several file formats for trace files are supported. If no path is specified the analyzer uses the C:\Rohde&amp;Schwarz\NWA\Traces directory.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.s1p"
        /// 
        /// Note:
        /// 
        /// Trace files are ASCII files with selectable file format:
        /// 
        /// - Touchstone (*.s&lt;n&gt;p) files
        /// - ASCII (*.csv) files
        /// - Mathlab (*.dat) files
        /// 
        /// </param>
        /// <param name="Export_Format">
        /// This control selects the export format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED (0) - Unformatted
        /// RSZVB_FORMATTED   (1) - Formatted
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Note(s):
        /// 
        /// (1) UNFormatted - Unformatted data export specified by the Export Data parameter.
        /// (2) FORMatted - Formatted data export (for *.csv and *.dat files only).
        /// </param>
        /// <param name="Export_Data">
        /// This control selects the export data.
        /// 
        /// Valid Values:
        /// RSZVB_COMPLEX (0) - Complex Values
        /// RSZVB_LINP    (1) - Linear magnitude and phase
        /// RSZVB_LOGP    (2) - dB-magnitude and phase
        /// 
        /// Default Value: RSZVB_COMPLEX (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceExportDataWithOptions(string Trace_Name, string File_Name, int Export_Format, int Export_Data)
        {
            int pInvokeResult = PInvoke.TraceExportDataWithOptions(this._handle, Trace_Name, File_Name, Export_Format, Export_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the trace data of a specified trace to a trace file.
        /// 
        /// Note(s):
        /// 
        /// Traces are created using the CALCulte&lt;Ch&gt;:PARameter:SDEFine... command.
        /// 
        /// *.s&lt;n&gt;p touchstone files (&lt;n&gt; = 2, 3, 4) are intended for a complete set of &lt;n&gt;-port S-parameters. Data export fails if the active channel does not contain the full set of &lt;n&gt;^2 traces. If the necessary trace are available, '&lt;trc_name&gt;' can be the name of any of the traces.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:TRACe '&lt;trc_name&gt;','&lt;file_name&gt;'[,UNFormatted | FORMatted, COMPlex | LINPhase | LOGPhase, POINt | COMMa, SEMicolon | COMMa | TABulator | SPACe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing data trace in the active setup (string parameter).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created trace file. Several file formats for trace files are supported. If no path is specified the analyzer uses the C:\Rohde&amp;Schwarz\NWA\Traces directory.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.s1p"
        /// 
        /// Note:
        /// 
        /// Trace files are ASCII files with selectable file format:
        /// 
        /// - Touchstone (*.s&lt;n&gt;p) files
        /// - ASCII (*.csv) files
        /// - Mathlab (*.dat) files
        /// 
        /// </param>
        /// <param name="Export_Format">
        /// This control selects the export format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED (0) - Unformatted
        /// RSZVB_FORMATTED   (1) - Formatted
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Note(s):
        /// 
        /// (1) UNFormatted - Unformatted data export specified by the Export Data parameter.
        /// (2) FORMatted - Formatted data export (for *.csv and *.dat files only).
        /// </param>
        /// <param name="Export_Data">
        /// This control selects the export data.
        /// 
        /// Valid Values:
        /// RSZVB_COMPLEX (0) - Complex Values
        /// RSZVB_LINP    (1) - Linear magnitude and phase
        /// RSZVB_LOGP    (2) - dB-magnitude and phase
        /// 
        /// Default Value: RSZVB_COMPLEX (0)
        /// </param>
        /// <param name="Decimal_Separator">
        /// This control selects the decimal separator.
        /// 
        /// Valid Values:
        /// RSZVB_POIN (0) - Point
        /// RSZVB_COMM (1) - Comma
        /// 
        /// Default Value: RSZVB_POIN (0)
        /// </param>
        /// <param name="Field_Separator">
        /// This control selects the field separator.
        /// 
        /// Valid Values:
        /// RSZVB_SEM  (0) - Semicolon
        /// RSZVB_COMM (1) - Comma
        /// RSZVB_TAB  (2) - Tabulator
        /// RSZVB_SPAC (3) - Space
        /// 
        /// Default Value: RSZVB_SEM (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceExportDataWithOptionsExt(string Trace_Name, string File_Name, int Export_Format, int Export_Data, int Decimal_Separator, int Field_Separator)
        {
            int pInvokeResult = PInvoke.TraceExportDataWithOptionsExt(this._handle, Trace_Name, File_Name, Export_Format, Export_Data, Decimal_Separator, Field_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the trace data of all data traces in the specified channel to a trace file.
        /// 
        /// Note(s):
        /// 
        /// Traces are created using the CALCulte&lt;Ch&gt;:PARameter:SDEFine... command.
        /// 
        /// *.s&lt;n&gt;p Touchstone files (&lt;n&gt; = 1, 2, 3, ...) are intended for a complete set of &lt;n&gt;-port S-parameters. Data export fails if the active channel does not contain the full set of &lt;n&gt;^2 traces. 
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:TRACe:CHANnel &lt;ch_number&gt; | ALL,'&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Select_Channel">
        /// This control selects the channel in the active setup.
        /// 
        /// Valid Values:
        /// RSZVB_CHANNEL_TRACE_SINGLE (0) - Single
        /// RSZVB_CHANNEL_TRACE_ALL    (1) - All
        /// 
        /// Default Value: RSZVB_CHANNEL_TRACE_SINGLE (0)
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created trace file. Several file formats for trace files are supported. If no path is specified the analyzer uses the C:\Rohde&amp;Schwarz\NWA\Traces directory.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.s1p"
        /// 
        /// Note:
        /// 
        /// Trace files are ASCII files with selectable file format:
        /// 
        /// - Touchstone (*.s&lt;n&gt;p) files
        /// - ASCII (*.csv) files
        /// - Mathlab (*.dat) files
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelTraceExportData(int Select_Channel, int Channel__Trace_, string File_Name)
        {
            int pInvokeResult = PInvoke.ChannelTraceExportData(this._handle, Select_Channel, Channel__Trace_, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the trace data of all data traces in the specified channel to a trace file.
        /// 
        /// Note(s):
        /// 
        /// Traces are created using the CALCulte&lt;Ch&gt;:PARameter:SDEFine... command.
        /// 
        /// *.s&lt;n&gt;p Touchstone files (&lt;n&gt; = 1, 2, 3, ...) are intended for a complete set of &lt;n&gt;-port S-parameters. Data export fails if the active channel does not contain the full set of &lt;n&gt;^2 traces. 
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:TRACe:CHANnel &lt;ch_number&gt; | ALL,'&lt;file_name&gt;'[,UNFormatted | FORMatted, COMPlex | LINPhase | LOGPhase]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Select_Channel">
        /// This control selects the channel in the active setup.
        /// 
        /// Valid Values:
        /// RSZVB_CHANNEL_TRACE_SINGLE (0) - Single
        /// RSZVB_CHANNEL_TRACE_ALL    (1) - All
        /// 
        /// Default Value: RSZVB_CHANNEL_TRACE_SINGLE (0)
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created trace file. Several file formats for trace files are supported. If no path is specified the analyzer uses the C:\Rohde&amp;Schwarz\NWA\Traces directory.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.s1p"
        /// 
        /// Note:
        /// 
        /// Trace files are ASCII files with selectable file format:
        /// 
        /// - Touchstone (*.s&lt;n&gt;p) files
        /// - ASCII (*.csv) files
        /// - Mathlab (*.dat) files
        /// 
        /// </param>
        /// <param name="Export_Format">
        /// This control selects the export format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED (0) - Unformatted
        /// RSZVB_FORMATTED   (1) - Formatted
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Note(s):
        /// 
        /// (1) UNFormatted - Unformatted data export specified by the Export Data parameter.
        /// (2) FORMatted - Formatted data export (for *.csv and *.dat files only).
        /// </param>
        /// <param name="Export_Data">
        /// This control selects the export data.
        /// 
        /// Valid Values:
        /// RSZVB_COMPLEX (0) - Complex Values
        /// RSZVB_LINP    (1) - Linear magnitude and phase
        /// RSZVB_LOGP    (2) - dB-magnitude and phase
        /// 
        /// Default Value: RSZVB_COMPLEX (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelTraceExportDataWithOptions(int Select_Channel, int Channel__Trace_, string File_Name, int Export_Format, int Export_Data)
        {
            int pInvokeResult = PInvoke.ChannelTraceExportDataWithOptions(this._handle, Select_Channel, Channel__Trace_, File_Name, Export_Format, Export_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the trace data of all data traces in the specified channel to a trace file.
        /// 
        /// Note(s):
        /// 
        /// Traces are created using the CALCulte&lt;Ch&gt;:PARameter:SDEFine... command.
        /// 
        /// *.s&lt;n&gt;p Touchstone files (&lt;n&gt; = 1, 2, 3, ...) are intended for a complete set of &lt;n&gt;-port S-parameters. Data export fails if the active channel does not contain the full set of &lt;n&gt;^2 traces. 
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:TRACe:CHANnel &lt;ch_number&gt; | ALL,'&lt;file_name&gt;'[,UNFormatted | FORMatted, COMPlex | LINPhase | LOGPhase, POINt | COMMa, SEMicolon | COMMa | TABulator | SPACe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Select_Channel">
        /// This control selects the channel in the active setup.
        /// 
        /// Valid Values:
        /// RSZVB_CHANNEL_TRACE_SINGLE (0) - Single
        /// RSZVB_CHANNEL_TRACE_ALL    (1) - All
        /// 
        /// Default Value: RSZVB_CHANNEL_TRACE_SINGLE (0)
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created trace file. Several file formats for trace files are supported. If no path is specified the analyzer uses the C:\Rohde&amp;Schwarz\NWA\Traces directory.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.s1p"
        /// 
        /// Note:
        /// 
        /// Trace files are ASCII files with selectable file format:
        /// 
        /// - Touchstone (*.s&lt;n&gt;p) files
        /// - ASCII (*.csv) files
        /// - Mathlab (*.dat) files
        /// 
        /// </param>
        /// <param name="Export_Format">
        /// This control selects the export format.
        /// 
        /// Valid Values:
        /// RSZVB_UNFORMATTED (0) - Unformatted
        /// RSZVB_FORMATTED   (1) - Formatted
        /// 
        /// Default Value: RSZVB_UNFORMATTED (0)
        /// 
        /// Note(s):
        /// 
        /// (1) UNFormatted - Unformatted data export specified by the Export Data parameter.
        /// (2) FORMatted - Formatted data export (for *.csv and *.dat files only).
        /// </param>
        /// <param name="Export_Data">
        /// This control selects the export data.
        /// 
        /// Valid Values:
        /// RSZVB_COMPLEX (0) - Complex Values
        /// RSZVB_LINP    (1) - Linear magnitude and phase
        /// RSZVB_LOGP    (2) - dB-magnitude and phase
        /// 
        /// Default Value: RSZVB_COMPLEX (0)
        /// </param>
        /// <param name="Decimal_Separator">
        /// This control selects the decimal separator.
        /// 
        /// Valid Values:
        /// RSZVB_POIN (0) - Point
        /// RSZVB_COMM (1) - Comma
        /// 
        /// Default Value: RSZVB_POIN (0)
        /// </param>
        /// <param name="Field_Separator">
        /// This control selects the field separator.
        /// 
        /// Valid Values:
        /// RSZVB_SEM  (0) - Semicolon
        /// RSZVB_COMM (1) - Comma
        /// RSZVB_TAB  (2) - Tabulator
        /// RSZVB_SPAC (3) - Space
        /// 
        /// Default Value: RSZVB_SEM (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelTraceExportDataWithOptionsExt(int Select_Channel, int Channel__Trace_, string File_Name, int Export_Format, int Export_Data, int Decimal_Separator, int Field_Separator)
        {
            int pInvokeResult = PInvoke.ChannelTraceExportDataWithOptionsExt(this._handle, Select_Channel, Channel__Trace_, File_Name, Export_Format, Export_Data, Decimal_Separator, Field_Separator);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function shifts the active trace in horizontal direction, leaving the positions of all markers unchanged. The positive or negative offset value for the stimulus variable is entered into an input field. The unit depends on the sweep type.
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON).
        /// 
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:X:OFFSet &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Shift_Stimulus_Value">
        /// Stimulus offset value.
        /// 
        /// Valid Range: -1000.0e9 Hz to 1000.0e9 Hz (for frequency sweeps) 
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// The range and unit depends on the sweep type ([SENSe&lt;Ch&gt;:]SWEep:TYPE).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceShiftStimulusValue(int Window, int Window__Trace_, double Shift_Stimulus_Value)
        {
            int pInvokeResult = PInvoke.TraceShiftStimulusValue(this._handle, Window, Window__Trace_, Shift_Stimulus_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function modifies all points of the trace &lt;WndTr&gt; by means of an added and/or a multiplied complex constant. The response values M of the trace are transformed according to:
        /// 
        /// M_new = M_old * 10^(&lt;Magnitude&gt; / 20dB) * a * e^(j &lt;Phase&gt; / 180Deg) + &lt;Real&gt; + j &lt;Imaginary&gt;
        /// 
        /// Note(s):
        /// 
        /// (1) Window:
        /// Number of an existing diagram area (defined by means of DISPlay:WINDow&lt;Wnd&gt;:STATe ON).
        /// 
        /// (2) Window (Trace):
        /// Existing trace number, assigned by means of DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:Y:OFFSet &lt;Magnitude&gt;[,&lt;Phase&gt;, &lt;Real&gt;, &lt;Imaginary&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Magnitude">
        /// The magnitude factor shifts a dB Mag trace in vertical direction, leaving the phase of a complex parameter unchanged.
        /// 
        /// Valid Range: -300.0 dB to 300.0 dB
        ///  
        /// Default Value: 0.0 dB
        /// 
        /// </param>
        /// <param name="Phase">
        /// The phase factor rotates a trace that is displayed in a polar diagram around the origin, leaving the magnitude unchanged.
        /// 
        /// Valid Range: -3.4e38 deg to 3.4e38 deg 
        ///  
        /// Default Value: 0.0 deg
        /// 
        /// </param>
        /// <param name="Real">
        /// The real added constant shifts a real trace in vertical direction, leaving the imaginary part unchanged.
        /// 
        /// Valid Range: -3.4e38 to 3.4e38
        ///  
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <param name="Imaginary">
        /// The imaginary added constant shifts a imaginary trace in vertical direction, leaving the real part unchanged.
        /// 
        /// Valid Range: -3.4e38 to 3.4e38
        ///  
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceShiftResponseValue(int Window, int Window__Trace_, double Magnitude, double Phase, double Real, double Imaginary)
        {
            int pInvokeResult = PInvoke.TraceShiftResponseValue(this._handle, Window, Window__Trace_, Magnitude, Phase, Real, Imaginary);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables, disables, or restarts the max hold and the min hold functions 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:PHOLd MIN | MAX | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Hold">
        /// Enables, disables, or restarts the max hold and the min hold functions 
        /// 
        /// Valid Values:
        /// RSZVB_HOLD_OFF (0) - Off
        /// RSZVB_HOLD_MAX (1) - Max
        /// RSZVB_HOLD_MIN (2) - Min
        /// 
        /// Default Value: RSZVB_HOLD_MAX (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHold(int Channel, int Hold)
        {
            int pInvokeResult = PInvoke.SetHold(this._handle, Channel, Hold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the max hold and the min hold functions 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:PHOLd?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Hold">
        /// Returns the state of the max hold and the min hold functions.
        /// 
        /// Valid Values:
        /// RSZVB_HOLD_OFF (0) - Off
        /// RSZVB_HOLD_MAX (1) - Max
        /// RSZVB_HOLD_MIN (2) - Min
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHold(int Channel, out int Hold)
        {
            int pInvokeResult = PInvoke.GetHold(this._handle, Channel, out Hold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function is used for manual entry of the correction factors. 
        /// 
        /// Note(s):
        /// 
        /// (1) Electrical length is available if the active trace format is Phase or Unwrapped Phase, or if a mixer delay is measured.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:SLOPe
        /// CALCulate&lt;Chn&gt;:LDEViation:CONStant
        /// CALCulate&lt;Chn&gt;:LDEViation:ELENgth
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Slope">
        /// This control defines the slope of the regression line for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// -10.0e15 to +10.0e15 dB/MHz
        /// 
        /// Default Value: 0.0 dB/MHz
        /// </param>
        /// <param name="Constant">
        /// This control defines the constant value for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// -200 to + 200 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <param name="Electrical_Length">
        /// This control defines the electrical length for the linearity deviation calculation. This control is available if the active trace format is Phase or Unwrapped Phase, or if a mixer delay is measured.
        /// 
        /// Valid Values:
        /// 0 to 1000 m
        /// 
        /// Default Value: 0.0 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LinearityDeviationManual(int Channel, double Slope, double Constant, double Electrical_Length)
        {
            int pInvokeResult = PInvoke.LinearityDeviationManual(this._handle, Channel, Slope, Constant, Electrical_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a (re-)calculation of the linearity deviation correction factors and applies them to the active trace.  
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:AUTO ONCE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LinearityDeviationAuto(int Channel)
        {
            int pInvokeResult = PInvoke.LinearityDeviationAuto(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function applies /discards the correction factors or re-calculates them for each trace (Tracking).  
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:MODE ON | OFF | TRACking
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control applies /discards the correction factors or re-calculates them for each trace (Tracking).
        /// 
        /// Valid Values:
        /// RSZVB_LDEV_OFF  (0) - Off
        /// RSZVB_LDEV_ON   (1) - On
        /// RSZVB_LDEV_TRAC (2) - Tracking
        /// 
        /// Default Value: RSZVB_LDEV_TRAC (2)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLinearityDeviationState(int Channel, int State)
        {
            int pInvokeResult = PInvoke.SetLinearityDeviationState(this._handle, Channel, State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the linearity deviation.  
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the state of the linearity deviation.
        /// 
        /// Valid Values:
        /// RSZVB_LDEV_OFF  (0) - Off
        /// RSZVB_LDEV_ON   (1) - On
        /// RSZVB_LDEV_TRAC (2) - Tracking
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLinearityDeviationState(int Channel, out int State)
        {
            int pInvokeResult = PInvoke.GetLinearityDeviationState(this._handle, Channel, out State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the slope of the regression line for the linearity deviation calculation. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:SLOPe
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Slope">
        /// This control defines the slope of the regression line for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// -10.0e15 to +10.0e15 dB/MHz
        /// 
        /// Default Value: 0.0 dB/MHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLinearityDeviationSlope(int Channel, double Slope)
        {
            int pInvokeResult = PInvoke.SetLinearityDeviationSlope(this._handle, Channel, Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the slope of the regression line for the linearity deviation calculation. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:SLOPe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Slope">
        /// This control returns the slope of the regression line for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// -10.0e15 to +10.0e15 dB/MHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLinearityDeviationSlope(int Channel, out double Slope)
        {
            int pInvokeResult = PInvoke.GetLinearityDeviationSlope(this._handle, Channel, out Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the constant value for the linearity deviation calculation.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:CONStant
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Constant">
        /// This control defines the constant value for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// -200 to + 200 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLinearityDeviationConstant(int Channel, double Constant)
        {
            int pInvokeResult = PInvoke.SetLinearityDeviationConstant(this._handle, Channel, Constant);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the constant value for the linearity deviation calculation.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:CONStant?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Constant">
        /// This control returns the constant value for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// -200 to + 200 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLinearityDeviationConstant(int Channel, out double Constant)
        {
            int pInvokeResult = PInvoke.GetLinearityDeviationConstant(this._handle, Channel, out Constant);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the electrical length for the linearity deviation calculation.
        /// 
        /// Note(s):
        /// 
        /// (1) Electrical length is available if the active trace format is Phase or Unwrapped Phase, or if a mixer delay is measured.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:ELENgth
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Electrical_Length">
        /// This control defines the electrical length for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// 0 to 1000 m
        /// 
        /// Default Value: 0.0 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLinearityDeviationElectricalLength(int Channel, double Electrical_Length)
        {
            int pInvokeResult = PInvoke.SetLinearityDeviationElectricalLength(this._handle, Channel, Electrical_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the electrical length for the linearity deviation calculation.
        /// 
        /// Note(s):
        /// 
        /// (1) Electrical length is available if the active trace format is Phase or Unwrapped Phase, or if a mixer delay is measured.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LDEViation:ELENgth?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Electrical_Length">
        /// This control returns the electrical length for the linearity deviation calculation.
        /// 
        /// Valid Values:
        /// 0 to 1000 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLinearityDeviationElectricalLength(int Channel, out double Electrical_Length)
        {
            int pInvokeResult = PInvoke.GetLinearityDeviationElectricalLength(this._handle, Channel, out Electrical_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates the marker numbered &lt;Mk&gt; and assigns it to trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_State">
        /// Creates or removes the marker.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerState(int Channel__Trace_, int Marker, bool Marker_State)
        {
            int pInvokeResult = PInvoke.SetMarkerState(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Marker_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the marker numbered &lt;Mk&gt; is assigned to trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_State">
        /// Returns state of the selected marker.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerState(int Channel__Trace_, int Marker, out bool Marker_State)
        {
            ushort Marker_StateAsUShort;
            int pInvokeResult = PInvoke.GetMarkerState(this._handle, Channel__Trace_, Marker, out Marker_StateAsUShort);
            Marker_State = System.Convert.ToBoolean(Marker_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stimulus (in Cartesian diagrams: x-axis) value of the marker no. &lt;Mk&gt;, which can (but doesn't have to) be created using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:X &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Stimulus">
        /// Stimulus value of marker no. &lt;Mk&gt;.
        /// 
        /// Valid Range:
        ///  - frequency sweep: -9.9E+11 Hz to +9.9E+11 Hz
        ///  - power sweep: -999.0 dBm to +999.0 dBm
        ///  - time and CW mode sweep: 0.0 s to 127500.0 s
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerStimulus(int Channel__Trace_, int Marker, double Marker_Stimulus)
        {
            int pInvokeResult = PInvoke.SetMarkerStimulus(this._handle, Channel__Trace_, Marker, Marker_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stimulus (in Cartesian diagrams: x-axis) value of the marker no. &lt;Mk&gt;, which can (but doesn't have to) be created using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:X?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Stimulus">
        /// Stimulus value of marker no. &lt;Mk&gt;. Where unit is:
        /// 
        ///  - frequency sweep: Hz
        ///  - power sweep: dBm
        ///  - time and CW mode sweep: s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerStimulus(int Channel__Trace_, int Marker, out double Marker_Stimulus)
        {
            int pInvokeResult = PInvoke.GetMarkerStimulus(this._handle, Channel__Trace_, Marker, out Marker_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the response (in Cartesian diagrams: y-axis) value of marker no. &lt;Mk&gt;. The marker must be created before using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:Y?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Response">
        /// Response value(s) of marker no. &lt;Mk&gt;. Unit is depending on the marker format; see CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FORMat.
        /// 
        /// Note:
        /// 
        /// Assume that the marker result given by the complex quantity z = x + jy comprise from two values.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerResponse(int Channel__Trace_, int Marker, double[] Marker_Response)
        {
            int pInvokeResult = PInvoke.GetMarkerResponse(this._handle, Channel__Trace_, Marker, Marker_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates the reference marker and assigns it to trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Marker_State">
        /// Creates or removes the reference marker.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReferenceMarkerState(int Channel__Trace_, int Marker, bool Reference_Marker_State)
        {
            int pInvokeResult = PInvoke.SetReferenceMarkerState(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Reference_Marker_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the reference marker numbered &lt;Mk&gt; is assigned to trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Marker_State">
        /// Returns state of the selected reference marker.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceMarkerState(int Channel__Trace_, int Marker, out bool Reference_Marker_State)
        {
            ushort Reference_Marker_StateAsUShort;
            int pInvokeResult = PInvoke.GetReferenceMarkerState(this._handle, Channel__Trace_, Marker, out Reference_Marker_StateAsUShort);
            Reference_Marker_State = System.Convert.ToBoolean(Reference_Marker_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stimulus (in Cartesian diagrams: x-axis) value of the reference marker, which can (but doesn't have to) be displayed using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence:X &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Marker_Stimulus">
        /// Stimulus value of reference marker no. &lt;Mk&gt;.
        /// 
        /// Valid Range:
        ///  - frequency sweep: -9.9E+11 Hz to +9.9E+11 Hz
        ///  - power sweep: -999.0 dBm to +999.0 dBm
        ///  - time and CW mode sweep: 0.0 s to 127500.0 s
        /// 
        /// Default Value: 0.0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReferenceMarkerStimulus(int Channel__Trace_, int Marker, double Reference_Marker_Stimulus)
        {
            int pInvokeResult = PInvoke.SetReferenceMarkerStimulus(this._handle, Channel__Trace_, Marker, Reference_Marker_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stimulus (in Cartesian diagrams: x-axis) value of the reference marker, which can (but doesn't have to) be displayed using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence:X?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Marker_Stimulus">
        /// Stimulus value of reference marker no. &lt;Mk&gt;. Where unit is:
        /// 
        ///  - frequency sweep: Hz
        ///  - power sweep: dBm
        ///  - time and CW mode sweep: s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceMarkerStimulus(int Channel__Trace_, int Marker, out double Reference_Marker_Stimulus)
        {
            int pInvokeResult = PInvoke.GetReferenceMarkerStimulus(this._handle, Channel__Trace_, Marker, out Reference_Marker_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the response (in Cartesian diagrams: y-axis) value of the reference marker. The reference marker must be created before using  CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:REFerence:Y?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Marker_Response">
        /// Response value of reference marker no. &lt;Mk&gt;. Where unit is:
        /// 
        ///  - unit depending on the marker format
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceMarkerResponse(int Channel__Trace_, int Marker, out double Reference_Marker_Response)
        {
            int pInvokeResult = PInvoke.GetReferenceMarkerResponse(this._handle, Channel__Trace_, Marker, out Reference_Marker_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Sets the reference marker to continuous or discrete mode. The marker doesn't have to be created before (CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:REFerence[:STATe] ON), the mode can be assigned in advance. 
        /// 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:REFerence:MODE CONTinuous | DISCrete 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number
        /// 
        /// Valid Range:
        ///  1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mode">
        /// Sets marker no. &lt;Mk&gt; to continuous or discrete mode.
        /// 
        /// Valid Values:
        /// RSZVB_CONTINUOUS (0) - Continuous
        /// RSZVB_DISCRETE   (1) - Discrete
        /// 
        /// Default Value: RSZVB_CONTINUOUS (0)
        /// 
        /// Notes:
        /// 
        /// (1) Continuous:
        /// Marker can be positioned on any point of the trace, and its response values are obtained by interpolation.
        /// 
        /// (2) Discrete:
        /// Marker can be set to discrete sweep points only.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReferenceDiscreteMarker(int Channel__Trace_, int Marker, int Mode)
        {
            int pInvokeResult = PInvoke.SetReferenceDiscreteMarker(this._handle, Channel__Trace_, Marker, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Gets the reference marker mode.
        /// 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:REFerence:MODE?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number
        /// 
        /// Valid Range:
        ///  1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mode">
        /// Gets the reference marker mode.
        /// 
        /// Valid Values:
        /// RSZVB_CONTINUOUS (0) - Continuous
        /// RSZVB_DISCRETE   (1) - Discrete
        /// 
        /// Notes:
        /// 
        /// (1) Continuous:
        /// Marker can be positioned on any point of the trace, and its response values are obtained by interpolation.
        /// 
        /// (2) Discrete:
        /// Marker can be set to discrete sweep points only.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceDiscreteMarker(int Channel__Trace_, int Marker, out int Mode)
        {
            int pInvokeResult = PInvoke.GetReferenceDiscreteMarker(this._handle, Channel__Trace_, Marker, out Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Sets the reference to normal or fixed mode. The marker must be created before using CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:REFerence[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:REFerence:TYPE NORMal | FIXed 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number
        /// 
        /// Valid Range:
        ///  1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// Sets marker no. &lt;Mk&gt; to normal or fixed mode.
        /// 
        /// Valid Values:
        /// RSZVB_NORMAL (0) - Normal
        /// RSZVB_FIXED  (1) - Fixed
        /// 
        /// Default Value: RSZVB_NORMAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// Response value changes according to the measurement result.
        /// 
        /// (2) Fixed:
        /// Marker keeps its current response value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReferenceFixedMarker(int Channel__Trace_, int Marker, int Type)
        {
            int pInvokeResult = PInvoke.SetReferenceFixedMarker(this._handle, Channel__Trace_, Marker, Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Gets the reference marker type.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:REFerence:TYPE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number
        /// 
        /// Valid Range:
        ///  1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// Sets marker no. &lt;Mk&gt; to normal or fixed mode.
        /// 
        /// Valid Values:
        /// RSZVB_NORMAL (0) - Normal
        /// RSZVB_FIXED  (1) - Fixed
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// Response value changes according to the measurement result.
        /// 
        /// (2) Fixed:
        /// Marker keeps its current response value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceFixedMarker(int Channel__Trace_, int Marker, out int Type)
        {
            int pInvokeResult = PInvoke.GetReferenceFixedMarker(this._handle, Channel__Trace_, Marker, out Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the delta mode for marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt; on or off. The marker must be created before using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON. If the active trace contains no reference marker, the command also creates a reference marker.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:DELTa[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delta_Marker_State">
        /// Enables or disables the delta mode.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDeltaMarkerState(int Channel__Trace_, int Marker, bool Delta_Marker_State)
        {
            int pInvokeResult = PInvoke.SetDeltaMarkerState(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Delta_Marker_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the delta mode for marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt; is on or off.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:DELTa[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delta_Marker_State">
        /// Returns if the delta mode for marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt; is on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDeltaMarkerState(int Channel__Trace_, int Marker, out bool Delta_Marker_State)
        {
            ushort Delta_Marker_StateAsUShort;
            int pInvokeResult = PInvoke.GetDeltaMarkerState(this._handle, Channel__Trace_, Marker, out Delta_Marker_StateAsUShort);
            Delta_Marker_State = System.Convert.ToBoolean(Delta_Marker_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function couples the markers of all traces in the active setup to the markers of trace no. &lt;Ch/Tr&gt;, provided that they have the same sweep type (SENSe&lt;Ch/Tr&gt;:FUNCtion).
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:COUPled[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Coupled">
        /// Enables or disables marker coupling.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCoupledMarkers(int Channel__Trace_, int Marker, bool Marker_Coupled)
        {
            int pInvokeResult = PInvoke.SetCoupledMarkers(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Marker_Coupled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the markers of all traces in the active setup are coupled to the markers of trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:COUPled[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Coupled">
        /// Returns whether marker coupling is enabled or disabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCoupledMarkers(int Channel__Trace_, int Marker, out bool Marker_Coupled)
        {
            ushort Marker_CoupledAsUShort;
            int pInvokeResult = PInvoke.GetCoupledMarkers(this._handle, Channel__Trace_, Marker, out Marker_CoupledAsUShort);
            Marker_Coupled = System.Convert.ToBoolean(Marker_CoupledAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets marker no. &lt;Mk&gt; to continuous or discrete mode. The marker doesn't have to be created before (CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON), the mode can be assigned in advance.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:MODE CONTinuous | DISCrete
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Discrete_Mode">
        /// Sets marker no. &lt;Mk&gt; to continuous or discrete mode.
        /// 
        /// Valid Values:
        /// RSZVB_CONTINUOUS (0) - Continuous
        /// RSZVB_DISCRETE   (1) - Discrete
        /// 
        /// Default Value: RSZVB_CONTINUOUS (0)
        /// 
        /// Notes:
        /// 
        /// (1) Continuous:
        /// Marker can be positioned on any point of the trace, and its response values are obtained by interpolation.
        /// 
        /// (2) Discrete:
        /// Marker can be set to discrete sweep points only.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDiscreteMarker(int Channel__Trace_, int Marker, int Discrete_Mode)
        {
            int pInvokeResult = PInvoke.SetDiscreteMarker(this._handle, Channel__Trace_, Marker, Discrete_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if marker no. &lt;Mk&gt; is set to continuous or discrete mode.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Discrete_Mode">
        /// Returns if marker no. &lt;Mk&gt; is set to continuous or discrete mode.
        /// 
        /// Valid Values:
        /// RSZVB_CONTINUOUS (0) - Continuous
        /// RSZVB_DISCRETE   (1) - Discrete
        /// 
        /// Notes:
        /// 
        /// (1) Continuous:
        /// Marker can be positioned on any point of the trace, and its response values are obtained by interpolation.
        /// 
        /// (2) Discrete:
        /// Marker can be set to discrete sweep points only.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDiscreteMarker(int Channel__Trace_, int Marker, out int Discrete_Mode)
        {
            int pInvokeResult = PInvoke.GetDiscreteMarker(this._handle, Channel__Trace_, Marker, out Discrete_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets marker no. &lt;Mk&gt; to normal or fixed mode. The marker must be created before using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:TYPE NORMal | FIXed
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Marker">
        /// Sets marker no. &lt;Mk&gt; to normal or fixed mode.
        /// 
        /// Valid Values:
        /// RSZVB_NORMAL (0) - Normal
        /// RSZVB_FIXED  (1) - Fixed
        /// 
        /// Default Value: RSZVB_NORMAL (0)
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// Response value changes according to the measurement result.
        /// 
        /// (2) Fixed:
        /// Marker keeps its current response value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFixedMarker(int Channel__Trace_, int Marker, int Fixed_Marker)
        {
            int pInvokeResult = PInvoke.SetFixedMarker(this._handle, Channel__Trace_, Marker, Fixed_Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if marker no. &lt;Mk&gt; is set to normal or fixed mode.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:TYPE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Marker">
        /// Returns if marker no. &lt;Mk&gt; is set to normal or fixed mode.
        /// 
        /// Valid Values:
        /// RSZVB_NORMAL (0) - Normal
        /// RSZVB_FIXED  (1) - Fixed
        /// 
        /// Notes:
        /// 
        /// (1) Normal:
        /// Response value changes according to the measurement result.
        /// 
        /// (2) Fixed:
        /// Marker keeps its current response value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFixedMarker(int Channel__Trace_, int Marker, out int Fixed_Marker)
        {
            int pInvokeResult = PInvoke.GetFixedMarker(this._handle, Channel__Trace_, Marker, out Fixed_Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the output format for the (complex) value of marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Note(s):
        /// 
        /// The formats of the markers assigned to a trace are independent of each other and of the trace format settings; see CALCulate&lt;Ch/Tr&gt;:FORMat.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FORMat MLINear | MLOGarithmic | PHASe | POLar | COMPlex | GDELay | REAL | IMAGinary | SWR | LINPhase | LOGPhase | IMPedance | ADMittance | MDB | MLPHas | MDPHase
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Format">
        /// The formats of the markers assigned to a trace are independent of each other and of the trace format settings.
        /// 
        /// Valid Values:
        /// RSZVB_DB_MAG        (0) - dB Mag
        /// RSZVB_LIN_MAG       (6) - Lin Mag
        /// RSZVB_PHASE         (1) - Phase
        /// RSZVB_REAL          (7) - Real
        /// RSZVB_IMAG          (8) - Imag
        /// RSZVB_SWR           (5) - SWR
        /// RSZVB_DELAY         (4) - Delay
        /// RSZVB_DB_MAG_PHASE  (11) - dB Mag and Phase
        /// RSZVB_LIN_MAG_PHASE (12) - Lin Mag and Phase
        /// RSZVB_REAL_IMAG     (13) - Real and Imag
        /// RSZVB_DEFAULT       (14) - Default (Trace)
        /// RSZVB_R_JX          (15) - R + j X
        /// RSZVB_G_JB          (16) - G + j B
        /// 
        /// Default Value: RSZVB_DB_MAG (0)
        /// 
        /// Notes:
        /// 
        /// (1) dB Mag:
        /// Magnitude of z in dB.
        /// 
        /// (2) Lin Mag:
        /// Magnitude of z, unconverted.
        /// 
        /// (3) Phase:
        /// Phase of z.
        /// 
        /// (4) Real:
        /// Real part of z.
        /// 
        /// (5) Imag:
        /// Imaginary part of z.
        /// 
        /// (6) SWR:
        /// (Voltage) Standing Wave Ratio.
        /// 
        /// (7) Delay:
        /// Group delay, neg. derivative of the phase response.
        /// 
        /// (8) dB Mag and Phase:
        /// Magnitude of z in dB and phase in two lines.
        /// 
        /// (9) Lin Mag and Phase:
        /// Magnitude of z (unconverted) and phase in two lines.
        /// 
        /// (10) Real and Imag:
        /// Real and imaginary part of z in two lines.
        /// 
        /// (11) Default (Trace):
        /// Marker format identical with trace format.
        /// 
        /// (12) R + j X:
        /// Unnormalized resistance and reactance; L or C in three lines (Smith diagram).
        /// 
        /// (13) G + j B:
        /// Unnormalized conductance and susceptance; L or C in three lines (Inverted Smith diagram).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerFormat(int Channel__Trace_, int Marker, int Marker_Format)
        {
            int pInvokeResult = PInvoke.SetMarkerFormat(this._handle, Channel__Trace_, Marker, Marker_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the output format of the (complex) value of marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FORMat?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Format">
        /// The formats of the markers assigned to a trace are independent of each other and of the trace format settings.
        /// 
        /// Valid Values:
        /// RSZVB_DB_MAG        (0) - dB Mag
        /// RSZVB_LIN_MAG       (6) - Lin Mag
        /// RSZVB_PHASE         (1) - Phase
        /// RSZVB_REAL          (7) - Real
        /// RSZVB_IMAG          (8) - Imag
        /// RSZVB_SWR           (5) - SWR
        /// RSZVB_DELAY         (4) - Delay
        /// RSZVB_DB_MAG_PHASE  (11) - dB Mag and Phase
        /// RSZVB_LIN_MAG_PHASE (12) - Lin Mag and Phase
        /// RSZVB_REAL_IMAG     (13) - Real and Imag
        /// RSZVB_DEFAULT       (14) - Default (Trace)
        /// RSZVB_R_JX          (15) - R + j X
        /// RSZVB_G_JB          (16) - G + j B
        /// 
        /// Notes:
        /// 
        /// (1) dB Mag:
        /// Magnitude of z in dB.
        /// 
        /// (2) Lin Mag:
        /// Magnitude of z, unconverted.
        /// 
        /// (3) Phase:
        /// Phase of z.
        /// 
        /// (4) Real:
        /// Real part of z.
        /// 
        /// (5) Imag:
        /// Imaginary part of z.
        /// 
        /// (6) SWR:
        /// (Voltage) Standing Wave Ratio.
        /// 
        /// (7) Delay:
        /// Group delay, neg. derivative of the phase response.
        /// 
        /// (8) dB Mag and Phase:
        /// Magnitude of z in dB and phase in two lines.
        /// 
        /// (9) Lin Mag and Phase:
        /// Magnitude of z (unconverted) and phase in two lines.
        /// 
        /// (10) Real and Imag:
        /// Real and imaginary part of z in two lines.
        /// 
        /// (11) Default (Trace):
        /// Marker format identical with trace format.
        /// 
        /// (12) R + j X:
        /// Unnormalized resistance and reactance; L or C in three lines (Smith diagram).
        /// 
        /// (13) G + j B:
        /// Unnormalized conductance and susceptance; L or C in three lines (Inverted Smith diagram).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerFormat(int Channel__Trace_, int Marker, out int Marker_Format)
        {
            int pInvokeResult = PInvoke.GetMarkerFormat(this._handle, Channel__Trace_, Marker, out Marker_Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function removes all markers from all traces of the active setup. The removed markers remember their properties (stimulus value, format, delta mode, number) when they are restored (CALC&lt;Ch/Tr&gt;:MARK&lt;Mk&gt; ON). The marker properties are definitely lost if the associated trace is deleted.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:AOFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAllMarkersOff(int Channel__Trace_)
        {
            int pInvokeResult = PInvoke.SetAllMarkersOff(this._handle, Channel__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves the values of all markers to a ASCII file. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:MARKer '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the created ASCII file. The default extension (manual control) for marker files is *.txt, although other extensions are allowed. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveAllMarkers(string File_Name)
        {
            int pInvokeResult = PInvoke.SaveAllMarkers(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function search with the active marker for specific points on the trace.
        /// 
        /// Note(s):
        /// 
        /// The marker must be created before using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute MAXimum | MINimum | NPEak | RPEak | LPEak
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Search">
        /// Sets the active marker to specific points on the trace.  
        /// 
        /// Valid Values:
        /// RSZVB_MARKER_MAX   (0) - Max Search
        /// RSZVB_MARKER_MIN   (1) - Min Search
        /// RSZVB_MARKER_NEXT  (2) - Next Peak
        /// RSZVB_MARKER_RPEAK (3) - Peak Search &gt;
        /// RSZVB_MARKER_LPEAK  (4) - &lt; Peak Search
        /// 
        /// Default Value: RSZVB_MARKER_MAX (0)
        /// 
        /// Notes:
        /// 
        /// (1) Max Search:
        /// Sets the active marker to the absolute maximum in the search range, i.e. to the largest of all response values. If a complex trace format (e.g. a polar diagram) is active, the marker is set to the measurement point with the maximum magnitude.
        /// 
        /// (2) Min Search:
        /// Sets the active marker to the absolute minimum in the search range, i.e. to the smallest of all response values. If a complex trace format (e.g. a polar diagram) is active, the marker is set to the measurement point with the minimum magnitude.
        /// 
        /// (3) Next Peak:
        /// Sets the active marker to the next maximum or minimum in the search range, depending on the current search criterion.
        /// 
        /// - If a Max Search or a Bandpass Search is active, then the marker is set to the next maximum. The next maximum is the maximum with the largest response value that is below the current marker response value.
        /// 
        /// - If a Min Search or a Bandstop Search is active, then the marker is set to the next minimum. The next minimum is the minimum with the smallest response value that is above the current marker response value.
        /// 
        /// (4) Peak Search &gt;:
        /// Sets the active marker to the next peak with higher stimulus value.
        /// 
        /// (5) &lt; Peak Search:
        /// Sets the active marker to the next peak with lower stimulus value.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerSearch(int Channel__Trace_, int Marker, int Search)
        {
            int pInvokeResult = PInvoke.MarkerSearch(this._handle, Channel__Trace_, Marker, Search);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function search with the active marker for target value on the trace.
        /// 
        /// Note(s):
        /// 
        /// The marker must be created before using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;[:STATe] ON.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute TARGet | RTARget | LTARget
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Search">
        /// Sets the active marker to specific points on the trace.  
        /// 
        /// Valid Values:
        /// RSZVB_MARKER_TARGET  (0) - Target Search
        /// RSZVB_MARKER_RTARGET (1) - Target Search &gt;
        /// RSZVB_MARKER_LTARGET (2) - &lt; Target Search
        /// 
        /// Default Value: RSZVB_MARKER_TARGET (0)
        /// 
        /// Notes:
        /// 
        /// (1) Target Search:
        /// Activates the search and sets the active marker to the defined target value. If the active trace contains no markers, a marker Mkr 1 is created to indicate the search result. 
        /// 
        /// If the target value occurs at several stimulus values, the marker is placed to the search result with the smallest stimulus value. The other measurement points with the same target value can be located using the Target Search &gt;function. 
        /// 
        /// If the target is not found (e.g. because the active trace doesn't contain the target value), then the active marker is not moved away from its original position.
        /// 
        /// (2) Target Search &gt;:
        /// Activates the search to the right of the active marker position and sets the active marker to the defined target value. The target search range is between the active marker position and the end (Stop) of the sweep range. If the active trace contains no markers, a marker Mkr 1 is created to indicate the search result, and the target search range starts at the beginning (Start) of the sweep range. 
        /// 
        /// If the target value occurs at several stimulus values, the marker is placed to the search result with the smallest stimulus value. The other measurement points with the same target value can be located using Target Search &gt; repeatedly. 
        /// 
        /// If the target is not found (e.g. because the active trace doesn't contain the target value), then the active marker is not moved away from its original position. 
        /// 
        /// (3) &lt; Target Search:
        /// Activates the search to the left of the active marker position and sets the active marker to the defined target value. The target search range is between the (Start) of the sweep range and the active marker position. If the active trace contains no markers, a marker Mkr 1 is created to indicate the search result, and the target search range starts at the end (Stop) of the sweep range. 
        /// 
        /// If the target value occurs at several stimulus values, the marker is placed to the search result with the smallest stimulus value. The other measurement points with the same target value can be located using Target Search &gt; repeatedly. 
        /// 
        /// If the target is not found (e.g. because the active trace doesn't contain the target value), then the active marker is not moved away from its original position.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerTargetSearch(int Channel__Trace_, int Marker, int Search)
        {
            int pInvokeResult = PInvoke.MarkerTargetSearch(this._handle, Channel__Trace_, Marker, Search);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the target value for the target search of marker no. &lt;Mk&gt;, which can be activated using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUCTion:EXECute TARGet.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:TARGet &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Target_Value">
        /// Defines the target value for the target search.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Valid range depends on the format of the active trace (CALCulate&lt;Ch-&gt;Tr&gt;:FORMat). For a dB Mag trace the range is -300 dB to +200 dB, the increment (UP. DOWN) is 0.1 dB. [dB, deg etc., depending on the trace format].
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerTargetValue(int Channel__Trace_, int Marker, double Target_Value)
        {
            int pInvokeResult = PInvoke.SetMarkerTargetValue(this._handle, Channel__Trace_, Marker, Target_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the target value for the target search of marker no. &lt;Mk&gt;, which can be activated using CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUCTion:EXECute TARGet.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:TARGet?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Target_Value">
        /// Returns the target value of the target search.
        /// 
        /// Note:
        /// 
        /// Unit depends on the format of the active trace (CALCulate&lt;Ch-&gt;Tr&gt;:FORMat).
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerTargetValue(int Channel__Trace_, int Marker, out double Target_Value)
        {
            int pInvokeResult = PInvoke.GetMarkerTargetValue(this._handle, Channel__Trace_, Marker, out Target_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the search for a bandpass region on the active trace. A bandpass region is the tallest peak in the search range with a minimum excursion specified by means of the x dB Bandwidth parameter.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:BWIDth:MODE BPASs
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute BFILter
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerBandpassSearch(int Channel__Trace_, int Marker)
        {
            int pInvokeResult = PInvoke.MarkerBandpassSearch(this._handle, Channel__Trace_, Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates the search for a bandstop region on the active trace. A bandstop region is the lowest peak (local minimum) in the search range with a minimum excursion that is specified by means of the x dB Bandwidth parameter.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:BWIDth:MODE BSTOP
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute BFILter
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerBandstopSearch(int Channel__Trace_, int Marker)
        {
            int pInvokeResult = PInvoke.MarkerBandstopSearch(this._handle, Channel__Trace_, Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the bandfilter search mode.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:FUNCtion:BWIDth:MODE
        /// BPASs | BSTop | BPRMarker | BSRMarker | BPABsolute | BSABsolute
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Search_Mode">
        /// This control selects the bandfilter search mode.
        /// 
        /// Valid Values:
        /// RSZVB_BWID_MODE_BPAS (0) - Bandpass Ref to Max
        /// RSZVB_BWID_MODE_BST  (1) - Bandstop Ref to Max
        /// RSZVB_BWID_MODE_BPRM (2) - Bandpass Ref to Marker
        /// RSZVB_BWID_MODE_BSRM (3) - Bandstop Ref to Marker
        /// RSZVB_BWID_MODE_BPAB (4) - Bandpass Absolute Level
        /// RSZVB_BWID_MODE_BSAB (5) - Bandstop Absolute Level
        /// 
        /// Default Value: RSZVB_BWID_MODE_BPAS (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerSearchMode(int Channel__Trace_, int Marker, int Search_Mode)
        {
            int pInvokeResult = PInvoke.SetMarkerSearchMode(this._handle, Channel__Trace_, Marker, Search_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the bandfilter search mode.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:FUNCtion:BWIDth:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Search_Mode">
        /// This control returns the bandfilter search mode.
        /// 
        /// Valid Values:
        /// RSZVB_BWID_MODE_BPAS (0) - Bandpass Ref to Max
        /// RSZVB_BWID_MODE_BST  (1) - Bandstop Ref to Max
        /// RSZVB_BWID_MODE_BPRM (2) - Bandpass Ref to Marker
        /// RSZVB_BWID_MODE_BSRM (3) - Bandstop Ref to Marker
        /// RSZVB_BWID_MODE_BPAB (4) - Bandpass Absolute Level
        /// RSZVB_BWID_MODE_BSAB (5) - Bandstop Absolute Level
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerSearchMode(int Channel__Trace_, int Marker, out int Search_Mode)
        {
            int pInvokeResult = PInvoke.GetMarkerSearchMode(this._handle, Channel__Trace_, Marker, out Search_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function causes the bandfilter search to be repeated after each sweep: When tracking mode is active the markers typically change their horizontal and their vertical positions as the measurement goes on.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute BFILter
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:SEARch:TRACking &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Bandfilter_Tracking">
        /// Enables or disables the bandfilter tracking mode.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerBandfilterTracking(int Channel__Trace_, int Marker, bool Bandfilter_Tracking)
        {
            int pInvokeResult = PInvoke.MarkerBandfilterTracking(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Bandfilter_Tracking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the bandfilter level, i.e. the minimum excursion for the bandpass and bandstop peaks.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:BWIDth &lt;x_dB_Bandwidth&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// This parameter is ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="x_dB_Bandwidth">
        /// Defines x dB Bandwidth parameter. The x dB Bandwidth is the difference between the band edges and the center response value of a bandfilter peak; it must be negative for a bandpass search and positive for a bandstop search.
        /// 
        /// Valid Range:
        /// For bandpass: -100.00 dB to -0.01 dB, the increment (UP/DOWN) is 0.3 dB
        /// For bandstop: +0.01 dB to +100.00 dB, the increment (UP/DOWN) is 0.3 dB
        /// 
        /// Default Value: -3.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerxdBBandwidth(int Channel__Trace_, int Marker, double x_dB_Bandwidth)
        {
            int pInvokeResult = PInvoke.MarkerxdBBandwidth(this._handle, Channel__Trace_, Marker, x_dB_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the results of a bandpass or a bandstop filter search. Result is only available after a bandfilter search has been executed.
        /// 
        /// Note(s):
        /// 
        /// Units of the result values depends on the sweep type and the marker format; see CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FORMat.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:BWIDth?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// This parameter is ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Bandwidth">
        /// Returns n-dB bandwidth of the bandpass/bandstop region, where n is the selected x dB Bandwidth (setting command CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:BWIDth &lt;x dB Bandwidth&gt;).
        /// 
        /// </param>
        /// <param name="Center_Stimulus">
        /// Returns stimulus frequency at the center of the bandpass/bandstop region (the stimulus value of marker no. 4).
        /// 
        /// </param>
        /// <param name="Q">
        /// Returns quality factor, i.e. the ratio between the center frequency and the 3-dB bandwidth.
        /// 
        /// </param>
        /// <param name="Loss">
        /// Returns loss at the center of the bandpass/bandstop region (the response value of marker no. 4 at the time of the bandfilter search).
        /// 
        /// </param>
        /// <param name="LBE">
        /// Returns lower band edge.
        /// 
        /// </param>
        /// <param name="UBE">
        /// Returns upper band edge.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerBandfilterResults(int Channel__Trace_, int Marker, out double Bandwidth, out double Center_Stimulus, out double Q, out double Loss, out double LBE, out double UBE)
        {
            int pInvokeResult = PInvoke.MarkerBandfilterResults(this._handle, Channel__Trace_, Marker, out Bandwidth, out Center_Stimulus, out Q, out Loss, out LBE, out UBE);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the bandfilter level, i.e. the minimum excursion for the bandpass and bandstop peaks.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is ZVR compatible.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:BWIDth &lt;x_dB_Bandwidth&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// This parameter is ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="x_dB_Bandwidth">
        /// Defines x dB Bandwidth parameter.
        /// 
        /// Valid Range:
        /// 0.01 dB to 100.00 dB, the increment (UP/DOWN) is 0.3 dB
        /// 
        /// Default Value: 3.0 dB
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerxdBBandwidthZVR(int Channel__Trace_, int Marker, double x_dB_Bandwidth)
        {
            int pInvokeResult = PInvoke.MarkerxdBBandwidthZVR(this._handle, Channel__Trace_, Marker, x_dB_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the results of a bandpass or a bandstop filter search.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is ZVR compatible.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:BWIDth?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// This parameter is ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Bandwidth">
        /// Returns bandwidth of the bandpass/bandstop region.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerBandfilterResultsZVR(int Channel__Trace_, int Marker, out double Bandwidth)
        {
            int pInvokeResult = PInvoke.MarkerBandfilterResultsZVR(this._handle, Channel__Trace_, Marker, out Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function shows or hides the bandfilter search results in the diagram area.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute BFILter
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:SEARch:BFILter:RESult[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Search_Results">
        /// Shows or hides the bandfilter search results in the diagram area.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) On: Show the bandfilter search results.
        /// 
        /// (2) Off: Hide the bandfilter search results.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerSearchResultState(int Channel__Trace_, int Marker, bool Search_Results)
        {
            int pInvokeResult = PInvoke.SetMarkerSearchResultState(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Search_Results));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the bandfilter search results state.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:SEARch:BFILter:RESult[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Search_Results">
        /// Returns the bandfilter search results state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) On: Show the bandfilter search results.
        /// 
        /// (2) Off: Hide the bandfilter search results.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerSearchResultState(int Channel__Trace_, int Marker, out bool Search_Results)
        {
            ushort Search_ResultsAsUShort;
            int pInvokeResult = PInvoke.GetMarkerSearchResultState(this._handle, Channel__Trace_, Marker, out Search_ResultsAsUShort);
            Search_Results = System.Convert.ToBoolean(Search_ResultsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the marker tracking mode for marker no. &lt;Mk&gt;. Tracking mode causes the active minimum/maximum or target search of the active marker to be repeated after each sweep.
        /// 
        /// Note(s):
        /// 
        /// (1) A marker must be created and a search mode must be active (CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute ...) to use this function.
        /// 
        /// (2) If the current search mode is a bandfilter search this function enables or disables bandfilter tracking.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:SEARch:TRACking &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Marker_Tracking">
        /// Enables or disables the marker tracking mode.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerTracking(int Channel__Trace_, int Marker, bool Marker_Tracking)
        {
            int pInvokeResult = PInvoke.SetMarkerTracking(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Marker_Tracking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the marker tracking mode for marker no. &lt;Mk&gt; is enabled or disabled. Tracking mode causes the active minimum/maximum or target search of the active marker to be repeated after each sweep.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:SEARch:TRACking?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// For a bandfilter search (BFILter) is this value ignored and may be set to any value because the bandfilter search functions always use markers Mkr1 to Mkr4.
        /// 
        /// </param>
        /// <param name="Marker_Tracking">
        /// Returns whether is the marker tracking mode enabled or disabled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerTracking(int Channel__Trace_, int Marker, out bool Marker_Tracking)
        {
            ushort Marker_TrackingAsUShort;
            int pInvokeResult = PInvoke.GetMarkerTracking(this._handle, Channel__Trace_, Marker, out Marker_TrackingAsUShort);
            Marker_Tracking = System.Convert.ToBoolean(Marker_TrackingAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines search ranges for the maximum/minimum or target search. Assigns a search range to marker and define the start and stop values.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:DOMain:USER &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:DOMain:USER:STARt &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:DOMain:USER:STOP &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Search_Range">
        /// Selects one out of 10 search ranges.
        /// 
        /// Valid Values:
        /// RSZVB_FULL_SPAN (0) - Full Span
        /// RSZVB_RANGE_1   (1) - Range 1
        /// RSZVB_RANGE_2   (2) - Range 2
        /// RSZVB_RANGE_3   (3) - Range 3
        /// RSZVB_RANGE_4   (4) - Range 4
        /// RSZVB_RANGE_5   (5) - Range 5
        /// RSZVB_RANGE_6   (6) - Range 6
        /// RSZVB_RANGE_7   (7) - Range 7
        /// RSZVB_RANGE_8   (8) - Range 8
        /// RSZVB_RANGE_9   (9) - Range 9
        /// RSZVB_RANGE_10  (10) - Range 10
        /// 
        /// Default Value: RSZVB_FULL_SPAN (0)
        /// 
        /// Note:
        /// 
        /// Full span denotes the (non-configurable) search range. Start and Stop parameters does not apply.
        /// 
        /// </param>
        /// <param name="Start">
        /// Defines the start value of the selected search range.
        /// 
        /// Valid range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range depends on the instrument model and on the sweep type. Unit is Hz, dBm or s, depending on the sweep type.
        /// 
        /// (2) Start must be smaller than the Stop value, otherwise the search will not be initiated.
        /// 
        /// </param>
        /// <param name="Stop">
        /// Defines the stop value of the selected search range.
        /// 
        /// Valid range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) Valid range depends on the instrument model and on the sweep type. Unit is Hz, dBm or s, depending on the sweep type.
        /// 
        /// (2) Stop must be larger than the Start value, otherwise the search will not be initiated.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerSearchRange(int Channel__Trace_, int Marker, int Search_Range, double Start, double Stop)
        {
            int pInvokeResult = PInvoke.MarkerSearchRange(this._handle, Channel__Trace_, Marker, Search_Range, Start, Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Displays or hides range limit lines for the search range.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:FUNCtion:DOMain:USER:SHOW
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Show_Range">
        /// Displays or hides range limit lines for the search range.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerSearchRangeShow(int Channel__Trace_, int Marker, bool Show_Range)
        {
            int pInvokeResult = PInvoke.SetMarkerSearchRangeShow(this._handle, Channel__Trace_, Marker, System.Convert.ToUInt16(Show_Range));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries whether range limit lines for the search range are displayed.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:MARKer&lt;Mk&gt;:FUNCtion:DOMain:USER:SHOW?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Show_Range">
        /// Returns whether range limit lines for the search range are displayed.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerSearchRangeShow(int Channel__Trace_, int Marker, out bool Show_Range)
        {
            ushort Show_RangeAsUShort;
            int pInvokeResult = PInvoke.GetMarkerSearchRangeShow(this._handle, Channel__Trace_, Marker, out Show_RangeAsUShort);
            Show_Range = System.Convert.ToBoolean(Show_RangeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Returns the result (stimulus and response value) of a search started by means of CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:EXECute. The search must be executed before the command is enabled.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:RESult?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker_Stimulus">
        /// Stimulus value of marker no. &lt;Mk&gt;. Where unit is:
        /// 
        ///  - frequency sweep: Hz
        ///  - power sweep: dBm
        ///  - time and CW mode sweep: s
        /// 
        /// </param>
        /// <param name="Marker_Response">
        /// Response value(s) of marker no. &lt;Mk&gt;. Unit is depending on the marker format; see CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FORMat.
        /// 
        /// Note:
        /// 
        /// Assume that the marker result given by the complex quantity z = x + jy comprise from two values.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int MarkerSearchResults(int Channel__Trace_, int Marker, out double Marker_Stimulus, double[] Marker_Response)
        {
            int pInvokeResult = PInvoke.MarkerSearchResults(this._handle, Channel__Trace_, Marker, out Marker_Stimulus, Marker_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the beginning (start) of the sweep range equal to the stimulus value of the marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetStartToMarker(int Channel__Trace_, int Marker)
        {
            int pInvokeResult = PInvoke.SetStartToMarker(this._handle, Channel__Trace_, Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the end (stop) of the sweep range equal to the stimulus value of the marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:STOP
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetStopToMarker(int Channel__Trace_, int Marker)
        {
            int pInvokeResult = PInvoke.SetStopToMarker(this._handle, Channel__Trace_, Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the center of the sweep range equal to the stimulus value of the marker &lt;Mk&gt; on trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:MARKer&lt;Mk&gt;:FUNCtion:CENTer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Marker">
        /// Marker number.
        /// 
        /// Valid Range: 1 to 10
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCenterToMarker(int Channel__Trace_, int Marker)
        {
            int pInvokeResult = PInvoke.SetCenterToMarker(this._handle, Channel__Trace_, Marker);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays or hides the entire limit line (including all segments) associated to the active trace.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:DISPlay[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Display_Limit_Line">
        /// Displays or hides the entire limit line.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ShowLimitLine(int Channel__Trace_, bool Display_Limit_Line)
        {
            int pInvokeResult = PInvoke.ShowLimitLine(this._handle, Channel__Trace_, System.Convert.ToUInt16(Display_Limit_Line));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the limit check (or individual upper and lower limits) on or off.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:STATe &lt;Boolean&gt;
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:LOWer:STATe &lt;Boolean&gt;
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:UPPer:STATe &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Line">
        /// Select limit line.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// RSZVB_LIMIT_ALL   (3) - All
        /// 
        /// Default Value: RSZVB_LIMIT_ALL (3)
        /// 
        /// </param>
        /// <param name="Limit_Check">
        /// Switches the limit check on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLimitCheck(int Channel__Trace_, int Limit_Line, bool Limit_Check)
        {
            int pInvokeResult = PInvoke.SetLimitCheck(this._handle, Channel__Trace_, Limit_Line, System.Convert.ToUInt16(Limit_Check));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the limit check (or individual upper and lower limits) is switched on or off.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:STATe?
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:LOWer:STATe?
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:UPPer:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Line">
        /// Select limit line.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// RSZVB_LIMIT_ALL   (3) - All
        /// 
        /// Default Value: RSZVB_LIMIT_ALL (3)
        /// 
        /// </param>
        /// <param name="Limit_Check">
        /// Returns if the limit check is switched on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLimitCheck(int Channel__Trace_, int Limit_Line, out bool Limit_Check)
        {
            ushort Limit_CheckAsUShort;
            int pInvokeResult = PInvoke.GetLimitCheck(this._handle, Channel__Trace_, Limit_Line, out Limit_CheckAsUShort);
            Limit_Check = System.Convert.ToBoolean(Limit_CheckAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the acoustic signal (fail beep) on or off. The fail beep is generated each time the analyzer detects an exceeded limit.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:SOUNd[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fail_Beep">
        /// Fail beep on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLimitLineFailBeep(int Channel__Trace_, bool Fail_Beep)
        {
            int pInvokeResult = PInvoke.SetLimitLineFailBeep(this._handle, Channel__Trace_, System.Convert.ToUInt16(Fail_Beep));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the acoustic signal (fail beep) is switched on or off. The fail beep is generated each time the analyzer detects an exceeded limit.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:SOUNd[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fail_Beep">
        /// Returns if fail beep is switched on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLimitLineFailBeep(int Channel__Trace_, out bool Fail_Beep)
        {
            ushort Fail_BeepAsUShort;
            int pInvokeResult = PInvoke.GetLimitLineFailBeep(this._handle, Channel__Trace_, out Fail_BeepAsUShort);
            Fail_Beep = System.Convert.ToBoolean(Fail_BeepAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a 0 or 1, to indicate whether the LIMit test has failed or not. Sweep must be initiated before reading the result when in single sweep mode.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:FAIL?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Check_Result">
        /// Returns a 0 or 1, to indicate whether the LIMit test has failed or not. 0 represents pass, 1 represents fail.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLimitCheckResult(int Channel__Trace_, out int Limit_Check_Result)
        {
            int pInvokeResult = PInvoke.GetLimitCheckResult(this._handle, Channel__Trace_, out Limit_Check_Result);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adds a new segment to the limit line list. In each segment the limit line is defined as a straight line connecting two points.
        /// 
        /// Note(s):
        /// 
        /// This function does not overwrite existing limit line segments. The defined segment is appended to the segment list as new segment.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:DATA &lt;type&gt;, &lt;start_stim&gt;, &lt;stop_stim&gt;, &lt;start_resp&gt;, &lt;stop_resp&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 
        /// This parameter is not used.
        /// 
        /// </param>
        /// <param name="Type">
        /// Type indicates whether the segment belongs to an Upper or a Lower limit line, or if the limit check at the segment is switched Off. Switching off the limit check does not delete the segment.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_OFF   (0) - Off
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// 
        /// Default Value: RSZVB_LIMIT_UPPER (1)
        /// 
        /// </param>
        /// <param name="Start_Stimulus">
        /// Start Stimulus is the stimulus (x-axis) value of the first point of the segment (not necessarily smaller than Stop Stimulus).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Stop_Stimulus">
        /// Stop Stimulus is the stimulus (x-axis) value of the last point of the segment (not necessarily larger than Start Stimulus).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Start_Response">
        /// Start Response is the response (y-axis) value of the first point of the segment.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <param name="Stop_Response">
        /// Stop Response is the response (y-axis) value of the last point of the segment.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AddLimitLineSegment(int Channel__Trace_, int Segment, int Type, double Start_Stimulus, double Stop_Stimulus, double Start_Response, double Stop_Response)
        {
            int pInvokeResult = PInvoke.AddLimitLineSegment(this._handle, Channel__Trace_, Segment, Type, Start_Stimulus, Stop_Stimulus, Start_Response, Stop_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function edits existing segment of the limit line segments list.
        /// 
        /// Note(s):
        /// 
        /// A segment must be created first to enable this function.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:SEGMent&lt;Seg&gt;:TYPE LMIN | LMAX | OFF
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:SEGMent&lt;Seg&gt;:STIMulus:STARt &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:SEGMent&lt;Seg&gt;:STIMulus:STOP &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:SEGMent&lt;Seg&gt;:AMPLitude:STARt &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:SEGMent&lt;Seg&gt;:AMPLitude:STOP &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// Selects the limit line type for a limit line segment.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_OFF   (0) - Off
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// 
        /// Default Value: RSZVB_LIMIT_UPPER (1)
        /// 
        /// </param>
        /// <param name="Start_Stimulus">
        /// Changes the start stimulus value (i.e. the largest or smallest stimulus value) of a limit line segment.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Stop_Stimulus">
        /// Changes the stop stimulus value (i.e. the largest or smallest stimulus value) of a limit line segment.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Start_Response">
        /// Changes the start response value (i.e. the response value assigned to the start stimulus value) of a limit line segment.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <param name="Stop_Response">
        /// Changes the stop response value (i.e. the response value assigned to the stop stimulus value) of a limit line segment.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int EditLimitLineSegment(int Channel__Trace_, int Segment, int Type, double Start_Stimulus, double Stop_Stimulus, double Start_Response, double Stop_Response)
        {
            int pInvokeResult = PInvoke.EditLimitLineSegment(this._handle, Channel__Trace_, Segment, Type, Start_Stimulus, Stop_Stimulus, Start_Response, Stop_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns entire limit line segment list. The limit line segment is calculated as a straight line connecting the two points (&lt;Start Stimulus&gt;, &lt;Start Response&gt;) and (&lt;Stop Stimulus&gt;, &lt;Stop Response&gt;).
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:DATA?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="List_Size">
        /// Pass the maximum number of segments (segments list size) to be taken out of the segments list.
        /// 
        /// Valid Range &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segments_Count">
        /// Returns the number of received list segments.
        /// 
        /// </param>
        /// <param name="Type">
        /// Type indicates whether the segment belongs to an Upper or a Lower limit line, or if the limit check at the segment is switched Off.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_OFF   (0) - Off
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViInt32 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps, see CALCulate&lt;Ch/Tr&gt;:LIMit:CONTrol:DOMain.
        /// 
        /// </param>
        /// <param name="Start_Stimulus">
        /// Start Stimulus is the stimulus (x-axis) value of the first point of the segment (not necessarily smaller than Stop Stimulus).
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Stop_Stimulus">
        /// Stop Stimulus is the stimulus (x-axis) value of the last point of the segment (not necessarily larger than Start Stimulus).
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Start_Response">
        /// Start Response is the response (y-axis) value of the first point of the segment.
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <param name="Stop_Response">
        /// Stop Response is the response (y-axis) value of the last point of the segment.
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadLimitLineSegmentList(int Channel__Trace_, int List_Size, out int Segments_Count, int[] Type, double[] Start_Stimulus, double[] Stop_Stimulus, double[] Start_Response, double[] Stop_Response)
        {
            int pInvokeResult = PInvoke.ReadLimitLineSegmentList(this._handle, Channel__Trace_, List_Size, out Segments_Count, Type, Start_Stimulus, Stop_Stimulus, Start_Response, Stop_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stimulus values of the limit line and/or creates new limit line segments. It also defines the response (y-axis) values of the lower (upper) limit line.
        /// 
        /// Note(s):
        /// 
        /// (1) This function use a fixed numbering scheme for limit line segments: Upper limit line segments are assigned odd numbers (1, 3, 5,...), lower limit line segments are assigned even numbers (2, 4, 6,...).
        /// 
        /// (2) Rules for creating segments:
        /// The following rules apply to an active trace with n existing upper and n existing lower limit line segments:
        /// 
        /// An odd number of values is rejected; an error message -109,"Missing parameter..." is generated. 
        /// 
        /// An even number of 2*k values updates or generates k lower limit line segments. 
        /// 
        /// For n &gt; k the response values of all existing lower limit line segments no. 2, 4, ...,2*k are updated, the existing upper and lower limit line segments no. 2*k+1, ..., 2*n are deleted. The existing upper limit line segments no. 1, 3, 2*k-1 are not affected. 
        /// 
        /// For n &lt; k the response values of the lower limit line segments no. 2, 4 to 2*n are updated, the lower limit line segments 2*n+2, 2*n+4,..., 2*k are generated with default stimulus values (see CALCulate&lt;Ch/Tr&gt;:LIMit:CONTrol[:DATA] . In addition, the missing upper limit line segments 2*n+1, 2*n+3,..., 2*k-1 are generated with default stimulus and response values 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:CONTrol[:DATA] &lt;numeric_value&gt;,&lt;numeric_value&gt;{,&lt;numeric_value&gt;,&lt;numeric_value&gt;}
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:LOWer[:DATA] &lt;numeric_value&gt;,&lt;numeric_value&gt;{,&lt;numeric_value&gt;,&lt;numeric_value&gt;}
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:UPPer[:DATA] &lt;numeric_value&gt;,&lt;numeric_value&gt;{,&lt;numeric_value&gt;,&lt;numeric_value&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="List_Size">
        /// Pass the number of segments (segments list size).
        /// 
        /// Valid Range &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// Selects the limit line type.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// 
        /// Default Value: RSZVB_LIMIT_UPPER (1)
        /// 
        /// </param>
        /// <param name="Start_Stimulus">
        /// Start Stimulus is the stimulus (x-axis) value of the first point of the segment(s) (not necessarily smaller than Stop Stimulus).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Stop_Stimulus">
        /// Stop Stimulus is the stimulus (x-axis) value of the last point of the segment(s) (not necessarily larger than Start Stimulus).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Start_Response">
        /// Start Response is the response (y-axis) value of the first point of the segment(s).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <param name="Stop_Response">
        /// Stop Response is the response (y-axis) value of the last point of the segment(s).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) The array must be of type ViReal64 and have at least as many  elements as indicated in the 'List Size' parameter.
        /// 
        /// (2) The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteLimitLineSegmentList(int Channel__Trace_, int List_Size, int Type, double[] Start_Stimulus, double[] Stop_Stimulus, double[] Start_Response, double[] Stop_Response)
        {
            int pInvokeResult = PInvoke.WriteLimitLineSegmentList(this._handle, Channel__Trace_, List_Size, Type, Start_Stimulus, Stop_Stimulus, Start_Response, Stop_Response);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function shifts the limit line in horizontal direction (stimulus values) and also shifts all lower and upper limit line segments assigned to the active trace in vertical direction (response values).
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:CONTrol:SHIFt &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:LOWer:SHIFt &lt;numeric_value&gt;
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:UPPer:SHIFt &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace. This trace provides the stimulus data for the limit line unless another trace &lt;trace_name&gt; is specified.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Line_Type">
        /// Select limit line type.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_LOWER (1) - Lower
        /// RSZVB_LIMIT_UPPER (2) - Upper
        /// 
        /// Default Value: RSZVB_LIMIT_UPPER (2)
        /// 
        /// </param>
        /// <param name="Stimulus_Offset">
        /// Stimulus offset value, used to shift limit line segments in horizontal direction.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Response_Offset">
        /// Response offset value, used to shift limit line segments in vertical direction.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. The unit is the default unit of the measured parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ShiftLimitLineSegmentList(int Channel__Trace_, int Limit_Line_Type, double Stimulus_Offset, double Response_Offset)
        {
            int pInvokeResult = PInvoke.ShiftLimitLineSegmentList(this._handle, Channel__Trace_, Limit_Line_Type, Stimulus_Offset, Response_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all limit line segments.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:DELete:ALL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteLimitLineSegments(int Channel__Trace_)
        {
            int pInvokeResult = PInvoke.DeleteLimitLineSegments(this._handle, Channel__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads a limit line definition from a specified file and assigns it to a trace with a specified name. Limit lines are created using the CALCulte&lt;Ch/Tr&gt;:LIMit... commands.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:LIMit '&lt;trc_name&gt;','&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing trace in the active setup (string parameter). The imported limit line is assigned to this trace, irrespective of the trace information in the limit line file.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the limit line file to be loaded. The default extension (manual control) for limit line files is *.limit, although other extensions are allowed. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.limit"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int RecallLimitLine(string Trace_Name, string File_Name)
        {
            int pInvokeResult = PInvoke.RecallLimitLine(this._handle, Trace_Name, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads a limit line definition from a specified file and assigns it to a trace with a specified name. Limit lines are created using the CALCulte&lt;Ch/Tr&gt;:LIMit... commands.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:LIMit '&lt;trc_name&gt;','&lt;file_name&gt;'[,'&lt;param_name&gt;', &lt;x_offset&gt;, &lt;y_offset&gt;, &lt;type&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing trace in the active setup (string parameter). The imported limit line is assigned to this trace, irrespective of the trace information in the limit line file.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the limit line file to be loaded. The default extension (manual control) for limit line files is *.limit, although other extensions are allowed. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.limit"
        /// 
        /// </param>
        /// <param name="S_Parameter">
        /// This control selects an S-parameter from a Touchstone file.
        /// The parameter must be compatible with the file type (e.g. for oneport Touchstone files *.s1p, only the parameter name 'S11' is
        /// allowed).
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="X_Offset">
        /// This control sets the stimulus offset for limit lines loaded from a Touchstone file. A 1 GHz offset shifts the limit line by 1 GHz in (positive) horizontal direction.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) This parameter is optional. It will be ignored when the S-Parameter is left empty.
        /// </param>
        /// <param name="Y_Offset">
        /// This control sets the response offset for limit lines loaded from a Touchstone file. A 1 dB offset shifts the limit line by 1 dB in (positive) vertical direction.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) This parameter is optional. It will be ignored when the S-Parameter is left empty.
        /// </param>
        /// <param name="Type">
        /// Selects the limit line type for a limit line segment.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_OFF   (0) - Off
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// 
        /// Default Value: RSZVB_LIMIT_UPPER (1)
        /// 
        /// Note(s):
        /// 
        /// (1) This parameter is optional. It will be ignored when the S-Parameter is left empty.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int RecallLimitLineWithOptions(string Trace_Name, string File_Name, string S_Parameter, double X_Offset, double Y_Offset, int Type)
        {
            int pInvokeResult = PInvoke.RecallLimitLineWithOptions(this._handle, Trace_Name, File_Name, S_Parameter, X_Offset, Y_Offset, Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves the limit lines associated to a specified trace to a limit line file. Limit lines are created using the CALCulte&lt;Ch/Tr&gt;:LIMit... commands.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:LIMit '&lt;trc_name&gt;','&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing trace in the active setup (string parameter) for which a limit line definition exists.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created limit line file. The default extension (manual control) for limit line files is *.limit, although other extensions are allowed. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1.limit"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveLimitLine(string Trace_Name, string File_Name)
        {
            int pInvokeResult = PInvoke.SaveLimitLine(this._handle, Trace_Name, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates an lower (upper) limit line using the stimulus values of a data or memory trace and specified offset values.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:LOWer:FEED &lt;stimulus_offset&gt;,&lt;response_offset&gt;[,&lt;trace_name&gt;]
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:UPPer:FEED &lt;stimulus_offset&gt;,&lt;response_offset&gt;[,&lt;trace_name&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace. This trace provides the stimulus data for the limit line unless another trace &lt;trace_name&gt; is specified.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Line_Type">
        /// Select limit line type.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_LOWER (1) - Lower
        /// RSZVB_LIMIT_UPPER (2) - Upper
        /// 
        /// Default Value: RSZVB_LIMIT_UPPER (2)
        /// 
        /// </param>
        /// <param name="Stimulus_Offset">
        /// Stimulus offset value, used to shift all imported limit line segments in horizontal direction.
        /// 
        /// Valid Range: -1000.0e9 Hz to 1000.0e9 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <param name="Response_Offset">
        /// Response offset value, used to shift all imported limit line segments in vertical direction.
        /// 
        /// Valid Range: -10.0e12 dB to 10.0e12 dB
        /// 
        /// Default Value: 0.0 dB
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Name of the selected trace as used e.g. in CALCulate&lt;Ch&gt;:PARameter:SDEFine. If no trace name is specified the analyzer uses the active trace no. &lt;Ch/Tr&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ImportTraceasLimitLine(int Channel__Trace_, int Limit_Line_Type, double Stimulus_Offset, double Response_Offset, string Trace_Name)
        {
            int pInvokeResult = PInvoke.ImportTraceasLimitLine(this._handle, Channel__Trace_, Limit_Line_Type, Stimulus_Offset, Response_Offset, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the TTL pass/fail signals on or off. The signals are applied to the USER CONTROL connector as long as the active trace &lt;Ch/Tr&gt; is within limits. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:TTLout&lt;Output_no&gt;[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Output_No">
        /// Select TTL output.
        /// 
        /// Valid Values:
        /// 1 - TTL out pass 1 (pin 13 of USER CONTROL connector)
        /// 2 - TTL out pass 2 (pin 14 of USER CONTROL connector)
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="TTL_Output">
        /// Sets TTL output signal on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLimitLineTTLOutPass(int Channel__Trace_, int Output_No, bool TTL_Output)
        {
            int pInvokeResult = PInvoke.SetLimitLineTTLOutPass(this._handle, Channel__Trace_, Output_No, System.Convert.ToUInt16(TTL_Output));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the TTL pass/fail signals is switched on or off. The signals are applied to the USER CONTROL connector as long as the active trace &lt;Ch/Tr&gt; is within limits. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:TTLout&lt;Output_no&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Output_No">
        /// Select TTL output.
        /// 
        /// Valid Values:
        /// 1 - TTL out pass 1 (pin 13 of USER CONTROL connector)
        /// 2 - TTL out pass 2 (pin 14 of USER CONTROL connector)
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="TTL_Output">
        /// Returns if TTL output signal is switched on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLimitLineTTLOutPass(int Channel__Trace_, int Output_No, out bool TTL_Output)
        {
            ushort TTL_OutputAsUShort;
            int pInvokeResult = PInvoke.GetLimitLineTTLOutPass(this._handle, Channel__Trace_, Output_No, out TTL_OutputAsUShort);
            TTL_Output = System.Convert.ToBoolean(TTL_OutputAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function shows or hides the display line associated to the active trace in a Cartesian diagram area.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:DLINe:STATe &lt;Boolean&gt;
        /// CALCulate&lt;Ch/Tr&gt;:DLINe &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Display_Line">
        /// Switches the display line on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Position">
        /// Defines the position (response value) of the display line.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayLine(int Channel__Trace_, bool Display_Line, double Position)
        {
            int pInvokeResult = PInvoke.SetDisplayLine(this._handle, Channel__Trace_, System.Convert.ToUInt16(Display_Line), Position);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the display line associated to the active trace in a Cartesian diagram area is active or not and returns its position.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:DLINe:STATe?
        /// CALCulate&lt;Ch/Tr&gt;:DLINe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Display_Line">
        /// Returns if the display line is switched on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <param name="Position">
        /// Returns the position (response value) of the display line.
        /// 
        /// Note:
        /// 
        /// The unit is the default unit of the measured parameter; see CALCulate&lt;Ch&gt;:PARameter:SDEFine.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayLine(int Channel__Trace_, out bool Display_Line, out double Position)
        {
            ushort Display_LineAsUShort;
            int pInvokeResult = PInvoke.GetDisplayLine(this._handle, Channel__Trace_, out Display_LineAsUShort, out Position);
            Display_Line = System.Convert.ToBoolean(Display_LineAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the existing limit line and (re-)defines the physical units of the stimulus values of the limit line.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LIMit:CONTrol:DOMain FLIN | FLOG | FSEG | FSINgle | TLIN | TLOG | PLIN | PLOG | PSINgle
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Domain_Units">
        /// Selects the keywords for the units of the stimulus values.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_DOM_FLIN (0) - Frequency Linear
        /// RSZVB_LIMIT_DOM_FLOG (1) - Frequency Logarithmic
        /// RSZVB_LIMIT_DOM_FSEG (2) - Frequency Segment
        /// RSZVB_LIMIT_DOM_FSIN (3) - Frequency Single
        /// RSZVB_LIMIT_DOM_TLIN (4) - Time Linear
        /// RSZVB_LIMIT_DOM_TLOG (5) - Time Logarithmic
        /// RSZVB_LIMIT_DOM_PLIN (6) - Power Linear
        /// RSZVB_LIMIT_DOM_PLOG (7) - Power Logarithmic
        /// RSZVB_LIMIT_DOM_PSIN (8) - Power Single
        /// 
        /// Default Value: RSZVB_LIMIT_DOM_FLIN (0)
        /// 
        /// Notes:
        /// 
        /// (1) The selected unit must be compatible with the sweep type ([SENSe&lt;Ch&gt;:]SWEep:TYPE); otherwise the limit line can not be displayed and no limit check is possible.
        /// 
        /// (2) FLIN, FLOG, FSEG, and FSINgle select frequency units [default: Hz] for the limit line. 
        /// 
        /// (3) TLIN and TLOG select time units [default: s].
        /// 
        /// (4) PLIN, PLOG and PSINgle select power units [default: dBm]. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLimitDomainUnits(int Channel__Trace_, int Domain_Units)
        {
            int pInvokeResult = PInvoke.SetLimitDomainUnits(this._handle, Channel__Trace_, Domain_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the existing limit line and (re-)defines the physical units of the response values of the limit line.
        /// 
        /// Notes:
        /// 
        /// (1) This command is complemented by CALCulate&lt;Chn&gt;:LIMit:RDOMain:FORMat and CALCulate&lt;Chn&gt;:LIMit:RDOMain:SPACing.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LIMit:RDOMain:COMPlex S | SINV | Y | Z | YREL | ZREL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Response_Units">
        /// Selects the keywords for the units of the response values.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_RDOM_COMP_S    (0) - S
        /// RSZVB_LIMIT_RDOM_COMP_SINV (1) - S Inverse
        /// RSZVB_LIMIT_RDOM_COMP_Y    (2) - Y
        /// RSZVB_LIMIT_RDOM_COMP_Z    (3) - Z
        /// RSZVB_LIMIT_RDOM_COMP_YREL (4) - Y Relative
        /// RSZVB_LIMIT_RDOM_COMP_ZREL (5) - Z Relative
        /// 
        /// Default Value: RSZVB_LIMIT_RDOM_COMP_S (0)
        /// 
        /// Notes:
        /// 
        /// (1) S and SINV select relative units (dB) for the limit line. 
        /// 
        /// (2) Y selects admittance units (S/Siemens). 
        /// 
        /// (3) Z selects impedance units (W). 
        /// 
        /// (4) YREL, ZREL select dimensionless numbers (U).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLimitResponseDomainComplexUnits(int Channel__Trace_, int Response_Units)
        {
            int pInvokeResult = PInvoke.SetLimitResponseDomainComplexUnits(this._handle, Channel__Trace_, Response_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the existing limit line and (re-)defines the physical units of the response values of the limit line.
        /// 
        /// Notes: 
        /// 
        /// (1) This command is complemented by CALCulate&lt;Chn&gt;:LIMit:RDOMain:COMPlex and CALCulate&lt;Chn&gt;:LIMit:RDOMain:SPACing. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LIMit:RDOMain:FORMat COMPlex | MAGNitude | PHASe | REAL | IMAGinary | SWR | GDELay | L | C
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Response_Units">
        /// Selects the keywords for the units of the response values.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_RDOM_FORM_COMP  (0) - Complex
        /// RSZVB_LIMIT_RDOM_FORM_MAGN  (1) - Magnitude
        /// RSZVB_LIMIT_RDOM_FORM_PHAS  (2) - Phase
        /// RSZVB_LIMIT_RDOM_FORM_REAL  (3) - Real
        /// RSZVB_LIMIT_RDOM_FORM_IMAG  (4) - Imaginary
        /// RSZVB_LIMIT_RDOM_FORM_SWR   (5) - SWR
        /// RSZVB_LIMIT_RDOM_FORM_GDEL  (6) - G Delay
        /// RSZVB_LIMIT_RDOM_FORM_L     (7) - L
        /// RSZVB_LIMIT_RDOM_FORM_C     (8) - C
        /// 
        /// Default Value: RSZVB_LIMIT_RDOM_FORM_COMP (0)
        /// 
        /// Notes:
        /// 
        /// (1) COMPlex, REAL, IMAGinary, and SWR select dimensionless numbers (U) for the limit line. 
        /// 
        /// (2) MAGNitude selects relative units (dB). 
        /// 
        /// (3) PHASe selects phase units (deg).  
        /// 
        /// (4) GDELay selects time units (s). 
        /// 
        /// (5) L selects inductance units (H/Henry). 
        /// 
        /// (6) C selects capacitance units (F/Farad).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLimitResponseDomainFormatUnits(int Channel__Trace_, int Response_Units)
        {
            int pInvokeResult = PInvoke.SetLimitResponseDomainFormatUnits(this._handle, Channel__Trace_, Response_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the existing limit line and (re-)defines the physical units of the response values of the limit line.
        /// 
        /// Notes: 
        /// 
        /// (1) This command is complemented by CALCulate&lt;Chn&gt;:LIMit:RDOMain:COMPlex and CALCulate&lt;Chn&gt;:LIMit:RDOMain:FORMat.
        /// 
        /// (2) The analyzer uses dB units, irrespective of the parameter selected.  
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:LIMit:RDOMain:SPACing LINear | LOGarithmic | dB | SIC
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Response_Units">
        /// Selects the keywords for the units of the response values.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_RDOM_SPAC_LIN  (0) - Linear
        /// RSZVB_LIMIT_RDOM_SPAC_LOG  (1) - Logarithmic
        /// RSZVB_LIMIT_RDOM_SPAC_DB   (2) - dB
        /// RSZVB_LIMIT_RDOM_SPAC_SIC  (3) - SIC
        /// 
        /// Default Value: RSZVB_LIMIT_RDOM_SPAC_LIN (0)
        /// 
        /// Notes:
        /// 
        /// (1) The analyzer uses dB units, irrespective of the parameter selected. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLimitResponseDomainSpacingUnits(int Channel__Trace_, int Response_Units)
        {
            int pInvokeResult = PInvoke.SetLimitResponseDomainSpacingUnits(this._handle, Channel__Trace_, Response_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the global ripple limit check on or off. This check covers all traces in the active setup.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:STATe &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Check">
        /// Switches the limit check on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRippleCheckOn(int Channel__Trace_, bool Limit_Check)
        {
            int pInvokeResult = PInvoke.SetRippleCheckOn(this._handle, Channel__Trace_, System.Convert.ToUInt16(Limit_Check));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the global ripple limit check.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Check">
        /// Returns the limit check state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRippleCheckOn(int Channel__Trace_, out bool Limit_Check)
        {
            ushort Limit_CheckAsUShort;
            int pInvokeResult = PInvoke.GetRippleCheckOn(this._handle, Channel__Trace_, out Limit_CheckAsUShort);
            Limit_Check = System.Convert.ToBoolean(Limit_CheckAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a 0 or 1, to indicate whether or not the global ripple limit check has failed. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:FAIL?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Ripple_Limit_Check_Result">
        /// Returns a 0 or 1, to indicate whether or not the global ripple limit check has failed. 0 represents pass (or a disabled limit check), 1 represents fail in at least one ripple limit range. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRippleLimitGlobalCheckResult(int Channel__Trace_, out int Ripple_Limit_Check_Result)
        {
            int pInvokeResult = PInvoke.GetRippleLimitGlobalCheckResult(this._handle, Channel__Trace_, out Ripple_Limit_Check_Result);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the limit check in the ripple limit range no. &lt;Seg&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;[:STATe] &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Check">
        /// Switches the limit check on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCheckRippleLimitRangeSegment(int Channel__Trace_, int Segment, bool Limit_Check)
        {
            int pInvokeResult = PInvoke.SetCheckRippleLimitRangeSegment(this._handle, Channel__Trace_, Segment, System.Convert.ToUInt16(Limit_Check));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the limit check in the ripple limit range no. &lt;Seg&gt;.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Check">
        /// Returns the limit check state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCheckRippleLimitRangeSegment(int Channel__Trace_, int Segment, out bool Limit_Check)
        {
            ushort Limit_CheckAsUShort;
            int pInvokeResult = PInvoke.GetCheckRippleLimitRangeSegment(this._handle, Channel__Trace_, Segment, out Limit_CheckAsUShort);
            Limit_Check = System.Convert.ToBoolean(Limit_CheckAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the result of the ripple limit check in the previously defined limit range no. &lt;Seg&gt;.  
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;:RESult?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fail">
        /// Returns a 0 or 1, to indicate whether the LIMit test has failed or not. 0 represents pass, 1 represents fail.
        /// 
        /// </param>
        /// <param name="Limit_Check_Result">
        /// Measured ripple in the limit range. A result is returned even if the limit check in the range no. &lt;Seg&gt; is disabled.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRippleLimitCheckSegmentResult(int Channel__Trace_, int Segment, out int Fail, out double Limit_Check_Result)
        {
            int pInvokeResult = PInvoke.GetRippleLimitCheckSegmentResult(this._handle, Channel__Trace_, Segment, out Fail, out Limit_Check_Result);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays or hides all ripple limit lines (including all ranges) associated to the active trace. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:DISPlay[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Display_Line">
        /// Switches the display line on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRippleLimitsDisplayState(int Channel__Trace_, bool Display_Line)
        {
            int pInvokeResult = PInvoke.SetRippleLimitsDisplayState(this._handle, Channel__Trace_, System.Convert.ToUInt16(Display_Line));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns limits display state.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:DISPlay[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Display_Line">
        /// Returns limits display state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRippleLimitsDisplayState(int Channel__Trace_, out bool Display_Line)
        {
            ushort Display_LineAsUShort;
            int pInvokeResult = PInvoke.GetRippleLimitsDisplayState(this._handle, Channel__Trace_, out Display_LineAsUShort);
            Display_Line = System.Convert.ToBoolean(Display_LineAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the acoustic signal (fail beep) on or off. The fail beep is generated each time the analyzer detects an exceeded limit.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SOUNd[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fail_Beep">
        /// Switches the fail beep on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRippleFailBeepOn(int Channel__Trace_, bool Fail_Beep)
        {
            int pInvokeResult = PInvoke.SetRippleFailBeepOn(this._handle, Channel__Trace_, System.Convert.ToUInt16(Fail_Beep));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the acoustic signal state.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SOUNd[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fail_Beep">
        /// Returns the acoustic signal state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRippleFailBeepOn(int Channel__Trace_, out bool Fail_Beep)
        {
            ushort Fail_BeepAsUShort;
            int pInvokeResult = PInvoke.GetRippleFailBeepOn(this._handle, Channel__Trace_, out Fail_BeepAsUShort);
            Fail_Beep = System.Convert.ToBoolean(Fail_BeepAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adds and enables/disables an arbitrary number of ripple limit ranges, assigning the stimulus values and the ripple limits.
        /// 
        /// Note(s):
        /// 
        /// This function does not overwrite existing ripple limit ranges. The defined ranges are appended to the range list as new ranges. 
        /// 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:DATA &lt;type&gt;, &lt;start_stim&gt;, &lt;stop_stim&gt;, &lt;limit&gt;{,&lt;type&gt;, &lt;start_stim&gt;, &lt;stop_stim&gt;, &lt;limit&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="No_of_Values">
        /// Set number of values for controls Type, Start Stimulus, Stop Stimulus, Limit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// Type indicates whether the segment belongs to an Upper or a Lower limit line, or if the limit check at the segment is switched Off. Switching off the limit check does not delete the segment.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_OFF   (0) - Off
        /// RSZVB_LIMIT_UPPER (1) - Upper
        /// RSZVB_LIMIT_LOWER (2) - Lower
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) Number of values is defined by control No of Values.
        /// </param>
        /// <param name="Start_Stimulus">
        /// Start Stimulus is the stimulus (x-axis) value of the first point of the segment (not necessarily smaller than Stop Stimulus).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// (2) Number of values is defined by control No of Values.
        /// </param>
        /// <param name="Stop_Stimulus">
        /// Stop Stimulus is the stimulus (x-axis) value of the last point of the segment (not necessarily larger than Start Stimulus).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// 
        /// (2) Number of values is defined by control No of Values.
        /// </param>
        /// <param name="Limit">
        /// Limit value, to be defined in accordance with the selected format (CALCulate&lt;Chn&gt;:RIPPle:RDOMain:FORMat). 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: none
        /// 
        /// Notes:
        /// 
        /// (1) Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// (2) Number of values is defined by control No of Values.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AddRippleLimitLineRangesSegment(int Channel__Trace_, int No_of_Values, int[] Type, double[] Start_Stimulus, double[] Stop_Stimulus, double[] Limit)
        {
            int pInvokeResult = PInvoke.AddRippleLimitLineRangesSegment(this._handle, Channel__Trace_, No_of_Values, Type, Start_Stimulus, Stop_Stimulus, Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function edits existing segment of the ripple limit line segments list.
        /// 
        /// Note(s):
        /// 
        /// (1) To define several ripple limit ranges with a single command
        /// use CALCulate&lt;Chn&gt;:RIPPle
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;:STIMulus:STARt &lt;numeric_value&gt;
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;:STIMulus:STOP &lt;numeric_value&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Stimulus">
        /// Changes the start stimulus value (i.e. the smallest stimulus value) of a ripple limit range. A range must be created first to enable this command (e.g CALCulate&lt;Chn&gt;:RIPPle:DATA). 
        /// 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <param name="Stop_Stimulus">
        /// Changes the stop stimulus value (i.e. the largest stimulus value) of a ripple limit range. A range must be created first to enable this command (e.g CALCulate&lt;Chn&gt;:RIPPle:DATA). 
        /// 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int EditRippleLimitLineSegment(int Channel__Trace_, int Segment, double Start_Stimulus, double Stop_Stimulus)
        {
            int pInvokeResult = PInvoke.EditRippleLimitLineSegment(this._handle, Channel__Trace_, Segment, Start_Stimulus, Stop_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all limit line segments.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch/Tr&gt;:LIMit:DELete:ALL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteAllRippleLimitRanges(int Channel__Trace_)
        {
            int pInvokeResult = PInvoke.DeleteAllRippleLimitRanges(this._handle, Channel__Trace_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the existing ripple limit ranges and (re-)defines the physical units of the stimulus values of the ripple limit lines. The unit of the ripple limit is defined via CALCulate&lt;Chn&gt;:RIPPle:RDOMain:FORMat 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:CONTrol:DOMain 
        /// FLIN | FLOG | FSEG | FSINgle | TLIN | TLOG | PLIN | PLOG | PSINgle
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Physical_Units">
        /// Selects the keywords for the units of the stimulus values.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_DOM_FLIN (0) - Frequency Linear
        /// RSZVB_LIMIT_DOM_FLOG (1) - Frequency Logarithmic
        /// RSZVB_LIMIT_DOM_FSEG (2) - Frequency Segment
        /// RSZVB_LIMIT_DOM_FSIN (3) - Frequency Single
        /// RSZVB_LIMIT_DOM_TLIN (4) - Time Linear
        /// RSZVB_LIMIT_DOM_TLOG (5) - Time Logarithmic
        /// RSZVB_LIMIT_DOM_PLIN (6) - Power Linear
        /// RSZVB_LIMIT_DOM_PLOG (7) - Power Logarithmic
        /// RSZVB_LIMIT_DOM_PSIN (8) - Power Single
        /// 
        /// Default Value: RSZVB_LIMIT_DOM_FLIN (0)
        /// 
        /// Notes:
        /// 
        /// (1) The selected unit must be compatible with the sweep type ([SENSe&lt;Ch&gt;:]SWEep:TYPE); otherwise the limit line can not be displayed and no limit check is possible.
        /// 
        /// (2) FLIN, FLOG, FSEG, and FSINgle select frequency units [default: Hz] for the limit line. 
        /// 
        /// (3) TLIN and TLOG select time units [default: s].
        /// 
        /// (4) PLIN, PLOG and PSINgle select power units [default: dBm]. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRippleLimitPhysicalUnits(int Channel__Trace_, int Physical_Units)
        {
            int pInvokeResult = PInvoke.SetRippleLimitPhysicalUnits(this._handle, Channel__Trace_, Physical_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the existing ripple limit ranges and (re-)defines the physical unit of the ripple limit.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:RDOMain:FORMat COMPlex | MAGNitude | PHASe | REAL | IMAGinary | SWR | GDELay | L | C
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Response_Units">
        /// Selects the keywords for the units of the response values.
        /// 
        /// Valid Values:
        /// RSZVB_LIMIT_RDOM_FORM_COMP  (0) - Complex
        /// RSZVB_LIMIT_RDOM_FORM_MAGN  (1) - Magnitude
        /// RSZVB_LIMIT_RDOM_FORM_PHAS  (2) - Phase
        /// RSZVB_LIMIT_RDOM_FORM_REAL  (3) - Real
        /// RSZVB_LIMIT_RDOM_FORM_IMAG  (4) - Imaginary
        /// RSZVB_LIMIT_RDOM_FORM_SWR   (5) - SWR
        /// RSZVB_LIMIT_RDOM_FORM_GDEL  (6) - G Delay
        /// RSZVB_LIMIT_RDOM_FORM_L     (7) - L
        /// RSZVB_LIMIT_RDOM_FORM_C     (8) - C
        /// 
        /// Default Value: RSZVB_LIMIT_RDOM_FORM_COMP (0)
        /// 
        /// Notes:
        /// 
        /// (1) COMPlex, REAL, IMAGinary, and SWR select dimensionless numbers (U) for the limit line. 
        /// 
        /// (2) MAGNitude selects relative units (dB). 
        /// 
        /// (3) PHASe selects phase units (deg).  
        /// 
        /// (4) GDELay selects time units (s). 
        /// 
        /// (5) L selects inductance units (H/Henry). 
        /// 
        /// (6) C selects capacitance units (F/Farad).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRippleLimitResponseDomainFormatUnits(int Channel__Trace_, int Response_Units)
        {
            int pInvokeResult = PInvoke.SetRippleLimitResponseDomainFormatUnits(this._handle, Channel__Trace_, Response_Units);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of ripple limit ranges.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number">
        /// Returns 0 | 1 | ... - number of (enabled or disabled)) ripple limit ranges.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNumberRippleLimitRanges(int Channel__Trace_, int Segment, out int Number)
        {
            int pInvokeResult = PInvoke.GetNumberRippleLimitRanges(this._handle, Channel__Trace_, Segment, out Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the ripple limit for ripple limit range no. &lt;Seg&gt;. 
        /// 
        /// Notes:
        /// 
        /// (1) A range must be created first to enable this command (e.g CALCulate&lt;Chn&gt;:RIPPle:DATA). 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;:LIMit
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit">
        /// Limit value, to be defined in accordance with the selected format (CALCulate&lt;Chn&gt;:RIPPle:RDOMain:FORMat). 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note:
        /// 
        /// Almost no restriction apply for limit segments valid range; see Rules for Limit Line Definition. Unit Hz for frequency sweeps, dBm for power sweeps, s for time sweeps.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRippleLimitRange(int Channel__Trace_, int Segment, double Limit)
        {
            int pInvokeResult = PInvoke.SetRippleLimitRange(this._handle, Channel__Trace_, Segment, Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the ripple limit for ripple limit range no. &lt;Seg&gt;. 
        /// 
        /// Notes:
        /// 
        /// (1) A range must be created first to enable this command (e.g CALCulate&lt;Chn&gt;:RIPPle:DATA). 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:RIPPle:SEGMent&lt;Seg&gt;:LIMit?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit">
        /// Returns limit value defined in accordance with the selected format.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRippleLimitRange(int Channel__Trace_, int Segment, out double Limit)
        {
            int pInvokeResult = PInvoke.GetRippleLimitRange(this._handle, Channel__Trace_, Segment, out Limit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves or recalls the ripple limits associated with a specified trace.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:RIPPle 'Trc_name','file_name'
        /// MMEMory:STORe:RIPPle 'Trc_name','file_name'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Operation_to_be_Performed">
        /// This control selects the type of operation to be performed.
        /// 
        /// Valid Values:
        /// RSZVB_SAVE   (0) - Save
        /// RSZVB_RECALL (1) - Recall
        /// 
        /// Default Value: RSZVB_SAVE (0)
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) Saves the ripple limits associated with a specified trace to a ripple limit file. 
        /// 
        /// (2) Loads a ripple limit definition from a specified file and assigns it to a trace with a specified name. 
        /// 
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Name of an existing trace in the active setup (string parameter) for which a ripple limit definition exists.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created ripple limit file. 
        /// 
        /// Notes:
        /// 
        /// (1) The default extension (manual control) for ripple limit files is *.ripple, although other extensions are allowed. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// 
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveRecallRippleLimit(int Operation_to_be_Performed, string Trace_Name, string File_Name)
        {
            int pInvokeResult = PInvoke.SaveRecallRippleLimit(this._handle, Operation_to_be_Performed, Trace_Name, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the start frequency for a frequency sweep which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Frequency">
        /// This control defines the start frequency for a frequency sweep which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 300.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetStartFrequency(int Channel, double Start_Frequency)
        {
            int pInvokeResult = PInvoke.SetStartFrequency(this._handle, Channel, Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the start frequency for a frequency sweep which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Frequency">
        /// This control returns the start frequency for a frequency sweep which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetStartFrequency(int Channel, out double Start_Frequency)
        {
            int pInvokeResult = PInvoke.GetStartFrequency(this._handle, Channel, out Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stop frequency for a frequency sweep which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:STOP
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Frequency">
        /// This control defines the stop frequency for a frequency sweep which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 4.0e9 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetStopFrequency(int Channel, double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.SetStopFrequency(this._handle, Channel, Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the stop frequency for a frequency sweep which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Frequency">
        /// This control returns the stop frequency for a frequency sweep which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetStopFrequency(int Channel, out double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.GetStopFrequency(this._handle, Channel, out Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the center of the measurement and display range for a frequency sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CENTer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Frequency">
        /// This control defines the center of the measurement and display range for a frequency sweep.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 4.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCenterFrequency(int Channel, double Center_Frequency)
        {
            int pInvokeResult = PInvoke.SetCenterFrequency(this._handle, Channel, Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the center of the measurement and display range for a frequency sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CENTer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Center_Frequency">
        /// This control returns the center of the measurement and display range for a frequency sweep.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCenterFrequency(int Channel, out double Center_Frequency)
        {
            int pInvokeResult = PInvoke.GetCenterFrequency(this._handle, Channel, out Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the width of the measurement and display range for a frequency sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:SPAN
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Span">
        /// This control defines the width of the measurement and display range for a frequency sweep.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 300.0e3 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencySpan(int Channel, double Span)
        {
            int pInvokeResult = PInvoke.SetFrequencySpan(this._handle, Channel, Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the width of the measurement and display range for a frequency sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:SPAN?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Span">
        /// This control returns the width of the measurement and display range for a frequency sweep.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencySpan(int Channel, out double Span)
        {
            int pInvokeResult = PInvoke.GetFrequencySpan(this._handle, Channel, out Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the power of the internal signal source. 
        /// 
        /// Note(s):
        /// (1) The setting is valid for all sweep types except power sweep.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate][:AMPlitude]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power">
        /// This control defines the power of the internal signal source.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// 
        /// Default Value: 0.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPower(int Channel, double Power)
        {
            int pInvokeResult = PInvoke.SetPower(this._handle, Channel, Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the power of the internal signal source. 
        /// 
        /// Note(s):
        /// (1) The setting is valid for all sweep types except power sweep.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate][:AMPlitude]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power">
        /// This control returns the power of the internal signal source.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPower(int Channel, out double Power)
        {
            int pInvokeResult = PInvoke.GetPower(this._handle, Channel, out Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the fixed (Continuous Wave, CW) frequency for all sweep types operating at fixed frequency (power sweep, time sweep, CW mode sweep). 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CW
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="CW_Frequency">
        /// This control defines the fixed (Continuous Wave, CW) frequency for all sweep types operating at fixed frequency (power sweep, time sweep, CW mode sweep).
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 1.0e9 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCWFrequency(int Channel, double CW_Frequency)
        {
            int pInvokeResult = PInvoke.SetCWFrequency(this._handle, Channel, CW_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the fixed (Continuous Wave, CW) frequency for all sweep types operating at fixed frequency (power sweep, time sweep, CW mode sweep). 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CW?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="CW_Frequency">
        /// This control returns the fixed (Continuous Wave, CW) frequency for all sweep types operating at fixed frequency (power sweep, time sweep, CW mode sweep).
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCWFrequency(int Channel, out double CW_Frequency)
        {
            int pInvokeResult = PInvoke.GetCWFrequency(this._handle, Channel, out CW_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the start power for a power sweep which is equal to the left edge of a Cartesian diagram. 
        /// 
        /// Note(s):
        /// (1) A power sweep must be active ([SENSe&lt;Ch&gt;:]SWEep:TYPE POWer) before this command can be used.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Power">
        /// This control defines the start power for a power sweep which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// 
        /// Default Value: -25.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetStartPower(int Channel, double Start_Power)
        {
            int pInvokeResult = PInvoke.SetStartPower(this._handle, Channel, Start_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the start power for a power sweep which is equal to the left edge of a Cartesian diagram. 
        /// 
        /// Note(s):
        /// (1) A power sweep must be active ([SENSe&lt;Ch&gt;:]SWEep:TYPE POWer) before this command can be used.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Power">
        /// This control returns the start power for a power sweep which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetStartPower(int Channel, out double Start_Power)
        {
            int pInvokeResult = PInvoke.GetStartPower(this._handle, Channel, out Start_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stop power for a power sweep which is equal to the right edge of a Cartesian diagram. 
        /// 
        /// Note(s):
        /// (1) A power sweep must be active ([SENSe&lt;Ch&gt;:]SWEep:TYPE POWer) before this command can be used.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STOP
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Power">
        /// This control defines the stop power for a power sweep which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// 
        /// Default Value: 0.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetStopPower(int Channel, double Stop_Power)
        {
            int pInvokeResult = PInvoke.SetStopPower(this._handle, Channel, Stop_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the stop power for a power sweep which is equal to the right edge of a Cartesian diagram. 
        /// 
        /// Note(s):
        /// (1) A power sweep must be active ([SENSe&lt;Ch&gt;:]SWEep:TYPE POWer) before this command can be used.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Power">
        /// This control returns the stop power for a power sweep which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetStopPower(int Channel, out double Stop_Power)
        {
            int pInvokeResult = PInvoke.GetStopPower(this._handle, Channel, out Stop_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a source port for the stimulus signal (Drive Port). The setting acts on the active trace. The effect of the drive port selection depends on the measurement parameter associated to the active trace. 
        /// 
        /// Note(s):
        /// 
        /// (1) If an S-parameter S&lt;out&gt;&lt;in&gt; is measured, the second port number index &lt;in&gt; (input port of the DUT = drive port of the analyzer) is set equal to the selected drive port: Drive port selection affects the measured quantity.  
        /// 
        /// (2) If a wave quantity or a ratio is measured, the drive port is independent from the measured quantity:
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Chn&gt;:]SWEep:SRCPort 1 | 2 | 3 | 4
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source_Port">
        /// This control defines the test port number of the analyzer.
        /// 
        /// Valid Range: 1 to 2, 3 or 4, depending on the analyzer model
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSourcePort(int Channel, int Source_Port)
        {
            int pInvokeResult = PInvoke.SetSourcePort(this._handle, Channel, Source_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a source port for the stimulus signal (Drive Port). The setting acts on the active trace. The effect of the drive port selection depends on the measurement parameter associated to the active trace. 
        /// 
        /// Note(s):
        /// 
        /// (1) If an S-parameter S&lt;out&gt;&lt;in&gt; is measured, the second port number index &lt;in&gt; (input port of the DUT = drive port of the analyzer) is set equal to the selected drive port: Drive port selection affects the measured quantity.  
        /// 
        /// (2) If a wave quantity or a ratio is measured, the drive port is independent from the measured quantity:
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Chn&gt;:]SWEep:SRCPort 1 | 2 | 3 | 4
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source_Port">
        /// This control defines the test port number of the analyzer.
        /// 
        /// Valid Range: 1 to 2, 3 or 4, depending on the analyzer model
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSourcePort(int Channel, out int Source_Port)
        {
            int pInvokeResult = PInvoke.GetSourcePort(this._handle, Channel, out Source_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the power bandwidth average.
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:SERVice:RFPower
        /// [SENSe&lt;Ch&gt;:]BANDwidth[:RESolution]
        /// [SENSe&lt;Ch&gt;:]AVERage[:STATe]
        /// [SENSe&lt;Ch&gt;:]AVERage:COUNt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="RF_State">
        /// This control turns the internal source power at all ports on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control defines the resolution bandwidth of the analyzer (Meas. Bandwidth).
        /// 
        /// Valid Range: 1.0e-6 Hz to 5.0e6 Hz
        /// 
        /// Default Value: 10.0e3
        /// 
        /// </param>
        /// <param name="Average_State">
        /// This control enables or disables the sweep average.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Average_Factor">
        /// This control defines the number of consecutive sweeps to be combined for the sweep average.
        /// 
        /// Valid Range: 1 to 1000
        /// 
        /// Default Value: 10
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigurePowerBandwidthAverage(int Channel, bool RF_State, double Meas_Bandwidth, bool Average_State, int Average_Factor)
        {
            int pInvokeResult = PInvoke.ConfigurePowerBandwidthAverage(this._handle, Channel, System.Convert.ToUInt16(RF_State), Meas_Bandwidth, System.Convert.ToUInt16(Average_State), Average_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets an attenuation factor for the wave received at test port no. The generated wave is attenuated automatically if step attenuators are available.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]POWer:ATTenuation ARECeiver | BRECeiver | CRECeiver | DRECeiver, &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port">
        /// This control selects the test port of the analyzer.
        /// 
        /// Valid Values:
        /// RSZVB_ATTEN_AREC (0) - Test Port 1
        /// RSZVB_ATTEN_BREC (1) - Test Port 2
        /// RSZVB_ATTEN_CREC (2) - Test Port 3
        /// RSZVB_ATTEN_DREC (3) - Test Port 4
        /// 
        /// Default Value: RSZVB_ATTEN_AREC (0)
        /// 
        /// </param>
        /// <param name="Attenuation_Factor">
        /// This control defines the attenuation factor for the received wave.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) The range depends on the analyzer/attenuator model, e.g. 0 dB to 35 dB for ZVA24/ZVA24-B31/32 [dB]. The analyzer rounds any entered value below the maximum attenuation to the closest 5-dB step.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReceiverStepAttenuators(int Channel, int Analyzer_Port, double Attenuation_Factor)
        {
            int pInvokeResult = PInvoke.SetReceiverStepAttenuators(this._handle, Channel, Analyzer_Port, Attenuation_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an attenuation factor for the wave received at test port no. &lt;Pt&gt;. The generated wave is attenuated automatically if step attenuators are available.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]POWer:ATTenuation? ARECeiver | BRECeiver | CRECeiver | DRECeiver
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port">
        /// This control selects the test port of the analyzer.
        /// 
        /// Valid Values:
        /// RSZVB_ATTEN_AREC (0) - Test Port 1
        /// RSZVB_ATTEN_BREC (1) - Test Port 2
        /// RSZVB_ATTEN_CREC (2) - Test Port 3
        /// RSZVB_ATTEN_DREC (3) - Test Port 4
        /// 
        /// Default Value: RSZVB_ATTEN_AREC (0)
        /// 
        /// </param>
        /// <param name="Attenuation_Factor">
        /// This control returns the attenuation factor for the received wave.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReceiverStepAttenuators(int Channel, int Analyzer_Port, out double Attenuation_Factor)
        {
            int pInvokeResult = PInvoke.GetReceiverStepAttenuators(this._handle, Channel, Analyzer_Port, out Attenuation_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets a fixed attenuation factor for the generated wave at test port no. &lt;Pt&gt;. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVA and ZVB instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ATTenuation &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the test port number.
        /// 
        /// Valid Range: 1 to the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Attenuation_Factor">
        /// This control defines the attenuation factor for the generated wave.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) Depending on the analyzer/attenuator model, e.g. 0 dB to 80 dB [dB]. UP and DOWN increment/decrement the attenuation in 10-dB steps. The analyzer rounds any entered value below the maximum attenuation to the closest step. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorStepAttenuators(int Channel, int Port, double Attenuation_Factor)
        {
            int pInvokeResult = PInvoke.SetGeneratorStepAttenuators(this._handle, Channel, Port, Attenuation_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets a fixed attenuation factor for the generated wave at test port no. &lt;Pt&gt;. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVA and ZVB instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ATTenuation?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the test port number.
        /// 
        /// Valid Range: 1 to the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Attenuation_Factor">
        /// This control returns the attenuation factor for the generated wave.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorStepAttenuators(int Channel, int Port, out double Attenuation_Factor)
        {
            int pInvokeResult = PInvoke.GetGeneratorStepAttenuators(this._handle, Channel, Port, out Attenuation_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets whether the attenuation factor for the generated wave at test port no. &lt;Pt&gt; is set manually or automatically. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVA and ZVB instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ATTenuation:AUTO ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the test port number.
        /// 
        /// Valid Range: 1 to the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Automatic_Attenuation">
        /// This control selects whether the attenuation factor for the generated wave at test port no. &lt;Pt&gt; is set manually or automatically.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - automatic generator attenuator setting
        /// 
        /// (2) OFF - manual entry of a fixed attenuation step 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutomaticGeneratorAttenuator(int Channel, int Port, bool Automatic_Attenuation)
        {
            int pInvokeResult = PInvoke.SetAutomaticGeneratorAttenuator(this._handle, Channel, Port, System.Convert.ToUInt16(Automatic_Attenuation));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets whether the attenuation factor for the generated wave at test port no. &lt;Pt&gt; is set manually or automatically. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVA and ZVB instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ATTenuation:AUTO?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the test port number.
        /// 
        /// Valid Range: 1 to the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Automatic_Attenuation">
        /// This control returns whether the attenuation factor for the generated wave at test port no. &lt;Pt&gt; is set manually or automatically.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) ON - automatic generator attenuator setting
        /// 
        /// (2) OFF - manual entry of a fixed attenuation step 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticGeneratorAttenuator(int Channel, int Port, out bool Automatic_Attenuation)
        {
            ushort Automatic_AttenuationAsUShort;
            int pInvokeResult = PInvoke.GetAutomaticGeneratorAttenuator(this._handle, Channel, Port, out Automatic_AttenuationAsUShort);
            Automatic_Attenuation = System.Convert.ToBoolean(Automatic_AttenuationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines how the attenuation factor for the generated wave at test port no. &lt;Pt&gt; is set. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVA and ZVB instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ATTenuation:MODE AUTO | MANual | LNOise
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the test port number.
        /// 
        /// Valid Range: 1 to the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Attenuation_Mode">
        /// This control defines how the attenuation factor for the generated wave at test port no. &lt;Pt&gt; is set.
        /// 
        /// Valid Values:
        /// RSZVB_ATTEN_MODE_AUTO (0) - Automatic
        /// RSZVB_ATTEN_MODE_MAN  (1) - Manual
        /// RSZVB_ATTEN_MODE_LNO  (2) - Low Noise
        /// 
        /// Default Value: RSZVB_ATTEN_MODE_AUTO (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorAttenuatorMode(int Channel, int Port, int Attenuation_Mode)
        {
            int pInvokeResult = PInvoke.SetGeneratorAttenuatorMode(this._handle, Channel, Port, Attenuation_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mode of the attenuation factor for the generated wave at test port no. &lt;Pt&gt;. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVA and ZVB instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ATTenuation:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the test port number.
        /// 
        /// Valid Range: 1 to the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Attenuation_Mode">
        /// This control returns the mode of the attenuation factor for the generated wave at test port no. &lt;Pt&gt;.
        /// 
        /// Valid Values:
        /// RSZVB_ATTEN_MODE_AUTO (0) - Automatic
        /// RSZVB_ATTEN_MODE_MAN  (1) - Manual
        /// RSZVB_ATTEN_MODE_LNO  (2) - Low Noise
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorAttenuatorMode(int Channel, int Port, out int Attenuation_Mode)
        {
            int pInvokeResult = PInvoke.GetGeneratorAttenuatorMode(this._handle, Channel, Port, out Attenuation_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function turns the internal source power at all ports on or off.
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:SERVice:RFPower
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="RF_State">
        /// This control turns the internal source power at all ports on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFState(bool RF_State)
        {
            int pInvokeResult = PInvoke.SetRFState(this._handle, System.Convert.ToUInt16(RF_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the internal source power at all ports.
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:SERVice:RFPower?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="RF_State">
        /// This control returns the state of internal source power at all ports.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFState(out bool RF_State)
        {
            ushort RF_StateAsUShort;
            int pInvokeResult = PInvoke.GetRFState(this._handle, out RF_StateAsUShort);
            RF_State = System.Convert.ToBoolean(RF_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the resolution bandwidth of the analyzer.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth[:RESolution]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control defines the resolution bandwidth of the analyzer (Meas. Bandwidth).
        /// 
        /// Valid Range: 1.0e-6 Hz to 5.0e6 Hz
        /// 
        /// Default Value: 10.0e3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasBandwidth(int Channel, double Meas_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetMeasBandwidth(this._handle, Channel, Meas_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the resolution bandwidth of the analyzer.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth[:RESolution]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control returns the resolution bandwidth of the analyzer (Meas. Bandwidth).
        /// 
        /// Valid Range: 1.0e-6 Hz to 5.0e6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasBandwidth(int Channel, out double Meas_Bandwidth)
        {
            int pInvokeResult = PInvoke.GetMeasBandwidth(this._handle, Channel, out Meas_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the selectivity of the IF filter for an unsegmented sweep. The value is also used for all segments of a segmented sweep, provided that separate selectivity setting is disabled ([SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:CONTrol OFF). 
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVA and R&amp;S ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:SELect NORMal | HIGH
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Meas_Bandwidth_Selectivity">
        /// This control defines the selectivity of the IF filter for an unsegmented sweep.
        /// 
        /// Valid Range: 
        /// RSZVB_SELECTIVITY_NORMAL  (0) - Normal
        /// RSZVB_SELECTIVITY_HIGH    (1) - High
        /// 
        /// Default Value: RSZVB_SELECTIVITY_NORMAL  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) NORMal - Use IF filter with normal selectivity and short settling time. 
        ///  
        /// (2) HIGH - Use IF filter with higher selectivity but larger settling time.
        ///  
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasBandwidthSelectivity(int Channel, int Meas_Bandwidth_Selectivity)
        {
            int pInvokeResult = PInvoke.SetMeasBandwidthSelectivity(this._handle, Channel, Meas_Bandwidth_Selectivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the selectivity of the IF filter for an unsegmented sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:SELect?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Meas_Bandwidth_Selectivity">
        /// This control returns the selectivity of the IF filter for an unsegmented sweep.
        /// 
        /// Valid Range: 
        /// RSZVB_BWIDTH_SELECT_NORM  (0) - Normal
        /// RSZVB_BWIDTH_SELECT_HIGH  (1) - High
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasBandwidthSelectivity(int Channel, out int Meas_Bandwidth_Selectivity)
        {
            int pInvokeResult = PInvoke.GetMeasBandwidthSelectivity(this._handle, Channel, out Meas_Bandwidth_Selectivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the sweep average.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]AVERage[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Average_State">
        /// This control enables or disables the sweep average.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAverageState(int Channel, bool Average_State)
        {
            int pInvokeResult = PInvoke.SetAverageState(this._handle, Channel, System.Convert.ToUInt16(Average_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the sweep average.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]AVERage[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Average_State">
        /// This control returns the state of the sweep average.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAverageState(int Channel, out bool Average_State)
        {
            ushort Average_StateAsUShort;
            int pInvokeResult = PInvoke.GetAverageState(this._handle, Channel, out Average_StateAsUShort);
            Average_State = System.Convert.ToBoolean(Average_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the number of consecutive sweeps to be combined for the sweep average.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]AVERage:COUNt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Average_Factor">
        /// This control defines the number of consecutive sweeps to be combined for the sweep average.
        /// 
        /// Valid Range: 1 to 1000
        /// 
        /// Default Value: 10
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAverageFactor(int Channel, int Average_Factor)
        {
            int pInvokeResult = PInvoke.SetAverageFactor(this._handle, Channel, Average_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of consecutive sweeps to be combined for the sweep average.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]AVERage:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Average_Factor">
        /// This control returns the number of consecutive sweeps to be combined for the sweep average.
        /// 
        /// Valid Range: 1 to 1000
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAverageFactor(int Channel, out int Average_Factor)
        {
            int pInvokeResult = PInvoke.GetAverageFactor(this._handle, Channel, out Average_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the number of the sweep which is currently measured. Use this command to monitor the progress of sweep averaging.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]AVERage:COUNt:CURRent?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Current_Sweep">
        /// Returns the number of the sweep which is currently measured. Use this command to monitor the progress of sweep averaging.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCurrentSweep(int Channel, out int Current_Sweep)
        {
            int pInvokeResult = PInvoke.GetCurrentSweep(this._handle, Channel, out Current_Sweep);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a new average cycle, clearing all previous results and thus eliminating their effect on the new cycle.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]AVERage:CLEar
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int RestartAverage(int Channel)
        {
            int pInvokeResult = PInvoke.RestartAverage(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects global or a port-specific resolution bandwidths.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:MODE PALL | PSPecific
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Bandwidth_Mode">
        /// Selects global or a port-specific resolution bandwidths.
        /// 
        /// Valid Values:
        /// RSZVB_MODE_PALL (0) - All Ports
        /// RSZVB_MODE_PSP  (1) - Port-specific
        /// 
        /// Default Value: RSZVB_MODE_PALL (0)
        /// 
        /// Note(s):
        /// 
        /// (1) All Ports - Global bandwidth; the bandwidth set via 
        /// rszvb_SetMeasBandwidth is used for all ports. 
        /// 
        /// (2) Port Specific - Port-specific bandwidth defined via 
        /// rszvb_SetPhysicalPortResolutionBandwidth (for physical analyzer ports) 
        /// or rszvb_SetGeneratorPortResolutionBandwidth (for external generators).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPartialMeasurementResolutionBandwidthMode(int Channel, int Bandwidth_Mode)
        {
            int pInvokeResult = PInvoke.SetPartialMeasurementResolutionBandwidthMode(this._handle, Channel, Bandwidth_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries resolution bandwidth mode.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Bandwidth_Mode">
        /// Returns bandwidth mode.
        /// 
        /// Valid Values:
        /// RSZVB_MODE_PALL (0) - All Ports
        /// RSZVB_MODE_PSP  (1) - Port-specific
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPartialMeasurementResolutionBandwidthMode(int Channel, out int Bandwidth_Mode)
        {
            int pInvokeResult = PInvoke.GetPartialMeasurementResolutionBandwidthMode(this._handle, Channel, out Bandwidth_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines the resolution bandwidth of the analyzer for all partial measurements where an external generator &lt;Gen&gt; is used as a source.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:GENerator&lt;Gen&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Port">
        /// Generator port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Resolution_Bandwidth">
        /// This control defines resolution bandwidth.
        /// 
        /// Valid Range: 
        /// 1.0 Hz to 30.0E+6 Hz
        /// 
        /// Default Value: 10.0E+3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPortResolutionBandwidth(int Channel, int Generator_Port, double Resolution_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetGeneratorPortResolutionBandwidth(this._handle, Channel, Generator_Port, Resolution_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the resolution bandwidth of the analyzer for all partial measurements where an external generator &lt;Gen&gt; is used as a source.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:GENerator&lt;Gen&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Port">
        /// Generator port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Resolution_Bandwidth">
        /// This control returns resolution bandwidth.
        /// 
        /// Valid Range: 
        /// 1.0 Hz to 30.0E+6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPortResolutionBandwidth(int Channel, int Generator_Port, out double Resolution_Bandwidth)
        {
            int pInvokeResult = PInvoke.GetGeneratorPortResolutionBandwidth(this._handle, Channel, Generator_Port, out Resolution_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines the resolution bandwidth of the analyzer for all partial measurements where an analyzer source port &lt;Pt&gt; is used.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:PORT&lt;Pt&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port">
        /// Physical analyzer port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Resolution_Bandwidth">
        /// This control defines resolution bandwidth.
        /// 
        /// Valid Range: 
        /// 1.0 Hz to 30.0E+6 Hz
        /// 
        /// Default Value: 10.0E+3 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPhysicalPortResolutionBandwidth(int Channel, int Analyzer_Port, double Resolution_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetPhysicalPortResolutionBandwidth(this._handle, Channel, Analyzer_Port, Resolution_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the resolution bandwidth of the analyzer for all partial measurements where an analyzer source port &lt;Pt&gt; is used.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]BANDwidth|BWIDth[:RESolution]:PORT&lt;Pt&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port">
        /// Physical analyzer port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Resolution_Bandwidth">
        /// This control returns resolution bandwidth.
        /// 
        /// Valid Range: 
        /// 1.0 Hz to 30.0E+6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPhysicalPortResolutionBandwidth(int Channel, int Analyzer_Port, out double Resolution_Bandwidth)
        {
            int pInvokeResult = PInvoke.GetPhysicalPortResolutionBandwidth(this._handle, Channel, Analyzer_Port, out Resolution_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the sweep type, i.e. the sweep variable (frequency/power/time) and the position of the sweep points across the sweep range.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:TYPE LINear | LOGarithmic | SEGMent | POWer | CW | POINt | PULSe | IAMPlitude | IPHase
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control selects the sweep type, i.e. the sweep variable (frequency/power/time) and the position of the sweep points across the sweep range.
        /// 
        /// Valid Values:
        /// RSZVB_SWEEP_LIN    (0) - Lin. Frequency
        /// RSZVB_SWEEP_LOG    (1) - Log. Frequency
        /// RSZVB_SWEEP_SEG    (2) - Segmented Frequency
        /// RSZVB_SWEEP_POW    (3) - Power
        /// RSZVB_SWEEP_TIM    (4) - Time
        /// RSZVB_SWEEP_CW     (5) - CW Mode
        /// RSZVB_SWEEP_PULSE  (6) - Pulse
        /// RSZVB_SWEEP_IAMP   (7) - Amplitude Imbalance Sweep
        /// RSZVB_SWEEP_IPH    (8) - Phase Imbalance Sweep
        /// 
        /// Default Value: RSZVB_SWEEP_LIN (0)
        /// 
        /// Notes:
        ///  
        /// (1) Lin. Frequency Sweep:
        /// Frequency sweep at constant source power (SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate][:AMPlitude]). The stimulus frequency ([SENSe&lt;Ch&gt;:]FREQuency:...) is swept in equidistant steps over the frequency range. In a Cartesian diagram, the x-axis is a linear frequency axis.
        /// 
        /// (2) Log. Frequency Sweep:
        /// The frequency is swept in equidistant steps on a logarithmic scale. In a Cartesian diagram, the x-axis is a logarithmic frequency axis.
        /// 
        /// (3) Segmented Frequency Sweep:
        /// The sweep range is composed of several continuous frequency ranges or single frequency points defined by means of the commands in the [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;... subsystem.
        ///  
        /// (4) Power Sweep:
        /// The measurement is performed at constant frequency (SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CW|FIXed) but with variable generator power that is swept in linear, equidistant steps over a continuous range (SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STARt, SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STOP). In a Cartesian diagram, the x-axis is a dB-linear power axis.
        ///  
        /// (5) Time Sweep:
        /// The measurement is performed at constant frequency (SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CW|FIXed) and source power (SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate][:AMPlitude]) and repeated over a specified period of time at constant time intervals.   
        ///  
        /// (6) CW Mode Sweep:
        /// CW Mode sweep, time sweep triggered according to the current trigger settings.
        /// 
        /// (7) Pulse:
        /// Pulse profile mode, configured via SENSe:PULSe...
        /// 
        /// (8) Amplitude Imbalance Sweep:
        /// Amplitude imbalance sweep, configured via SOURce:TDIF:IMBalance:AMPLitude...
        /// 
        /// (9) Phase Imbalance Sweep:
        /// Phase imbalance sweep, configured via SOURce:TDIF:IMBalance:PHASe...
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepType(int Channel, int Sweep_Type)
        {
            int pInvokeResult = PInvoke.SetSweepType(this._handle, Channel, Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the sweep type, i.e. the sweep variable (frequency/power/time) and the position of the sweep points across the sweep range.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:TYPE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control returns the sweep type, i.e. the sweep variable (frequency/power/time) and the position of the sweep points across the sweep range.
        /// 
        /// Valid Values:
        /// RSZVB_SWEEP_LIN    (0) - Lin. Frequency
        /// RSZVB_SWEEP_LOG    (1) - Log. Frequency
        /// RSZVB_SWEEP_SEG    (2) - Segmented Frequency
        /// RSZVB_SWEEP_POW    (3) - Power
        /// RSZVB_SWEEP_TIM    (4) - Time
        /// RSZVB_SWEEP_CW     (5) - CW Mode
        /// RSZVB_SWEEP_PULSE  (6) - Pulse
        /// RSZVB_SWEEP_IAMP   (7) - Amplitude Imbalance Sweep
        /// RSZVB_SWEEP_IPH    (8) - Phase Imbalance Sweep
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepType(int Channel, out int Sweep_Type)
        {
            int pInvokeResult = PInvoke.GetSweepType(this._handle, Channel, out Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function inserts a new sweep segment with specific channel settings. The new segment must not overlap with any of the existing segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:INSert
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:INSert:SELect SWTime | DWELl
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Start_Frequency">
        /// This control defines the Start frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Stop_Frequency">
        /// This control defines the Stop frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Number_Of_Points">
        /// This control defines the total number of measurement Points in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 2 to 20001
        /// 
        /// Default Value: 51
        /// 
        /// </param>
        /// <param name="Power">
        /// This control defines the power of the internal signal source in segment.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// 
        /// Default Value: 0.0 dBm
        /// 
        /// </param>
        /// <param name="Sweep_Time_Select">
        /// This control defines whether the sweep time of a new segment, i.e. numeric parameter no. 9 of the function, is entered as a segment sweep time or as a meas. delay.
        /// 
        /// Valid Values:
        /// RSZVB_SEG_TIME  (0) - Time
        /// RSZVB_SEG_POINT (1) - Point
        /// 
        /// Default Value: RSZVB_SEG_TIME (0)
        /// </param>
        /// <param name="Time">
        /// This control sets the duration of the sweep in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate sweep time setting in all sweep segments.
        /// 
        /// Valid Range: &lt;= 1000 s
        /// 
        /// Default Value: 21 s
        /// 
        /// Note(s):
        /// 
        /// (1) Value 0.0 means automatic sweep time setting in the segment, which is equivalent to the minimum sweep time possible.
        /// 
        /// (2) In the setting &lt;Sweep Time Select&gt; = Point Delay, this parameter is replaced by &lt;Point Delay&gt;.
        /// </param>
        /// <param name="Point_Delay">
        /// This control defines the delay time for each partial measurement in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0 s to 2.5e+3 s
        /// 
        /// Default Value: 0 s
        /// 
        /// Note(s):
        /// 
        /// (1) In the setting &lt;Sweep Time Select&gt; = Time, this parameter is replaced by &lt;Time&gt;.
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control defines the resolution bandwidth of the analyzer (Meas. Bandwidth).
        /// 
        /// Valid Range: 1.0e-6 Hz to 5.0e6 Hz
        /// 
        /// Default Value: 10.0e3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int InsertNewSegment(int Channel, int Segment, double Start_Frequency, double Stop_Frequency, int Number_Of_Points, double Power, int Sweep_Time_Select, double Time, double Point_Delay, double Meas_Bandwidth)
        {
            int pInvokeResult = PInvoke.InsertNewSegment(this._handle, Channel, Segment, Start_Frequency, Stop_Frequency, Number_Of_Points, Power, Sweep_Time_Select, Time, Point_Delay, Meas_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function re-defines a sweep segment with specific channel settings (Insert New Segment). The segment replaces an existing segment &lt;Segment&gt; in the segment list. The modified segment must not overlap with any of the existing segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:DEFine
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:INSert:SELect SWTime | DWELl
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Start_Frequency">
        /// This control defines the Start frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Stop_Frequency">
        /// This control defines the Stop frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <param name="Number_Of_Points">
        /// This control defines the total number of measurement Points in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 2 to 20001
        /// 
        /// Default Value: 51
        /// 
        /// </param>
        /// <param name="Power">
        /// This control defines the power of the internal signal source in segment.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// 
        /// Default Value: 0.0 dBm
        /// 
        /// </param>
        /// <param name="Sweep_Time_Select">
        /// This control defines whether the sweep time of a new segment, i.e. numeric parameter no. 9 of the function, is entered as a segment sweep time or as a meas. delay.
        /// 
        /// Valid Values:
        /// RSZVB_SEG_TIME  (0) - Time
        /// RSZVB_SEG_POINT (1) - Point
        /// 
        /// Default Value: RSZVB_SEG_TIME (0)
        /// </param>
        /// <param name="Time">
        /// This control sets the duration of the sweep in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate sweep time setting in all sweep segments.
        /// 
        /// Valid Range: &lt;= 1000 s
        /// 
        /// Default Value: 21 s
        /// 
        /// Note(s):
        /// 
        /// (1) Value 0.0 means automatic sweep time setting in the segment, which is equivalent to the minimum sweep time possible.
        /// 
        /// (2) In the setting &lt;Sweep Time Select&gt; = Point Delay, this parameter is replaced by &lt;Point Delay&gt;.
        /// </param>
        /// <param name="Point_Delay">
        /// This control defines the delay time for each partial measurement in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0 s to 2.5e+3 s
        /// 
        /// Default Value: 0 s
        /// 
        /// Note(s):
        /// 
        /// (1) In the setting &lt;Sweep Time Select&gt; = Time, this parameter is replaced by &lt;Time&gt;.
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control defines the resolution bandwidth of the analyzer (Meas. Bandwidth).
        /// 
        /// Valid Range: 1.0e-6 Hz to 5.0e6 Hz
        /// 
        /// Default Value: 10.0e3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int RedefineSegment(int Channel, int Segment, double Start_Frequency, double Stop_Frequency, int Number_Of_Points, double Power, int Sweep_Time_Select, double Time, double Point_Delay, double Meas_Bandwidth)
        {
            int pInvokeResult = PInvoke.RedefineSegment(this._handle, Channel, Segment, Start_Frequency, Stop_Frequency, Number_Of_Points, Power, Sweep_Time_Select, Time, Point_Delay, Meas_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function inserts a new sweep segment using default channel settings). The added segment covers the frequency interval between the maximum frequency of the existing sweep segments and the stop frequency of the entire sweep range.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:ADD
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AddNewSegment(int Channel, int Segment)
        {
            int pInvokeResult = PInvoke.AddNewSegment(this._handle, Channel, Segment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the specified (single) sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:DELete
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteSelectedSegment(int Channel, int Segment)
        {
            int pInvokeResult = PInvoke.DeleteSelectedSegment(this._handle, Channel, Segment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all sweep segments in the channel.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent:DELete:ALL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteAllSegments(int Channel)
        {
            int pInvokeResult = PInvoke.DeleteAllSegments(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of sweep segments in the channel including all segments that are switched off.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Count">
        /// This control returns the number of sweep segments in the channel including all segments that are switched off.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentsCount(int Channel, out int Count)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentsCount(this._handle, Channel, out Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates or deactivates the sweep segment &lt;Segment&gt;. Sweep points belonging to inactive segments only are not measured.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control activates or deactivates the sweep segment &lt;Segment&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentState(int Channel, int Segment, bool State)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentState(this._handle, Channel, Segment, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the sweep segment &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the state of the sweep segment &lt;Segment&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentState(int Channel, int Segment, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentState(this._handle, Channel, Segment, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the Start frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:FREQuency:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Start_Frequency">
        /// This control defines the Start frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentStartFrequency(int Channel, int Segment, double Start_Frequency)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentStartFrequency(this._handle, Channel, Segment, Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the Start frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:FREQuency:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Start_Frequency">
        /// This control returns the Start frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentStartFrequency(int Channel, int Segment, out double Start_Frequency)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentStartFrequency(this._handle, Channel, Segment, out Start_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the Stop frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:FREQuency:STOP
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Stop_Frequency">
        /// This control defines the Stop frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0 Hz
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentStopFrequency(int Channel, int Segment, double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentStopFrequency(this._handle, Channel, Segment, Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the Stop frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:FREQuency:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Stop_Frequency">
        /// This control returns the Stop frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentStopFrequency(int Channel, int Segment, out double Stop_Frequency)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentStopFrequency(this._handle, Channel, Segment, out Stop_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the total number of measurement Points in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:POINts
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Number_Of_Points">
        /// This control defines the total number of measurement Points in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 2 to 20001
        /// 
        /// Default Value: 51
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentNumberOfPoints(int Channel, int Segment, int Number_Of_Points)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentNumberOfPoints(this._handle, Channel, Segment, Number_Of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the total number of measurement Points in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:POINts?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Number_Of_Points">
        /// This control returns the total number of measurement Points in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 2 to 20001
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentNumberOfPoints(int Channel, int Segment, out int Number_Of_Points)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentNumberOfPoints(this._handle, Channel, Segment, out Number_Of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the Power of the internal signal source in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate power control in all sweep segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:POWer[:LEVel]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power">
        /// This control defines the Power of the internal signal source in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// 
        /// Default Value: -10.0 dBm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentPower(int Channel, int Segment, double Power)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentPower(this._handle, Channel, Segment, Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the Power of the internal signal source in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:POWer[:LEVel]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power">
        /// This control returns the Power of the internal signal source in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: -40.0 to 10.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentPower(int Channel, int Segment, out double Power)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentPower(this._handle, Channel, Segment, out Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether or not the Power can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:POWer[:LEVel]:CONTrol
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power">
        /// This control defines whether or not the Power can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentIndependentPower(int Channel, int Segment, bool Power)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentIndependentPower(this._handle, Channel, Segment, System.Convert.ToUInt16(Power));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether or not the Power can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:POWer[:LEVel]:CONTrol?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Power">
        /// This control returns whether or not the Power can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentIndependentPower(int Channel, int Segment, out bool Power)
        {
            ushort PowerAsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentIndependentPower(this._handle, Channel, Segment, out PowerAsUShort);
            Power = System.Convert.ToBoolean(PowerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the resolution bandwidth of the analyzer in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate bandwidth setting in all sweep segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control defines the resolution bandwidth of the analyzer (Meas. Bandwidth).
        /// 
        /// Valid Range: 1.0e-6 Hz to 5.0e6 Hz
        /// 
        /// Default Value: 10.0e3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentMeasBandwidth(int Channel, int Segment, double Meas_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentMeasBandwidth(this._handle, Channel, Segment, Meas_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the resolution bandwidth of the analyzer in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate bandwidth setting in all sweep segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control returns the resolution bandwidth of the analyzer (Meas. Bandwidth).
        /// 
        /// Valid Range: 1.0e-6 Hz to 5.0e6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentMeasBandwidth(int Channel, int Segment, out double Meas_Bandwidth)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentMeasBandwidth(this._handle, Channel, Segment, out Meas_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether or not the Meas. Bandwidth can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:CONTrol
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control defines whether or not the Meas. Bandwidth can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentIndependentBandwidth(int Channel, int Segment, bool Meas_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentIndependentBandwidth(this._handle, Channel, Segment, System.Convert.ToUInt16(Meas_Bandwidth));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether or not the Meas. Bandwidth can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:CONTrol?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Meas_Bandwidth">
        /// This control returns whether or not the Meas. Bandwidth can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentIndependentBandwidth(int Channel, int Segment, out bool Meas_Bandwidth)
        {
            ushort Meas_BandwidthAsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentIndependentBandwidth(this._handle, Channel, Segment, out Meas_BandwidthAsUShort);
            Meas_Bandwidth = System.Convert.ToBoolean(Meas_BandwidthAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the Selectivity in sweep segment no. &lt;Seg&gt;. At the same time, the command activates separate selectivity setting in all sweep segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:SELect NORMal | HIGH
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Selectivity">
        /// This control selects the selectivity in sweep segment no. &lt;Seg&gt;. 
        /// 
        /// Valid Values:
        /// RSZVB_SELECTIVITY_NORMAL (0) - Normal
        /// RSZVB_SELECTIVITY_HIGH   (1) - High
        /// 
        /// Default Value: RSZVB_SELECTIVITY_NORMAL (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentSelectivity(int Channel, int Segment, int Selectivity)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentSelectivity(this._handle, Channel, Segment, Selectivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Selectivity in sweep segment no. &lt;Seg&gt;. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:SELect?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Selectivity">
        /// This control returns the selectivity in sweep segment no. &lt;Seg&gt;. 
        /// 
        /// Valid Values:
        /// RSZVB_SELECTIVITY_NORMAL (0) - Normal
        /// RSZVB_SELECTIVITY_HIGH   (1) - High
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentSelectivity(int Channel, int Segment, out int Selectivity)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentSelectivity(this._handle, Channel, Segment, out Selectivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether or not the selectivity can be set independently for each sweep segment.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:SELect:CONTrol
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Selectivity">
        /// This control defines whether or not the selectivity can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - The selectivity can be set independently for each sweep segment. 
        /// 
        /// (2) OFF - The selectivity in all sweep segments is equal to the selectivity for unsegmented sweeps.
        /// 
        /// (3) The parameter is automatically switched to ON when a bandwidth is entered using [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:SELect.  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentIndependentSelectivity(int Channel, int Segment, bool Selectivity)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentIndependentSelectivity(this._handle, Channel, Segment, System.Convert.ToUInt16(Selectivity));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether or not the selectivity can be set independently for each sweep segment.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:BWIDth[:RESolution]:SELect:CONTrol?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Selectivity">
        /// This control queries whether or not the selectivity can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentIndependentSelectivity(int Channel, int Segment, out bool Selectivity)
        {
            ushort SelectivityAsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentIndependentSelectivity(this._handle, Channel, Segment, out SelectivityAsUShort);
            Selectivity = System.Convert.ToBoolean(SelectivityAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the duration of the sweep in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate sweep time setting in all sweep segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:TIME
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time">
        /// This control sets the duration of the sweep in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate sweep time setting in all sweep segments.
        /// 
        /// Valid Range: &lt;= 1000 s
        /// 
        /// Default Value: 21 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentSweepTime(int Channel, int Segment, double Time)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentSweepTime(this._handle, Channel, Segment, Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the duration of the sweep in sweep segment no. &lt;Segment&gt;. At the same time, the command activates separate sweep time setting in all sweep segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:TIME?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time">
        /// This control returns the duration of the sweep in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: &lt;= 1000 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentSweepTime(int Channel, int Segment, out double Time)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentSweepTime(this._handle, Channel, Segment, out Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether or not the Sweep Time can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:TIME:CONTrol
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time">
        /// This control defines whether or not the Sweep Time can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentIndependentTime(int Channel, int Segment, bool Time)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentIndependentTime(this._handle, Channel, Segment, System.Convert.ToUInt16(Time));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether or not the Sweep Time can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:TIME:CONTrol?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Time">
        /// This control returns whether or not the Sweep Time can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentIndependentTime(int Channel, int Segment, out bool Time)
        {
            ushort TimeAsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentIndependentTime(this._handle, Channel, Segment, out TimeAsUShort);
            Time = System.Convert.ToBoolean(TimeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the delay time for each partial measurement in sweep segment no. &lt;Segment&gt;
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:DWELl
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Point_Delay">
        /// This control defines the delay time for each partial measurement in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0 s to 2.5e+3 s
        /// 
        /// Default Value: 0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentPointDelay(int Channel, int Segment, double Point_Delay)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentPointDelay(this._handle, Channel, Segment, Point_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the delay time for each partial measurement in sweep segment no. &lt;Segment&gt;
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:DWELl?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Point_Delay">
        /// This control returns the delay time for each partial measurement in sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0 s to 2.5e+3 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentPointDelay(int Channel, int Segment, out double Point_Delay)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentPointDelay(this._handle, Channel, Segment, out Point_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether or not the Point Delay can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:DWELl:CONTrol
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Point_Delay">
        /// This control defines whether or not the Point Delay can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentIndependentPointDelay(int Channel, int Segment, bool Point_Delay)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentIndependentPointDelay(this._handle, Channel, Segment, System.Convert.ToUInt16(Point_Delay));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether or not the Point Delay can be set independently for each sweep segment.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:DWELl:CONTrol?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Point_Delay">
        /// This control returns whether or not the Point Delay can be set independently for each sweep segment.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentIndependentPointDelay(int Channel, int Segment, out bool Point_Delay)
        {
            ushort Point_DelayAsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentIndependentPointDelay(this._handle, Channel, Segment, out Point_DelayAsUShort);
            Point_Delay = System.Convert.ToBoolean(Point_DelayAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables segment bits for the sweep segments in channel no. &lt;Ch&gt;.
        /// 
        /// Remote-control command(s):
        /// OUTPut&lt;Ch&gt;:UPORt:SEGMent&lt;Seg&gt;:STATe ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control enables or disables segment bits for the sweep segments in channel no. &lt;Ch&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentBitsState(int Channel, bool State)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentBitsState(this._handle, Channel, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the segment bits for the sweep segments in channel no. &lt;Ch&gt;.
        /// 
        /// Remote-control command(s):
        /// OUTPut&lt;Ch&gt;:UPORt:SEGMent&lt;Seg&gt;:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the state of the segment bits for the sweep segments in channel no. &lt;Ch&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentBitsState(int Channel, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentBitsState(this._handle, Channel, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets four independent output signals at the USER CONTROL connector (lines 8, 9, 10, 11). The output signals are 3.3 V TTL signals which can be used to differentiate between up to 16 independent analyzer states for each channel.
        /// 
        /// OUTPut&lt;Ch&gt;:UPORt:SEGMent&lt;Seg&gt;[:VALue]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Bit_0">
        /// This control sets the bit 0 - output signal at pin 8.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Bit_1">
        /// This control sets the bit 1 - output signal at pin 9.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Bit_2">
        /// This control sets the bit 2 - output signal at pin 10.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Bit_3">
        /// This control sets the bit 3 - output signal at pin 11.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSegmentBitValues(int Channel, int Segment, bool Bit_0, bool Bit_1, bool Bit_2, bool Bit_3)
        {
            int pInvokeResult = PInvoke.SetSweepSegmentBitValues(this._handle, Channel, Segment, System.Convert.ToUInt16(Bit_0), System.Convert.ToUInt16(Bit_1), System.Convert.ToUInt16(Bit_2), System.Convert.ToUInt16(Bit_3));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns four independent output signals at the USER CONTROL connector (lines 8, 9, 10, 11). 
        /// 
        /// OUTPut&lt;Ch&gt;:UPORt:SEGMent&lt;Seg&gt;[:VALue]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Bit_0">
        /// This control returns the bit 0 - output signal at pin 8.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <param name="Bit_1">
        /// This control returns the bit 1 - output signal at pin 9.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <param name="Bit_2">
        /// This control returns the bit 2 - output signal at pin 10.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <param name="Bit_3">
        /// This control returns the bit 3 - output signal at pin 11.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentBitValues(int Channel, int Segment, out bool Bit_0, out bool Bit_1, out bool Bit_2, out bool Bit_3)
        {
            ushort Bit_0AsUShort;
            ushort Bit_1AsUShort;
            ushort Bit_2AsUShort;
            ushort Bit_3AsUShort;
            int pInvokeResult = PInvoke.GetSweepSegmentBitValues(this._handle, Channel, Segment, out Bit_0AsUShort, out Bit_1AsUShort, out Bit_2AsUShort, out Bit_3AsUShort);
            Bit_0 = System.Convert.ToBoolean(Bit_0AsUShort);
            Bit_1 = System.Convert.ToBoolean(Bit_1AsUShort);
            Bit_2 = System.Convert.ToBoolean(Bit_2AsUShort);
            Bit_3 = System.Convert.ToBoolean(Bit_3AsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the center frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:FREQuency:CENTer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Center_Frequency">
        /// This control returns the center frequency of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0.0 to 8.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentCenterFrequency(int Channel, int Segment, out double Center_Frequency)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentCenterFrequency(this._handle, Channel, Segment, out Center_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the width of the frequency range of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:FREQuency:SPAN?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Frequency_Span">
        /// This control returns the width of the frequency range of sweep segment no. &lt;Segment&gt;.
        /// 
        /// Valid Range: 0.0 to 8.0e9 (depends on the model)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSegmentFrequencySpan(int Channel, int Segment, out double Frequency_Span)
        {
            int pInvokeResult = PInvoke.GetSweepSegmentFrequencySpan(this._handle, Channel, Segment, out Frequency_Span);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves the sweep segment definition of a specified channel to a sweep segment file.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:SEGMent &lt;Ch&gt;, '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the created sweep segment file. The default extension (manual control) for sweep segment files is *.seglist, although other extensions are allowed. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveSegment(int Channel, string File_Name)
        {
            int pInvokeResult = PInvoke.SaveSegment(this._handle, Channel, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads a sweep segment definition from a specified file and assigns it to a specified channel.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:SEGMent &lt;Ch&gt;,'&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the sweep segment file to be loaded. The default extension (manual control) for sweep segment files is *.seglist, although other extensions are allowed. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadSegment(int Channel, string File_Name)
        {
            int pInvokeResult = PInvoke.LoadSegment(this._handle, Channel, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the analyzer supports overlapping sweep segments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:OVERlap?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Segment">
        /// Sweep segment number. Segment numbers must be sequential. The specified segment number must be smaller or equal to the number of existing segments plus 1. Moreover, segment numbers must selected such that the corresponding frequency ranges are in ascending order. 
        /// If one or more sweep segments with segment numbers &lt;Segment&gt; or larger exist in the current channel, then all these existing segment numbers are incremented by 1 and the new segment is inserted as segment no. &lt;Segment&gt;.
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Overlapping">
        /// This control queries whether the analyzer supports overlapping sweep segments. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - OFF
        /// VI_TRUE  (1) - ON
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryOverlappingSweepSegments(int Segment, out bool Overlapping)
        {
            ushort OverlappingAsUShort;
            int pInvokeResult = PInvoke.QueryOverlappingSweepSegments(this._handle, Segment, out OverlappingAsUShort);
            Overlapping = System.Convert.ToBoolean(OverlappingAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the total duration of the segmented sweep, calculated as the sum of the sweep times of the individual segments ([SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:TIME).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SEGMent&lt;Seg&gt;:SWEep:TIME:SUM?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Time">
        /// Segment sweep time. 
        /// 
        /// 
        ///  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QuerySumOfSweepSegmentsTime(int Channel, out double Sweep_Time)
        {
            int pInvokeResult = PInvoke.QuerySumOfSweepSegmentsTime(this._handle, Channel, out Sweep_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the start time of the displayed time range relative to the trigger time.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:TIME:STARt &lt;start&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Start">
        /// This control sets the start time of the displayed time range relative to the trigger time.
        /// 
        /// Valid Values:
        /// -0.003 s to +0.002999975 s
        /// 
        /// Default Value: -10.0e-6 seconds
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 50 ns. The width of the displayed time range must be between 25 ns and 3 s.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseTimeStart(int Channel, double Time_Start)
        {
            int pInvokeResult = PInvoke.SetPulseTimeStart(this._handle, Channel, Time_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the start time of the displayed time range relative to the trigger time.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:TIME:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Start">
        /// This control gets the start time of the displayed time range relative to the trigger time.
        /// 
        /// Valid Values:
        /// -0.003 s to +0.002999975 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTimeStart(int Channel, out double Time_Start)
        {
            int pInvokeResult = PInvoke.GetPulseTimeStart(this._handle, Channel, out Time_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the stop time of the displayed time range relative to the trigger time.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:TIME:STOP &lt;stop&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Stop">
        /// This control sets the stop time of the displayed time range relative to the trigger time.
        /// 
        /// Valid Values:
        /// -0.002999975 s to +0.003 s
        /// 
        /// Default Value: 100.0e-6 seconds
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 50 ns. The width of the displayed time range must be between 25 ns and 3 s.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseTimeStop(int Channel, double Time_Stop)
        {
            int pInvokeResult = PInvoke.SetPulseTimeStop(this._handle, Channel, Time_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the stop time of the displayed time range relative to the trigger time.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:TIME:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Stop">
        /// This control gets the stop time of the displayed time range relative to the trigger time.
        /// 
        /// Valid Values:
        /// -0.002999975 s to +0.003 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTimeStop(int Channel, out double Time_Stop)
        {
            int pInvokeResult = PInvoke.GetPulseTimeStop(this._handle, Channel, out Time_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the IF bandwidth for pulse profile measurements.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:TIME:BWIDth[:RESolution] &lt;bandwidth&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Bandwidth">
        /// This control sets the IF bandwidth for pulse profile measurements.
        /// 
        /// Valid Values:
        /// 100.0e+3 Hz to 10.0e+6 Hz 
        /// 
        /// Default Value: 10.0e+6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseTimeBandwidth(int Channel, double Time_Bandwidth)
        {
            int pInvokeResult = PInvoke.SetPulseTimeBandwidth(this._handle, Channel, Time_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the IF bandwidth for pulse profile measurements.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:TIME:BWIDth[:RESolution]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Time_Bandwidth">
        /// This control gets the IF bandwidth for pulse profile measurements.
        /// 
        /// Valid Values:
        /// 100.0e+3 Hz to 10.0e+6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTimeBandwidth(int Channel, out double Time_Bandwidth)
        {
            int pInvokeResult = PInvoke.GetPulseTimeBandwidth(this._handle, Channel, out Time_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function couples the section limits for averaging (and the section limit lines) for all receivers and source ports and in all channels. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:COUPled[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Couple_Limits">
        /// This control selects the limits coupled or uncoupled.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseCoupledSectionLimitLinesState(int Channel, bool Couple_Limits)
        {
            int pInvokeResult = PInvoke.SetPulseCoupledSectionLimitLinesState(this._handle, Channel, System.Convert.ToUInt16(Couple_Limits));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of coupling the section limits for averaging (and the section limit lines) for all receivers and source ports and in all channels. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:COUPled[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Couple_Limits">
        /// This control returns the state of teh coupling limits.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseCoupledSectionLimitLinesState(int Channel, out bool Couple_Limits)
        {
            ushort Couple_LimitsAsUShort;
            int pInvokeResult = PInvoke.GetPulseCoupledSectionLimitLinesState(this._handle, Channel, out Couple_LimitsAsUShort);
            Couple_Limits = System.Convert.ToBoolean(Couple_LimitsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies whether the wave quantity is displayed as measured or whether it is averaged. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:MODE NORMal | MEAN
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:MODE NORMal | MEAN
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:MODE NORMal | MEAN
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:MODE NORMal | MEAN
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Evaluation_Mode">
        /// This control specifies whether the wave quantity is displayed as measured or whether it is averaged.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_MODE_NORMAL (0) - Normal
        /// RSZVB_PULSE_MODE_MEAN   (1) - Mean
        /// 
        /// Default Value: RSZVB_PULSE_MODE_NORMAL (0)
        /// 
        /// Note(s):
        /// 
        /// (1) NORMal - wave quantity is as measured (pulse shape) 
        /// 
        /// (2) MEAN - wave quantity is replaced by its mean value (magnitude and phase) averaged over a configurable time interval
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseEvaluationMode(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, int Evaluation_Mode)
        {
            int pInvokeResult = PInvoke.SetPulseEvaluationMode(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, Evaluation_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the wave quantity is displayed as measured or whether it is averaged. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:MODE?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:MODE?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:MODE?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Evaluation_Mode">
        /// This control returns whether the wave quantity is displayed as measured or whether it is averaged.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_MODE_NORMAL (0) - Normal
        /// RSZVB_PULSE_MODE_MEAN   (1) - Mean
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) NORMal - wave quantity is as measured (pulse shape) 
        /// 
        /// (2) MEAN - wave quantity is replaced by its mean value (magnitude and phase) averaged over a configurable time interval
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseEvaluationMode(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out int Evaluation_Mode)
        {
            int pInvokeResult = PInvoke.GetPulseEvaluationMode(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, out Evaluation_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the start time of the averaging section for the wave quantity.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STARt &lt;section_start&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STARt &lt;section_start&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STARt &lt;section_start&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STARt &lt;section_start&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Evaluation_Start_Time">
        /// This control sets the start time of the averaging section.
        /// 
        /// Valid Values:
        /// -0.003 s to +0.002999975 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 50 ns. The width of the averaging section must be between 25 ns and 3 s.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseEvaluationSectionStart(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, double Evaluation_Start_Time)
        {
            int pInvokeResult = PInvoke.SetPulseEvaluationSectionStart(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, Evaluation_Start_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start time of the averaging section for the wave quantity.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STARt?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STARt?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STARt?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Evaluation_Start_Time">
        /// This control gets the start time of the averaging section.
        /// 
        /// Valid Values:
        /// -0.003 s to +0.002999975 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseEvaluationSectionStart(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out double Evaluation_Start_Time)
        {
            int pInvokeResult = PInvoke.GetPulseEvaluationSectionStart(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, out Evaluation_Start_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stop time of the averaging section for the wave quantity.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STOP &lt;section_stop&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STOP &lt;section_stop&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STOP &lt;section_stop&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STOP &lt;section_stop&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Evaluation_Stop_Time">
        /// This control sets the stop time of the averaging section.
        /// 
        /// Valid Values:
        /// -0.002999975 s to +0.003 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 50 ns. The width of the averaging section must be between 25 ns and 3 s.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseEvaluationSectionStop(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, double Evaluation_Stop_Time)
        {
            int pInvokeResult = PInvoke.SetPulseEvaluationSectionStop(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, Evaluation_Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop time of the averaging section for the wave quantity.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STOP?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STOP?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:EVALuation:STOP?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:EVALuation:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Evaluation_Stop_Time">
        /// This control gets the stop time of the averaging section.
        /// 
        /// Valid Values:
        /// -0.002999975 s to +0.003 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseEvaluationSectionStop(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out double Evaluation_Stop_Time)
        {
            int pInvokeResult = PInvoke.GetPulseEvaluationSectionStop(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, out Evaluation_Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays or hides the limit lines of the averaging section for the wave quantity. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:LINEs[:STATe] &lt;Boolean&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:LINEs[:STATe] &lt;Boolean&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:LINEs[:STATe] &lt;Boolean&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:LINEs[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Limit_Lines_State">
        /// This control displays or hides the limit lines of the averaging section for the wave quantity.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseSectionLimitLinesState(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, bool Limit_Lines_State)
        {
            int pInvokeResult = PInvoke.SetPulseSectionLimitLinesState(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, System.Convert.ToUInt16(Limit_Lines_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the limit lines state of the averaging section for the wave quantity. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:LINEs[:STATe]?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:LINEs[:STATe]?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:LINEs[:STATe]?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:LINEs[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Limit_Lines_State">
        /// This control returns the limit lines state of the averaging section for the wave quantity.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseSectionLimitLinesState(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out bool Limit_Lines_State)
        {
            ushort Limit_Lines_StateAsUShort;
            int pInvokeResult = PInvoke.GetPulseSectionLimitLinesState(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, out Limit_Lines_StateAsUShort);
            Limit_Lines_State = System.Convert.ToBoolean(Limit_Lines_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines an offset time (shift stimulus) for the wave quantity.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:TRIGger:DELay &lt;shift_stimulus&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:TRIGger:DELay &lt;shift_stimulus&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:TRIGger:DELay &lt;shift_stimulus&gt;
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:TRIGger:DELay &lt;shift_stimulus&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Shift_Stimulus">
        /// This control sets the offset time.
        /// 
        /// Valid Values:
        /// -0.003 s to +0.003 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 50 ns.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseShiftStimulus(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, double Shift_Stimulus)
        {
            int pInvokeResult = PInvoke.SetPulseShiftStimulus(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, Shift_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an offset time (shift stimulus) for the wave quantity.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:TRIGger:DELay?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:A&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:TRIGger:DELay?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:GENerator&lt;gen_no&gt;:TRIGger:DELay?
        /// [SENSe&lt;Ch&gt;:]PULSe:RECeiver:B&lt;rec_no&gt;:SRCPort&lt;port_no&gt;:TRIGger:DELay?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Type">
        /// This control selects the receiver type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_REC_A  (0) - A
        /// RSZVB_PULSE_REC_B  (1) - B
        /// 
        /// Default Value:  RSZVB_PULSE_REC_A  (0)
        /// </param>
        /// <param name="Record_Number">
        /// This control defines the number of the reference receiver (= port number of the analyzer)
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Interface_Type">
        /// This control selects the interface type.
        /// 
        /// Valid Values:
        /// RSZVB_PULSE_INTERFACE_GEN  (0) - Generator
        /// RSZVB_PULSE_INTERFACE_SRC  (1) - Analyzer Source
        /// 
        /// Default Value:  RSZVB_PULSE_INTERFACE_GEN  (0)
        /// </param>
        /// <param name="Generator_Port_Number">
        /// This control defines the number of a previously configured external generator or number of the analyzer source port (this depends on the selection of the interface type).
        /// 
        /// Valid Range: 1 to n where n is the number of external generators or ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Shift_Stimulus">
        /// This control gets the offset time.
        /// 
        /// Valid Values:
        /// -0.003 s to +0.003 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseShiftStimulus(int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out double Shift_Stimulus)
        {
            int pInvokeResult = PInvoke.GetPulseShiftStimulus(this._handle, Channel, Receiver_Type, Record_Number, Interface_Type, Generator_Port_Number, out Shift_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the SSRAM Data in Pulse Profile Mode. Only for traces with wave quantities (a- or b- waves)
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:DATA? TSData
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel__Trace_">
        /// Channel number used to identify the active trace.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="No_of_Values">
        /// Returns number of taken trace data values.
        /// 
        /// </param>
        /// <param name="Trace_Data">
        /// Returns the SSRAM Data in Pulse Profile Mode.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadTimeSamplesData(int Channel__Trace_, out int No_of_Values, double[] Trace_Data)
        {
            int pInvokeResult = PInvoke.ReadTimeSamplesData(this._handle, Channel__Trace_, out No_of_Values, Trace_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the total number of measurement points per sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:POINts
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_Of_Points">
        /// This control defines the total number of measurement points per sweep.
        /// 
        /// Valid Range: 2 to 20001
        /// 
        /// Default Value: 201
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepNumberOfPoints(int Channel, int Number_Of_Points)
        {
            int pInvokeResult = PInvoke.SetSweepNumberOfPoints(this._handle, Channel, Number_Of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the total number of measurement points per sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:POINts?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_Of_Points">
        /// This control returns the total number of measurement points per sweep.
        /// 
        /// Valid Range: 2 to 20001
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepNumberOfPoints(int Channel, out int Number_Of_Points)
        {
            int pInvokeResult = PInvoke.GetSweepNumberOfPoints(this._handle, Channel, out Number_Of_Points);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the distance between two consecutive sweep points.
        /// 
        /// Note(s):
        /// 
        /// (1) This setting is valid for sweep types with equidistant sweep points only. It does not apply to logarithmic and segmented sweeps.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:STEP &lt;step_size&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Step_Size">
        /// This control defines the stimulus step size. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 10.0e6
        /// 
        /// Note(s):
        /// 
        /// (1) The minimum step size is equal to the sweep span divided by the maximum number of points minus one ([SENSe&lt;Ch&gt;:]SWEep:POINts), the maximum step size is equal to the sweep span ([SENSe&lt;Ch&gt;:]FREQuency:SPAN).
        /// 
        /// (2) If the sweep range is defined by means of the Start and Stop variables, both the Stop value and the Number of Points can vary as the Stimulus Step Size is changed. The Stop value is changed as little as possible so that the condition Stimulus Step Size = (Stop - Start) / (Number of Points - 1) can be fulfilled. Changing the Start and Stop values modifies the Stimulus Step Size.
        /// 
        /// (3) If the sweep range is defined by means of the Center and Span variables, both the Span value and the Number of Points can vary as the Stimulus Step Size is changed. The Span is reduced as little as possible so that the condition Stimulus Step Size = (Stop - Start) / (Number of Points - 1) can be fulfilled. Changing the Span modifies the Stimulus Step Size.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyStepSize(int Channel, double Step_Size)
        {
            int pInvokeResult = PInvoke.SetFrequencyStepSize(this._handle, Channel, Step_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function gets the distance between two consecutive sweep points.
        /// 
        /// Note(s):
        /// 
        /// (1) This setting is valid for sweep types with equidistant sweep points only. It does not apply to logarithmic and segmented sweeps.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:STEP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Step_Size">
        /// This control returns the stimulus step size. 
        /// 
        /// Valid Range: not checked
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyStepSize(int Channel, out double Step_Size)
        {
            int pInvokeResult = PInvoke.GetFrequencyStepSize(this._handle, Channel, out Step_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the number of sweeps to be measured in single sweep mode.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;Ch&gt;:]SWEep:COUNt &lt;No_of_Sweeps&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Count">
        /// Defines the number of consecutive sweeps to be measured.
        /// 
        /// Valid Range: 1 to 999
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepCount(int Channel, int Sweep_Count)
        {
            int pInvokeResult = PInvoke.SetSweepCount(this._handle, Channel, Sweep_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number of sweeps to be measured in single sweep mode.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;Ch&gt;:]SWEep:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Count">
        /// Returns the number of consecutive sweeps to be measured.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepCount(int Channel, out int Sweep_Count)
        {
            int pInvokeResult = PInvoke.GetSweepCount(this._handle, Channel, out Sweep_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the measurement time for a sweep or delay the start of each sweep.
        /// 
        /// Note(s):
        /// 
        /// The sweep duration is ignored for the sweep types Time and CW Mode.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:TIME:AUTO &lt;Boolean&gt;
        /// [SENSe&lt;Ch&gt;:]SWEep:TIME &lt;numeric_value&gt;
        /// [SENSe&lt;Ch&gt;:]SWEep:DWELl &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Auto_Sweep_Time">
        /// When enabled, the (minimum) sweep duration is calculated internally using the other channel settings and zero delay.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// Note:
        /// 
        /// The Sweep Time and Meas. Delay values are maintained until changed explicitly if Auto is switched off.
        /// 
        /// </param>
        /// <param name="Sweep_Time">
        /// Sets the duration of the sweep (Sweep Time).
        /// 
        /// Valid Range: up to 100000.0 s
        /// 
        /// Default Value: 21.909e-3 s
        /// 
        /// Note:
        /// 
        /// The minimum duration depends on the other channel settings, in particular on the number of points ([SENSe&lt;Ch&gt;:]SWEep:POINts), the IF bandwidth (BWID) and the Meas. Delay for each partial measurement. Changing the duration leaves the number of points unchanged but directly affects the delay.
        /// 
        /// </param>
        /// <param name="Meas_Delay">
        /// Meas. delay sets a delay time allowing the DUT to settle before the hardware settings of the analyzer are changed and a new partial measurement is started.
        /// 
        /// Valid Range: 0.0 s to 3.179551E+2 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// Notes:
        /// 
        /// Changing the delay leaves the number of points unchanged but has an impact on the duration of the sweep.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureSweepTime(int Channel, bool Auto_Sweep_Time, double Sweep_Time, double Meas_Delay)
        {
            int pInvokeResult = PInvoke.ConfigureSweepTime(this._handle, Channel, System.Convert.ToUInt16(Auto_Sweep_Time), Sweep_Time, Meas_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the duration of the sweep (Sweep Time). Setting a duration disables the automatic calculation of the (minimum) sweep time; see [SENSe&lt;Ch&gt;:]SWEep:TIME:AUTO.
        /// 
        /// Note(s):
        /// 
        /// The sweep duration is ignored for the sweep types Time and CW Mode.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:TIME &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Time">
        /// Sets the duration of the sweep (Sweep Time).
        /// 
        /// Valid Range: up to 100000.0 s
        /// 
        /// Default Value: 21.909e-3 s
        /// 
        /// Note:
        /// 
        /// The minimum duration depends on the other channel settings, in particular on the number of points ([SENSe&lt;Ch&gt;:]SWEep:POINts), the IF bandwidth (BWID) and the Meas. Delay for each partial measurement. Changing the duration leaves the number of points unchanged but directly affects the delay.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepTime(int Channel, double Sweep_Time)
        {
            int pInvokeResult = PInvoke.SetSweepTime(this._handle, Channel, Sweep_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the duration of the sweep (Sweep Time). 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:TIME?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Sweep_Time">
        /// Returns the duration of the sweep (Sweep Time) in seconds.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepTime(int Channel, out double Sweep_Time)
        {
            int pInvokeResult = PInvoke.GetSweepTime(this._handle, Channel, out Sweep_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the Meas. Delay time for each partial measurement. Setting a delay disables the automatic calculation of the (minimum) sweep time; see [SENSe&lt;Ch&gt;:]SWEep:TIME:AUTO.
        /// 
        /// Note(s):
        /// 
        /// The sweep duration is ignored for the sweep types Time and CW Mode.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:DWELl &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Meas_Delay">
        /// Meas. delay before each partial measurement.
        /// 
        /// Valid Range: 0.0 s to 3.179551E+2 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepMeasDelay(int Channel, double Meas_Delay)
        {
            int pInvokeResult = PInvoke.SetSweepMeasDelay(this._handle, Channel, Meas_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Meas. Delay time for each partial measurement.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:DWELl?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Meas_Delay">
        /// Meas. delay before each partial measurement in seconds.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepMeasDelay(int Channel, out double Meas_Delay)
        {
            int pInvokeResult = PInvoke.GetSweepMeasDelay(this._handle, Channel, out Meas_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function when enabled, the (minimum) sweep duration is calculated internally using the other channel settings and zero delay ([SENSe&lt;Ch&gt;:]SWEep:DWELl). 
        /// 
        /// Note(s):
        /// 
        /// The automatically calculated sweep duration is ignored for the sweep types Time and CW Mode.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:TIME:AUTO &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Auto_Sweep_Time">
        /// When enabled, the (minimum) sweep duration is calculated internally using the other channel settings and zero delay.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepTimeAuto(int Channel, bool Auto_Sweep_Time)
        {
            int pInvokeResult = PInvoke.SetSweepTimeAuto(this._handle, Channel, System.Convert.ToUInt16(Auto_Sweep_Time));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the (minimum) sweep duration is calculated internally using the other channel settings and zero delay ([SENSe&lt;Ch&gt;:]SWEep:DWELl) or not.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:TIME:AUTO?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Auto_Sweep_Time">
        /// Returns if the (minimum) sweep duration is calculated internally using the other channel settings and zero delay or not.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepTimeAuto(int Channel, out bool Auto_Sweep_Time)
        {
            ushort Auto_Sweep_TimeAsUShort;
            int pInvokeResult = PInvoke.GetSweepTimeAuto(this._handle, Channel, out Auto_Sweep_TimeAsUShort);
            Auto_Sweep_Time = System.Convert.ToBoolean(Auto_Sweep_TimeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures free run measurement without waiting for trigger events.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SOURce IMMediate
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerFreeRun(int Channel)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerFreeRun(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the external trigger mode. In External trigger mode the measurement is triggered by a low-voltage (3.3 V) external TTL signal applied either to the BNC connector EXT TRIGGER or to pin 2 of the USER CONTROL connector at the rear panel. The two trigger inputs are equivalent; nor additional setting for signal routing is required. 
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SOURce EXTernal
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SLOPe POSitive | NEGative
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_On">
        /// This control qualifies whether the trigger event occurs on the rising or on the falling edge of the external TTL trigger signal.
        /// 
        /// Valid Values:
        /// RSZVB_NEG (0) - Falling Edge
        /// RSZVB_POS (1) - Rising Edge
        /// 
        /// Default Value: RSZVB_POS (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerExternal(int Channel, int Trigger_On)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerExternal(this._handle, Channel, Trigger_On);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the periodic trigger mode. In Periodic trigger mode the measurement is triggered by the periodic signal of an internal clock generator.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SOURce TIMer
        /// TRIGger&lt;Ch&gt;[:SEQuence]:TIMer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Period">
        /// This control sets the period of the internal periodic signal that can be used as a trigger source.
        /// 
        /// Valid Range: 1.0e-5 s to 13680 s
        /// 
        /// Default Value: 1.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerPeriodic(int Channel, double Trigger_Period)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerPeriodic(this._handle, Channel, Trigger_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the RF Power trigger mode. In RF Power trigger mode the trigger signal is generated from one of the generated or measured RF signals.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SOURce RFPower
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerRFPower(int Channel)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerRFPower(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the manual trigger mode. In Manual trigger mode the trigger signal is generated on pressing the Manual Trigger softkey or sending *TRG remote command (function rszvb_SendTrigger).
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SOURce MANual
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerManual(int Channel)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerManual(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the trigger settings.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:LINK 'POINT' | 'SWEEP' | 'PPOINT' | 'SEGMENT'
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Meas_Sequence">
        /// This control selects the Triggered Meas. Sequence.
        /// 
        /// Valid Values:
        /// RSZVB_TRGSEQ_SWE  (0) - Sweep
        /// RSZVB_TRGSEQ_SEGM (1) - Sweep Segment
        /// RSZVB_TRGSEQ_POIN (2) - Point
        /// RSZVB_TRGSEQ_PPO  (3) - Partial Measurement
        /// 
        /// Default Value: RSZVB_TRGSEQ_SWE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - Trigger event starts an entire sweep.
        /// 
        /// (2) Sweep Segment - Trigger event starts a sweep segment, if segmented frequency sweep is active. If another sweep type is active, the trigger event starts an entire sweep. 
        /// 
        /// (3) Point - Trigger event starts measurement at the next sweep point.
        /// 
        /// (4) Partial Measurement - Trigger event starts the next partial measurement at the current or at the next sweep point.
        /// </param>
        /// <param name="Trigger_Delay">
        /// This control defines a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: 0 s to 13680 s
        /// 
        /// Default Value: 0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerSettings(int Channel, int Trigger_Meas_Sequence, double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerSettings(this._handle, Channel, Trigger_Meas_Sequence, Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source for the events that the analyzer uses to start a sweep.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SOURce IMMediate | EXTernal | TIMer | MANual | RFPower | PGENerator
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Source">
        /// This control selects the source for the events that the analyzer uses to start a sweep.
        /// 
        /// Valid Values:
        /// RSZVB_TRG_IMM (0) - Free Run
        /// RSZVB_TRG_EXT (1) - External
        /// RSZVB_TRG_TIM (2) - Periodic
        /// RSZVB_TRG_MAN (3) - Manual
        /// RSZVB_TRG_RFP (4) - RF Power
        /// RSZVB_TRG_PGE (5) - Pulse Generator
        /// 
        /// Default Value: RSZVB_TRG_IMM (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Free Run - Free run measurement without waiting for trigger events
        /// 
        /// (2) External - Trigger by external signal applied to pin 2 of the USER CONTROL connector on the rear panel.
        /// 
        /// (3) Periodic - Periodic internal trigger signal. The period of the timer is specified by the rszvb_SetTriggerPeriod() function.
        /// 
        /// (4) Manual - Trigger signal generated by pressing the Manual Trigger softkey.
        /// 
        /// (5) RF Power - Trigger signal is generated from one of the generated or measured RF signals. The analyzer uses *RST or current values for the RF signal (Wave Quantity) and Trigger Level.
        /// 
        /// (6) Pulse Generator - Trigger event generated the pulse generator (with option R&amp;S ZVA-K27), depending on the TRIGger&lt;Ch&gt;[:SEQuence]:PULSe settings. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTriggerSource(int Channel, int Trigger_Source)
        {
            int pInvokeResult = PInvoke.SetTriggerSource(this._handle, Channel, Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries selected source for the events that the analyzer uses to start a sweep.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SOURce?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Source">
        /// This control returns selected source for the events that the analyzer uses to start a sweep.
        /// 
        /// Valid Values:
        /// RSZVB_TRG_IMM (0) - Free Run
        /// RSZVB_TRG_EXT (1) - External
        /// RSZVB_TRG_TIM (2) - Periodic
        /// RSZVB_TRG_MAN (3) - Manual
        /// RSZVB_TRG_RFP (4) - RF Power
        /// RSZVB_TRG_PGE (5) - Pulse generator
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTriggerSource(int Channel, out int Trigger_Source)
        {
            int pInvokeResult = PInvoke.GetTriggerSource(this._handle, Channel, out Trigger_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a delay time between the trigger event and the start of the measurement.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Delay">
        /// This control defines a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: 0 s to 13680 s
        /// 
        /// Default Value: 0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTriggerDelay(int Channel, double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.SetTriggerDelay(this._handle, Channel, Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries a delay time between the trigger event and the start of the measurement.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Delay">
        /// This control returns a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: 0 s to 13680 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTriggerDelay(int Channel, out double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.GetTriggerDelay(this._handle, Channel, out Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Qualifies whether the trigger delay is valid for all physical ports (including external generator) or source port-specific. This setting is available if the triggered measurement sequence is a partial measurement.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff:MODE PALL | PSPecific
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Mode">
        /// Qualifies whether the trigger delay is valid for all physical ports (including external generator) or source port-specific.
        /// 
        /// Valid Values:
        /// RSZVB_MODE_PALL (0) - All Ports
        /// RSZVB_MODE_PSP  (1) - Port-specific
        /// 
        /// Default Value: RSZVB_MODE_PALL (0)
        /// 
        /// Note(s):
        /// 
        /// (1) All Ports - Same trigger delay at all ports (rszvb_SetTriggerDelay)
        /// 
        /// (2) Port Specific - Port-specific trigger delay defined via 
        /// rszvb_SetPhysicalPortTriggerDelay (for physical analyzer ports) 
        /// or rszvb_SetGeneratorPortTriggerDelay (for external generators).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPartialMeasurementTriggerMode(int Channel, int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.SetPartialMeasurementTriggerMode(this._handle, Channel, Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries whether the trigger delay is valid for all physical ports (including external generator) or source port-specific.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Mode">
        /// Returns whether the trigger delay is valid for all physical ports (including external generator) or source port-specific.
        /// 
        /// Valid Values:
        /// RSZVB_MODE_PALL (0) - All Ports
        /// RSZVB_MODE_PSP  (1) - Port-specific
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPartialMeasurementTriggerMode(int Channel, out int Trigger_Mode)
        {
            int pInvokeResult = PInvoke.GetPartialMeasurementTriggerMode(this._handle, Channel, out Trigger_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines the trigger delay for a generator port &lt;Gen&gt;. The setting takes effect when a port-specific trigger delay is selected
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff:GENerator&lt;Gen&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Port">
        /// Generator port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Delay">
        /// This control defines a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: 0 s to 13680 s
        /// 
        /// Default Value: 0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorPortTriggerDelay(int Channel, int Generator_Port, double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.SetGeneratorPortTriggerDelay(this._handle, Channel, Generator_Port, Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the trigger delay for a generator port &lt;Gen&gt;.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff:GENerator&lt;Gen&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Port">
        /// Generator port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Delay">
        /// This control returns a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: 0 s to 13680 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorPortTriggerDelay(int Channel, int Generator_Port, out double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.GetGeneratorPortTriggerDelay(this._handle, Channel, Generator_Port, out Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines the trigger delay for a physical analyzer port &lt;Pt&gt;. The setting takes effect when a port-specific trigger delay is selected.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff:PORT&lt;Pt&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port">
        /// Physical analyzer port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Delay">
        /// This control defines a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: 0 s to 13680 s
        /// 
        /// Default Value: 0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPhysicalPortTriggerDelay(int Channel, int Analyzer_Port, double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.SetPhysicalPortTriggerDelay(this._handle, Channel, Analyzer_Port, Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the trigger delay for a physical analyzer port &lt;Pt&gt;.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:HOLDoff:PORT&lt;Pt&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port">
        /// Physical analyzer port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Delay">
        /// This control returns a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: 0 s to 13680 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPhysicalPortTriggerDelay(int Channel, int Analyzer_Port, out double Trigger_Delay)
        {
            int pInvokeResult = PInvoke.GetPhysicalPortTriggerDelay(this._handle, Channel, Analyzer_Port, out Trigger_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the Triggered Meas. Sequence.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:LINK 'POINT' | 'SWEEP' | 'PPOINT' | 'SEGMENT'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Meas_Sequence">
        /// This control selects the Triggered Meas. Sequence.
        /// 
        /// Valid Values:
        /// RSZVB_TRGSEQ_SWE  (0) - Sweep
        /// RSZVB_TRGSEQ_SEGM (1) - Sweep Segment
        /// RSZVB_TRGSEQ_POIN (2) - Point
        /// RSZVB_TRGSEQ_PPO  (3) - Partial Measurement
        /// 
        /// Default Value: RSZVB_TRGSEQ_SWE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - Trigger event starts an entire sweep.
        /// 
        /// (2) Sweep Segment - Trigger event starts a sweep segment, if segmented frequency sweep is active. If another sweep type is active, the trigger event starts an entire sweep. 
        /// 
        /// (3) Point - Trigger event starts measurement at the next sweep point.
        /// 
        /// (4) Partial Measurement - Trigger event starts the next partial measurement at the current or at the next sweep point.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTriggeredMeasSequence(int Channel, int Trigger_Meas_Sequence)
        {
            int pInvokeResult = PInvoke.SetTriggeredMeasSequence(this._handle, Channel, Trigger_Meas_Sequence);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries selected Triggered Meas. Sequence.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:LINK?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Meas_Sequence">
        /// This control returns selected Triggered Meas. Sequence.
        /// 
        /// Valid Values:
        /// RSZVB_TRGSEQ_SWE  (0) - Sweep
        /// RSZVB_TRGSEQ_SEGM (1) - Sweep Segment
        /// RSZVB_TRGSEQ_POIN (2) - Point
        /// RSZVB_TRGSEQ_PPO  (3) - Partial Measurement
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTriggeredMeasSequence(int Channel, out int Trigger_Meas_Sequence)
        {
            int pInvokeResult = PInvoke.GetTriggeredMeasSequence(this._handle, Channel, out Trigger_Meas_Sequence);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function qualifies whether the trigger event occurs on the rising or on the falling edge of the external TTL trigger signal.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SLOPe POSitive | NEGative
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_On">
        /// This control qualifies whether the trigger event occurs on the rising or on the falling edge of the external TTL trigger signal.
        /// 
        /// Valid Values:
        /// RSZVB_NEG (0) - Falling Edge
        /// RSZVB_POS (1) - Rising Edge
        /// 
        /// Default Value: RSZVB_NEG (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTriggerOn(int Channel, int Trigger_On)
        {
            int pInvokeResult = PInvoke.SetTriggerOn(this._handle, Channel, Trigger_On);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the trigger event occurs on the rising or on the falling edge of the external TTL trigger signal.
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:SLOPe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_On">
        /// This control returns whether the trigger event occurs on the rising or on the falling edge of the external TTL trigger signal.
        /// 
        /// Valid Values:
        /// RSZVB_NEG (0) - Falling Edge
        /// RSZVB_POS (1) - Rising Edge
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTriggerOn(int Channel, out int Trigger_On)
        {
            int pInvokeResult = PInvoke.GetTriggerOn(this._handle, Channel, out Trigger_On);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the period of the internal periodic signal that can be used as a trigger source. 
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:TIMer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Period">
        /// This control sets the period of the internal periodic signal that can be used as a trigger source.
        /// 
        /// Valid Range: 1.0e-5 s to 13680 s
        /// 
        /// Default Value: 1.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTriggerPeriod(int Channel, double Trigger_Period)
        {
            int pInvokeResult = PInvoke.SetTriggerPeriod(this._handle, Channel, Trigger_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the period of the internal periodic signal that can be used as a trigger source. 
        /// 
        /// Remote-control command(s):
        /// TRIGger&lt;Ch&gt;[:SEQuence]:TIMer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trigger_Period">
        /// This control returns the period of the internal periodic signal that can be used as a trigger source.
        /// 
        /// Valid Range: 1.0e-5 s to 13680 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTriggerPeriod(int Channel, out double Trigger_Period)
        {
            int pInvokeResult = PInvoke.GetTriggerPeriod(this._handle, Channel, out Trigger_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers all actions waiting for a trigger event. Generates a manual trigger signal (Manual Trigger).
        /// 
        /// Remote-control command(s):
        /// *TRG
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SendTrigger()
        {
            int pInvokeResult = PInvoke.SendTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function triggers all actions waiting for a trigger event in the selected window and waits for operation completed (OPC) before returning the status code.
        /// 
        /// Remote-control command(s):
        /// *TRG
        /// *OPC?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Timeout">
        /// Sets the timeout for the triggering routine to be finished. If the length of time required for triggering exceeds the timeout value, then the function will return with a timeout error.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 15000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SendTriggerWaitOPC(int Timeout)
        {
            int pInvokeResult = PInvoke.SendTriggerWaitOPC(this._handle, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a new single sweep sequence. This function is available in single sweep mode only (INITiate&lt;Ch&gt;:CONTinuous OFF).
        /// 
        /// Note(s):
        /// 
        /// (1) In contrast to all other functions of the analyzer, INITiate&lt;Ch&gt;[:IMMediate] has been implemented to prevent overlapped execution.
        /// 
        /// (2) The data of the last sweep can be read using CALCulate&lt;Ch&gt;:DATA:NSWeep? SDATa, &lt;history_count&gt;.
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;Ch&gt;[:IMMediate]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SendChannelTrigger(int Channel)
        {
            int pInvokeResult = PInvoke.SendChannelTrigger(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a new single sweep sequence and waits for operation completed (OPC) before returning the status code. This function is available in single sweep mode only (INITiate&lt;Ch&gt;:CONTinuous OFF).
        /// 
        /// Note(s):
        /// 
        /// (1) In contrast to all other functions of the analyzer, INITiate&lt;Ch&gt;[:IMMediate] has been implemented to prevent overlapped execution.
        /// 
        /// (2) The data of the last sweep can be read using CALCulate&lt;Ch&gt;:DATA:NSWeep? SDATa, &lt;history_count&gt;.
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;Ch&gt;[:IMMediate]
        /// *OPC?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Timeout">
        /// Sets the timeout for the triggering routine to be finished. If the length of time required for triggering exceeds the timeout value, then the function will return with a timeout error.
        /// 
        /// Valid Range: 0 ms to 600000 ms
        /// 
        /// Default Value: 15000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SendChannelTriggerWaitOPC(int Channel, int Timeout)
        {
            int pInvokeResult = PInvoke.SendChannelTriggerWaitOPC(this._handle, Channel, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the scope of the single sweep sequence.
        /// 
        /// Note(s):
        /// 
        /// (1) The setting is applied in single sweep mode only.
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;Ch&gt;[:IMMediate]:SCOPe ALL | SINGle
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Single_Sweep">
        /// This control selects the scope of the single sweep sequence.
        /// 
        /// Valid Values:
        /// RSZVB_SWEEP_SINGLE_CHAN (0) - Single Sweep
        /// RSZVB_SWEEP_ALL_CHAN    (1) - Continuous Sweep
        /// 
        /// Default Value: RSZVB_SWEEP_ALL_CHAN (1)
        /// 
        /// Notes:
        /// 
        /// (1) Single Sweep:
        /// Starts a single sweep in the active channel only.
        /// 
        /// (2) Continuous Sweep:
        /// Starts a single sweep in all channels.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSingleAllChans(int Single_Sweep)
        {
            int pInvokeResult = PInvoke.SetSweepSingleAllChans(this._handle, Single_Sweep);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the scope of the single sweep sequence.
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;Ch&gt;[:IMMediate]:SCOPe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Single_Sweep">
        /// This control returns the scope of the single sweep sequence.
        /// 
        /// Valid Values:
        /// RSZVB_SWEEP_SINGLE_CHAN (0) - Single Sweep
        /// RSZVB_SWEEP_ALL_CHAN    (1) - Continuous Sweep
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSingleAllChans(out int Single_Sweep)
        {
            int pInvokeResult = PInvoke.GetSweepSingleAllChans(this._handle, out Single_Sweep);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a new single sweep sequence.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available in single sweep mode only.
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;Ch&gt;[:IMMediate]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SweepRestart(int Channel)
        {
            int pInvokeResult = PInvoke.SweepRestart(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function qualifies whether the analyzer measures in single sweep or in continuous sweep mode.
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;Ch&gt;:CONTinuous OFF | ON
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Single_Sweep">
        /// This control qualifies whether the analyzer measures in single sweep or in continuous sweep mode.
        /// 
        /// Valid Values:
        /// RSZVB_SWEEP_SINGLE (0) - Single Sweep
        /// RSZVB_SWEEP_CONT   (1) - Continuous Sweep
        /// 
        /// Default Value: RSZVB_SWEEP_CONT (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSweepSingle(int Channel, int Single_Sweep)
        {
            int pInvokeResult = PInvoke.SetSweepSingle(this._handle, Channel, Single_Sweep);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the analyzer measures in single sweep or in continuous sweep mode.
        /// 
        /// Remote-control command(s):
        /// INITiate&lt;Ch&gt;:CONTinuous?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Single_Sweep">
        /// This control returns whether the analyzer measures in single sweep or in continuous sweep mode.
        /// 
        /// Valid Values:
        /// RSZVB_SWEEP_SINGLE (0) - Single Sweep
        /// RSZVB_SWEEP_CONT   (1) - Continuous Sweep
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSweepSingle(int Channel, out int Single_Sweep)
        {
            int pInvokeResult = PInvoke.GetSweepSingle(this._handle, Channel, out Single_Sweep);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a group of measured ports numbered &lt;Group&gt; containing a continuous range of logical ports &lt;First Port&gt; and &lt;Last Port&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Group">
        /// Port group number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Port groups must contain at least one logical port and must not overlap, so the maximum number of port groups for an n-port (cascaded) analyzer is n.
        /// </param>
        /// <param name="First_Port">
        /// This control defines the first port of defined group.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) &lt;First Port&gt; can be smaller than, equal to or larger than &lt;Last Port&gt;, however, a physical port cannot be assigned to several physical ports. 
        /// </param>
        /// <param name="Last_Port">
        /// This control defines the last port of defined group.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) &lt;First Port&gt; can be smaller than, equal to or larger than &lt;Last Port&gt;, however, a physical port cannot be assigned to several physical ports. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefineGroupOfMeasuredPorts(int Channel, int Group, int First_Port, int Last_Port)
        {
            int pInvokeResult = PInvoke.DefineGroupOfMeasuredPorts(this._handle, Channel, Group, First_Port, Last_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries &lt;First Port&gt; and &lt;Last Port&gt; of group of measured ports numbered &lt;Group&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Group">
        /// Port group number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Port groups must contain at least one logical port and must not overlap, so the maximum number of port groups for an n-port (cascaded) analyzer is n.
        /// </param>
        /// <param name="First_Port">
        /// This control returns the first port of defined group.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <param name="Last_Port">
        /// This control returns the last port of defined group.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGroupOfMeasuredPorts(int Channel, int Group, out int First_Port, out int Last_Port)
        {
            int pInvokeResult = PInvoke.GetGroupOfMeasuredPorts(this._handle, Channel, Group, out First_Port, out Last_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a port group numbered &lt;group_no&gt; containing an arbitrary selection of logical ports. The ports do not have to be numbered continuously (as for port groups defined via SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;). 
        /// 
        /// Note(s):
        /// 
        /// (1) It is not possible to create more than one port group with arbitrary ports. To avoid errors, use the setting command only while the channel contains a single port group (e.g. after a *RST). You can use the query to read out the ports for an arbitrary number of port groups created via SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;:PORTs  &lt;log_port1&gt;{,&lt;log_port2&gt; ...}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Group">
        /// Port group number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Port groups must contain at least one logical port and must not overlap, so the maximum number of port groups for an n-port (cascaded) analyzer is n.
        /// </param>
        /// <param name="Number_of_Ports_In_Group">
        /// This control sets the number of ports of defined group.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value controls how many values are used in the Ports array.
        /// </param>
        /// <param name="Ports">
        /// This control defines all ports of defined group.
        /// 
        /// Valid Range: 
        /// array of values with size of (Number of Ports In Group)
        /// 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefineGroupOfAllMeasuredPorts(int Channel, int Group, int Number_of_Ports_In_Group, int[] Ports)
        {
            int pInvokeResult = PInvoke.DefineGroupOfAllMeasuredPorts(this._handle, Channel, Group, Number_of_Ports_In_Group, Ports);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a port group numbered &lt;group_no&gt; containing an arbitrary selection of logical ports.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;:PORTs?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Group">
        /// Port group number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Port groups must contain at least one logical port and must not overlap, so the maximum number of port groups for an n-port (cascaded) analyzer is n.
        /// </param>
        /// <param name="Number_of_Ports_In_Group">
        /// This control returns the number of ports of defined group.
        /// </param>
        /// <param name="Ports">
        /// This control returns all ports of defined group.
        /// 
        /// Valid Range: 
        /// array of values
        /// 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGroupOfAllMeasuredPorts(int Channel, int Group, out int Number_of_Ports_In_Group, int[] Ports)
        {
            int pInvokeResult = PInvoke.GetGroupOfAllMeasuredPorts(this._handle, Channel, Group, out Number_of_Ports_In_Group, Ports);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of port groups in channel no. &lt;Ch&gt;.  
        /// 
        /// Note(s):
        /// 
        /// (1) Port group no 1 is always present and can not be dissolved. After a *RST or after SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;:CLEar ALL, port group no. 1 contains all ports of the analyzer.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Groups">
        /// This control queries the number of port groups in channel no. &lt;Ch&gt;.
        /// 
        /// Valid Range: 
        /// 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPortGroupsCount(int Channel, out int Port_Groups)
        {
            int pInvokeResult = PInvoke.GetPortGroupsCount(this._handle, Channel, out Port_Groups);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function dissolves a group of measured ports.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;:CLEar
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Group">
        /// Port group number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Port groups must contain at least one logical port and must not overlap, so the maximum number of port groups for an n-port (cascaded) analyzer is n.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteGroupOfMeasuredPorts(int Channel, int Group)
        {
            int pInvokeResult = PInvoke.DeleteGroupOfMeasuredPorts(this._handle, Channel, Group);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function dissolves all groups of measured ports.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:GROup&lt;group_no&gt;:CLEar ALL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteAllGroupsOfMeasuredPorts(int Channel)
        {
            int pInvokeResult = PInvoke.DeleteAllGroupsOfMeasuredPorts(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a balanced port numbered &lt;Logicalog Port&gt;, combining two physical ports &lt;Physical Port 1&gt; and &lt;Physical Port 2&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port">
        /// Logical port number used to number balanced ports.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) One balanced port requires two physical ports, so the maximum number of balanced ports for an n-port analyzer is n/2 (n even) or (n - 1)/2 (n odd).
        /// </param>
        /// <param name="Physical_Port_1">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The port numbers must be different from each other. Moreover, a physical port cannot be assigned to several physical ports.
        /// </param>
        /// <param name="Physical_Port_2">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The port numbers must be different from each other. Moreover, a physical port cannot be assigned to several physical ports.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefineBalancedPort(int Channel, int Logical_Port, int Physical_Port_1, int Physical_Port_2)
        {
            int pInvokeResult = PInvoke.DefineBalancedPort(this._handle, Channel, Logical_Port, Physical_Port_1, Physical_Port_2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries a balanced port numbered &lt;Logicalog Port&gt;, combining two physical ports &lt;Physical Port 1&gt; and &lt;Physical Port 2&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port">
        /// Logical port number used to number balanced ports.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) One balanced port requires two physical ports, so the maximum number of balanced ports for an n-port analyzer is n/2 (n even) or (n - 1)/2 (n odd).
        /// </param>
        /// <param name="Physical_Port_1">
        /// This control returns the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <param name="Physical_Port_2">
        /// This control returns the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetBalancedPort(int Channel, int Logical_Port, out int Physical_Port_1, out int Physical_Port_2)
        {
            int pInvokeResult = PInvoke.GetBalancedPort(this._handle, Channel, Logical_Port, out Physical_Port_1, out Physical_Port_2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function dissolves selected balanced port.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;:CLEar
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port">
        /// Logical port number used to number balanced ports.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) One balanced port requires two physical ports, so the maximum number of balanced ports for an n-port analyzer is n/2 (n even) or (n - 1)/2 (n odd).
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteBalancedPort(int Channel, int Logical_Port)
        {
            int pInvokeResult = PInvoke.DeleteBalancedPort(this._handle, Channel, Logical_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function dissolves all balanced ports.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;:CLEar ALL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteAllBalancedPorts(int Channel)
        {
            int pInvokeResult = PInvoke.DeleteAllBalancedPorts(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the differential mode impedance for selected balanced port.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DZConversion:BPORt&lt;logical_port&gt;:ZDIFferent[:R]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port">
        /// Logical port number.
        /// 
        /// Valid Range: 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Impedance">
        /// This control defines the differential mode impedance for the selected balanced port.
        /// 
        /// Valid Range: 0 to 3.4028234664E+032 Ohm
        /// 
        /// Default Value: 100
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDifferentialModeImpedance(int Channel, int Logical_Port, double Impedance)
        {
            int pInvokeResult = PInvoke.SetDifferentialModeImpedance(this._handle, Channel, Logical_Port, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the differential mode impedance for selected balanced port.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DZConversion:BPORt&lt;logical_port&gt;:ZDIFferent[:R]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port">
        /// Logical port number.
        /// 
        /// Valid Range: 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Impedance">
        /// This control returns the differential mode impedance for the selected balanced port.
        /// 
        /// Valid Range: 0 to 3.4028234664E+032 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDifferentialModeImpedance(int Channel, int Logical_Port, out double Impedance)
        {
            int pInvokeResult = PInvoke.GetDifferentialModeImpedance(this._handle, Channel, Logical_Port, out Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the common mode impedance for selected balanced port.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DZConversion:BPORt&lt;logical_port&gt;:ZCOMmon[:R]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port">
        /// Logical port number.
        /// 
        /// Valid Range: 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Impedance">
        /// This control defines the common mode impedance for the selected balanced port.
        /// 
        /// Valid Range: 0 to 3.4028234664E+032 Ohm
        /// 
        /// Default Value: 25
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCommonModeImpedance(int Channel, int Logical_Port, double Impedance)
        {
            int pInvokeResult = PInvoke.SetCommonModeImpedance(this._handle, Channel, Logical_Port, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the common mode impedance for selected balanced port.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DZConversion:BPORt&lt;logical_port&gt;:ZCOMmon[:R]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Logical_Port">
        /// Logical port number.
        /// 
        /// Valid Range: 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Impedance">
        /// This control returns the common mode impedance for the selected balanced port.
        /// 
        /// Valid Range: 0 to 3.4028234664E+032 Ohm
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCommonModeImpedance(int Channel, int Logical_Port, out double Impedance)
        {
            int pInvokeResult = PInvoke.GetCommonModeImpedance(this._handle, Channel, Logical_Port, out Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines a list of port pairs for port pair deembedding/embedding. The command can be used repeatedly to extend or overwrite the list.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:DEFine
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:DEFine
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_1">
        /// First port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_2">
        /// Second port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 2
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefinePortPair(int Channel, int Function_Type, int Port_Pair, int Port_1, int Port_2)
        {
            int pInvokeResult = PInvoke.DefinePortPair(this._handle, Channel, Function_Type, Port_Pair, Port_1, Port_2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Deletes the previously defined list of port pairs for port pair embedding/deembedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:DELete
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:DELete
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeletePortPair(int Channel, int Function_Type, int Port_Pair)
        {
            int pInvokeResult = PInvoke.DeletePortPair(this._handle, Channel, Function_Type, Port_Pair);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function overwrites the current settings of the multiport test set with the settings stored in the configuration file matrix.mtx. The file is stored in the directory C:\Program Files\Rohde&amp;Schwarz\Network Analyzer\resources\extdev.  
        /// 
        /// Remote-control command(s):
        /// ROUTe&lt;Ch&gt;:CFILe ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Default_Settings">
        /// This control overwrites the current settings of the multiport test set with the settings stored in the configuration file.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The default settings have been changed (for query only)
        /// 
        /// (2) On: The multiport test set uses the default settings of the configuration file
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDefaultConfigurationState(bool Default_Settings)
        {
            int pInvokeResult = PInvoke.SetDefaultConfigurationState(this._handle, System.Convert.ToUInt16(Default_Settings));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the default configuration state
        /// 
        /// Remote-control command(s):
        /// ROUTe&lt;Ch&gt;:CFILe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Default_Settings">
        /// This control returns the default configuration state.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) Off: The default settings have been changed
        /// 
        /// (2) On: The multiport test set uses the default settings of the configuration file
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDefaultConfigurationState(out bool Default_Settings)
        {
            ushort Default_SettingsAsUShort;
            int pInvokeResult = PInvoke.GetDefaultConfigurationState(this._handle, out Default_SettingsAsUShort);
            Default_Settings = System.Convert.ToBoolean(Default_SettingsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the internal signal paths of the multiport test set R&amp;S ZV-Z83 for channel no. &lt;Ch&gt;.  
        /// 
        /// Remote-control command(s):
        /// ROUTe&lt;Ch&gt;:PORTs
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Group_A">
        /// This control defines the "output" port number for group A.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <param name="Port_Group_B">
        /// This control defines the "output" port number for group B.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <param name="Port_Group_C">
        /// This control defines the "output" port number for group C.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <param name="Port_Group_D">
        /// This control defines the "output" port number for group D.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPortConfigration(int Channel, int Port_Group_A, int Port_Group_B, int Port_Group_C, int Port_Group_D)
        {
            int pInvokeResult = PInvoke.SetPortConfigration(this._handle, Channel, Port_Group_A, Port_Group_B, Port_Group_C, Port_Group_D);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the internal signal paths of the multiport test set R&amp;S ZV-Z83 for channel no. &lt;Ch&gt;.  
        /// 
        /// Remote-control command(s):
        /// ROUTe&lt;Ch&gt;:PORTs?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Group_A">
        /// This control returns the "output" port number for group A.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <param name="Port_Group_B">
        /// This control returns the "output" port number for group B.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <param name="Port_Group_C">
        /// This control returns the "output" port number for group C.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <param name="Port_Group_D">
        /// This control returns the "output" port number for group D.
        /// 
        /// Valid Range: 0 to 4
        /// 
        /// Note(s):
        /// 
        /// (1) 0 - retain the existing port configuration when channel &lt;Ch&gt; is measured. 
        /// 
        /// (2) 1 | 2 | 3 | 4 - use port no. 1, 2, 3, 4
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPortConfigration(int Channel, out int Port_Group_A, out int Port_Group_B, out int Port_Group_C, out int Port_Group_D)
        {
            int pInvokeResult = PInvoke.GetPortConfigration(this._handle, Channel, out Port_Group_A, out Port_Group_B, out Port_Group_C, out Port_Group_D);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the receiver frequency or the port-specific source frequency for frequency-converting measurements. The receiver/source frequency is either a range (for frequency sweeps) or a CW frequency (for power, time and CW Mode sweeps). The receiver frequency is valid for all ports. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:ARBitrary &lt;numerator&gt;, &lt;denominator&gt;, &lt;offset&gt;, CW | FIXed | SWEep
        /// SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CONVersion:ARBitrary:IFRequency &lt;numerator&gt;, &lt;denominator&gt;, &lt;offset&gt;, CW | FIXed | SWEep
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Measurement_Type">
        /// This control selects the measurement type.
        /// 
        /// Valid Values:
        /// RSZVB_RECEIVER (0) - Receiver
        /// RSZVB_SOURCE   (1) - Source
        /// 
        /// Default Value: RSZVB_RECEIVER (0)
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is used only when SOURCE is selected as the measurement type.
        /// </param>
        /// <param name="Numerator">
        /// This control defines the numerator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Denominator">
        /// This control defines the denominator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Offset">
        /// This control defines the offset.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control select the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// Default Value: RSZVB_SWEEP_TYPE_SWEEP (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyConversion(int Measurement_Type, int Channel, int Port, int Numerator, int Denominator, double Offset, int Sweep_Type)
        {
            int pInvokeResult = PInvoke.SetFrequencyConversion(this._handle, Measurement_Type, Channel, Port, Numerator, Denominator, Offset, Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the receiver frequency or the port-specific source frequency for frequency-converting measurements. The receiver/source frequency is either a range (for frequency sweeps) or a CW frequency (for power, time and CW Mode sweeps). The receiver frequency is valid for all ports. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:ARBitrary?
        /// SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CONVersion:ARBitrary:IFRequency?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Measurement_Type">
        /// This control selects the measurement type.
        /// 
        /// Valid Values:
        /// RSZVB_RECEIVER (0) - Receiver
        /// RSZVB_SOURCE   (1) - Source
        /// 
        /// Default Value: RSZVB_RECEIVER (0)
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This value is used only when SOURCE is selected as the measurement type.
        /// </param>
        /// <param name="Numerator">
        /// This control returns the numerator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Denominator">
        /// This control returns the denominator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Offset">
        /// This control returns the offset.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control returns the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyConversion(int Measurement_Type, int Channel, int Port, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type)
        {
            int pInvokeResult = PInvoke.GetFrequencyConversion(this._handle, Measurement_Type, Channel, Port, out Numerator, out Denominator, out Offset, out Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the receiver frequency for frequency-converting measurements. The receiver frequency is either a range (for frequency sweeps) or a CW frequency (for power, time and CW Mode sweeps). The receiver frequency is valid for all ports. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:ARBitrary:PMETer&lt;Mtr&gt; &lt;numerator&gt;, &lt;denominator&gt;, &lt;offset&gt;, CW | FIXed | SWEep
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Meter_Number">
        /// This control sets the number of the configured power meter. Power meters must be numbered in ascending order, starting with 1. If a number is re-used, the previous power meter configuration is overwritten. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Numerator">
        /// This control defines the numerator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Denominator">
        /// This control defines the denominator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Offset">
        /// This control defines the offset.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control select the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// Default Value: RSZVB_SWEEP_TYPE_SWEEP (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerMeterFrequencyConversion(int Channel, int Power_Meter_Number, int Numerator, int Denominator, double Offset, int Sweep_Type)
        {
            int pInvokeResult = PInvoke.SetPowerMeterFrequencyConversion(this._handle, Channel, Power_Meter_Number, Numerator, Denominator, Offset, Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the receiver frequency for frequency-converting measurements. The receiver frequency is either a range (for frequency sweeps) or a CW frequency (for power, time and CW Mode sweeps). The receiver frequency is valid for all ports. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:ARBitrary:PMETer&lt;Mtr&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Meter_Number">
        /// This control sets the number of the configured power meter. Power meters must be numbered in ascending order, starting with 1. If a number is re-used, the previous power meter configuration is overwritten. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Numerator">
        /// This control returns the numerator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Denominator">
        /// This control returns the denominator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Offset">
        /// This control returns the offset.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control returns the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerMeterFrequencyConversion(int Channel, int Power_Meter_Number, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type)
        {
            int pInvokeResult = PInvoke.GetPowerMeterFrequencyConversion(this._handle, Channel, Power_Meter_Number, out Numerator, out Denominator, out Offset, out Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines an external generator frequency for frequency-converting measurements. The external generator frequency is either a range (for frequency sweeps) or a CW frequency (for power, time and CW Mode sweeps).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CONVersion:ARBitrary:EFRequency&lt;Gen&gt; 
        /// &lt;Boolean&gt;, &lt;numerator&gt;, &lt;denominator&gt;, &lt;offset&gt;, CW | FIXed | SWEep
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control switch the generator on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <param name="Numerator">
        /// This control defines the numerator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Denominator">
        /// This control defines the denominator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Offset">
        /// This control defines the offset.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control select the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// Default Value: RSZVB_SWEEP_TYPE_SWEEP (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetGeneratorFrequencyConversion(int Channel, int Port, int Generator_Number, bool State, int Numerator, int Denominator, double Offset, int Sweep_Type)
        {
            int pInvokeResult = PInvoke.SetGeneratorFrequencyConversion(this._handle, Channel, Port, Generator_Number, System.Convert.ToUInt16(State), Numerator, Denominator, Offset, Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an external generator frequency for frequency-converting measurements. The external generator frequency is either a range (for frequency sweeps) or a CW frequency (for power, time and CW Mode sweeps).
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CONVersion:ARBitrary:EFRequency&lt;Gen&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the state of the generator.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <param name="Numerator">
        /// This control returns the numerator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Denominator">
        /// This control returns the denominator.
        /// 
        /// Valid Range: &gt;0
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Offset">
        /// This control returns the offset.
        /// 
        /// Valid Range: 0.0 to 24.0e9 (depends on the model)
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver frequency fr is calculated according to
        /// fr = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// where fb represents the sweep range (for frequency sweeps, parameter SWEep). For power, time and CW Mode sweeps (parameters CW or FIXed), fb = 0. 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control returns the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetGeneratorFrequencyConversion(int Channel, int Port, int Generator_Number, out bool State, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetGeneratorFrequencyConversion(this._handle, Channel, Port, Generator_Number, out StateAsUShort, out Numerator, out Denominator, out Offset, out Sweep_Type);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines the converter source frequency at the converter port &lt;Pt&gt;.
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CONVersion:ARBitrary:CFRequency &lt;numerator&gt;, &lt;denominator&gt;, &lt;offset&gt;, CW | FIXed | SWEep
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Test port number of the analyzer
        /// 
        /// Valid Range:
        ///  &gt; 1
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Numerator">
        /// Numerator of the frequency formula. The source frequency fs is calculated according to
        /// fs = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// 
        /// Valid Range:
        ///  not checked
        /// 
        /// 
        /// </param>
        /// <param name="Denominator">
        /// Denominator of the frequency formula. The source frequency fs is calculated according to
        /// fs = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// 
        /// Valid Range:
        ///  not checked
        /// 
        /// 
        /// </param>
        /// <param name="Offset">
        /// Offset of the frequency formula. The source frequency fs is calculated according to
        /// fs = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// 
        /// Valid Range:
        ///  not checked
        /// 
        /// 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control select the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// Default Value: RSZVB_SWEEP_TYPE_SWEEP (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetConverterSourceFrequency(int Channel, int Port, int Numerator, int Denominator, double Offset, int Sweep_Type)
        {
            int pInvokeResult = PInvoke.SetConverterSourceFrequency(this._handle, Channel, Port, Numerator, Denominator, Offset, Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the converter source frequency at the converter port &lt;Pt&gt;.
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency&lt;Pt&gt;:CONVersion:ARBitrary:CFRequency? 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Test port number of the analyzer
        /// 
        /// Valid Range:
        ///  &gt; 1
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Numerator">
        /// Numerator of the frequency formula. The source frequency fs is calculated according to
        /// fs = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// 
        /// Valid Range:
        ///  not checked
        /// 
        /// 
        /// </param>
        /// <param name="Denominator">
        /// Denominator of the frequency formula. The source frequency fs is calculated according to
        /// fs = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// 
        /// Valid Range:
        ///  not checked
        /// 
        /// 
        /// </param>
        /// <param name="Offset">
        /// Offset of the frequency formula. The source frequency fs is calculated according to
        /// fs = &lt;numerator&gt;/&lt;denominator&gt;*fb. + &lt;offset&gt; 
        /// 
        /// Valid Range:
        ///  not checked
        /// 
        /// 
        /// </param>
        /// <param name="Sweep_Type">
        /// This control returns the sweep type.
        /// 
        /// Valid Values: 
        /// RSZVB_SWEEP_TYPE_SWEEP (0) - Sweep
        /// RSZVB_SWEEP_TYPE_FIXED (1) - CW/Fixed
        /// 
        /// Note(s):
        /// 
        /// (1) Sweep - A frequency sweep is active, the command defines a frequency range. 
        /// 
        /// (2) CW/Fixed - A power, time or CW Mode sweeps is active, the command defines a fixed frequency 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetConverterSourceFrequency(int Channel, int Port, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type)
        {
            int pInvokeResult = PInvoke.GetConverterSourceFrequency(this._handle, Channel, Port, out Numerator, out Denominator, out Offset, out Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a source power or a power offset relative to the channel power (SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate][:AMPlitude]) for a frequency converter port &lt;Pt&gt;. The command is available for converters with electronic attenuators (R&amp;S ZVA-ZxxxE). An additional Cal Power Offset can be defined via SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:LEVel:OFFSet. 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CONVerter:OFFSet &lt;numeric_value&gt;, ONLY | CPADd
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Test port number of the analyzer
        /// 
        /// Valid Range:
        ///  &gt; 1
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_Power_Offset">
        /// This control sets the port-specific power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_Parameter">
        /// This control sets the offset parameter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_OFFSET_ONLY   (0) - Only
        /// RSZVB_PWR_CAL_OFFSET_CPADD  (1) - Add Channel Power 
        /// 
        /// Default Value: RSZVB_PWR_CAL_OFFSET_CPADD (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetConverterPowerOffset(int Channel, int Port, double Port_Power_Offset, int Offset_Parameter)
        {
            int pInvokeResult = PInvoke.SetConverterPowerOffset(this._handle, Channel, Port, Port_Power_Offset, Offset_Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a source power or a power offset relative to the channel power for a frequency converter port &lt;Pt&gt;. An additional Cal Power Offset can be defined via SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:LEVel:OFFSet. 
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CONVerter:OFFSet?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Test port number of the analyzer
        /// 
        /// Valid Range:
        ///  &gt; 1
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_Power_Offset">
        /// This control gets the port-specific power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB
        /// </param>
        /// <param name="Offset_Parameter">
        /// This control gets the offset parameter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_OFFSET_ONLY   (0) - Only
        /// RSZVB_PWR_CAL_OFFSET_CPADD  (1) - Add Channel Power
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetConverterPowerOffset(int Channel, int Port, out double Port_Power_Offset, out int Offset_Parameter)
        {
            int pInvokeResult = PInvoke.GetConverterPowerOffset(this._handle, Channel, Port, out Port_Power_Offset, out Offset_Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether a waves are measured at the source or at the receiver frequency. The setting is relevant for all frequency-converting measurements. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:AWReceiver[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control defines whether a waves are measured at the source or at the receiver frequency.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// OFF - Measurement at source frequency
        /// ON - Measurement at receiver frequency 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMeasureAWavesState(int Channel, bool State)
        {
            int pInvokeResult = PInvoke.SetMeasureAWavesState(this._handle, Channel, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether a waves are measured at the source or at the receiver frequency. The setting is relevant for all frequency-converting measurements. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:AWReceiver[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control queries whether a waves are measured at the source or at the receiver frequency.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// OFF - Measurement at source frequency
        /// ON - Measurement at receiver frequency 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMeasureAWavesState(int Channel, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetMeasureAWavesState(this._handle, Channel, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the Local Oscillator amplifier for the reference channel a on or off. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LOReference&lt;Pt&gt;[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control switches the Local Oscillator amplifier for the reference channel a on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLocalOscilatorAState(int Channel, int Port, bool State)
        {
            int pInvokeResult = PInvoke.SetLocalOscilatorAState(this._handle, Channel, Port, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Local Oscillator amplifier for the reference channel a. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LOReference&lt;Pt&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the state of the Local Oscillator amplifier for the reference channel a.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLocalOscilatorAState(int Channel, int Port, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetLocalOscilatorAState(this._handle, Channel, Port, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the Local Oscillator amplifier for the reference channel b on or off. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LOMeasure&lt;Pt&gt;[:STATe] &lt;Boolean&gt; 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control switches the Local Oscillator amplifier for the reference channel b on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLocalOscilatorBState(int Channel, int Port, bool State)
        {
            int pInvokeResult = PInvoke.SetLocalOscilatorBState(this._handle, Channel, Port, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Local Oscillator amplifier for the reference channel b. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LOMeasure&lt;Pt&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="State">
        /// This control returns the state of the Local Oscillator amplifier for the reference channel b.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLocalOscilatorBState(int Channel, int Port, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetLocalOscilatorBState(this._handle, Channel, Port, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the complex common mode reference impedance for the balanced (logical) port numbered &lt;log_port&gt;. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LPORt&lt;log_port&gt;:ZCOMmon &lt;real&gt;[, &lt;imaginary&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Real">
        /// This control defines the real part of the port impedance.
        /// 
        /// Valid Range: 1.0e-3 Ohm to 10.0e6 Ohm
        /// 
        /// Default Value: 25 Ohm
        /// </param>
        /// <param name="Imaginary">
        /// This control defines the imaginary part of the port impedance.
        /// 
        /// Valid Range: -10.0e6 Ohm to 10.0e6 Ohm
        /// 
        /// Default Value: 0 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLogicalPortCommonRefImpedance(int Channel, int Port, double Real, double Imaginary)
        {
            int pInvokeResult = PInvoke.SetLogicalPortCommonRefImpedance(this._handle, Channel, Port, Real, Imaginary);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the complex common mode reference impedance for the balanced (logical) port numbered &lt;log_port&gt;. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LPORt&lt;log_port&gt;:ZCOMmon?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Real">
        /// This control returns the real part of the port impedance.
        /// 
        /// Valid Range: 1.0e-3 Ohm to 10.0e6 Ohm
        /// </param>
        /// <param name="Imaginary">
        /// This control returns the imaginary part of the port impedance.
        /// 
        /// Valid Range: -10.0e6 Ohm to 10.0e6 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLogicalPortCommonRefImpedance(int Channel, int Port, out double Real, out double Imaginary)
        {
            int pInvokeResult = PInvoke.GetLogicalPortCommonRefImpedance(this._handle, Channel, Port, out Real, out Imaginary);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the complex differential mode reference impedance for the balanced (logical) port numbered &lt;log_port&gt;. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LPORt&lt;log_port&gt;:ZDIFferent &lt;real&gt;[, &lt;imaginary&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Real">
        /// This control defines the real part of the port impedance.
        /// 
        /// Valid Range: 1.0e-3 Ohm to 10.0e6 Ohm
        /// 
        /// Default Value: 100 Ohm
        /// </param>
        /// <param name="Imaginary">
        /// This control defines the imaginary part of the port impedance.
        /// 
        /// Valid Range: -10.0e6 Ohm to 10.0e6 Ohm
        /// 
        /// Default Value: 0 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLogicalPortDifferentialRefImpedance(int Channel, int Port, double Real, double Imaginary)
        {
            int pInvokeResult = PInvoke.SetLogicalPortDifferentialRefImpedance(this._handle, Channel, Port, Real, Imaginary);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the complex differential mode reference impedance for the balanced (logical) port numbered &lt;log_port&gt;. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]LPORt&lt;log_port&gt;:ZDIFferent?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Real">
        /// This control returns the real part of the port impedance.
        /// 
        /// Valid Range: 1.0e-3 Ohm to 10.0e6 Ohm
        /// </param>
        /// <param name="Imaginary">
        /// This control returns the imaginary part of the port impedance.
        /// 
        /// Valid Range: -10.0e6 Ohm to 10.0e6 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLogicalPortDifferentialRefImpedance(int Channel, int Port, out double Real, out double Imaginary)
        {
            int pInvokeResult = PInvoke.GetLogicalPortDifferentialRefImpedance(this._handle, Channel, Port, out Real, out Imaginary);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the theory for the renormalization of port impedances. The selection has an impact on the conversion formulas for wave quantities and S-parameters.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:TRANsform:IMPedance:RNORmal TWAVes | PWAVes
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Theory">
        /// This control selects the theory for the renormalization of port impedances. The selection has an impact on the conversion formulas for wave quantities and S-parameters.
        /// 
        /// Valid Range:
        /// RSZVB_RENORMALIZATION_TWAV (0) - Travelling Waves
        /// RSZVB_RENORMALIZATION_PWAV (1) - Power Waves
        /// 
        /// Default Value: RSZVB_RENORMALIZATION_TWAV (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPortImpedancesRenormalization(int Channel, int Theory)
        {
            int pInvokeResult = PInvoke.SetPortImpedancesRenormalization(this._handle, Channel, Theory);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the theory for the renormalization of port impedances.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Chn&gt;:TRANsform:IMPedance:RNORmal?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Theory">
        /// This control returns the theory for the renormalization of port impedances.
        /// 
        /// Valid Range:
        /// RSZVB_RENORMALIZATION_TWAV (0) - Travelling Waves
        /// RSZVB_RENORMALIZATION_PWAV (1) - Power Waves
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPortImpedancesRenormalization(int Channel, out int Theory)
        {
            int pInvokeResult = PInvoke.GetPortImpedancesRenormalization(this._handle, Channel, out Theory);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the complex reference impedance for the physical port numbered &lt;phys_port&gt;. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PORT&lt;phys_port&gt;:ZREFerence &lt;real&gt;[, &lt;imaginary&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Real">
        /// This control defines the real part of the port impedance.
        /// 
        /// Valid Range: 1.0e-3 Ohm to 10.0e6 Ohm
        /// 
        /// Default Value: 50 Ohm
        /// </param>
        /// <param name="Imaginary">
        /// This control defines the imaginary part of the port impedance.
        /// 
        /// Valid Range: -10.0e6 Ohm to 10.0e6 Ohm
        /// 
        /// Default Value: 0 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPhysicalPortRefImpedance(int Channel, int Port, double Real, double Imaginary)
        {
            int pInvokeResult = PInvoke.SetPhysicalPortRefImpedance(this._handle, Channel, Port, Real, Imaginary);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the complex reference impedance for the physical port numbered &lt;phys_port&gt;. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PORT&lt;phys_port&gt;:ZREFerence?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Real">
        /// This control returns the real part of the port impedance.
        /// 
        /// Valid Range: 1.0e-3 Ohm to 10.0e6 Ohm
        /// </param>
        /// <param name="Imaginary">
        /// This control returns the imaginary part of the port impedance.
        /// 
        /// Valid Range: -10.0e6 Ohm to 10.0e6 Ohm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPhysicalPortRefImpedance(int Channel, int Port, out double Real, out double Imaginary)
        {
            int pInvokeResult = PInvoke.GetPhysicalPortRefImpedance(this._handle, Channel, Port, out Real, out Imaginary);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the IF gain in the measurement channel b.  
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]POWer:IFGain&lt;Pt&gt;:MEASure AUTO | LNOise | LDIStortion
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="IF_Gain">
        /// This control selects the IF gain in the measurement channel b. 
        /// 
        /// 
        /// Valid Range: 
        /// RSZVB_IF_GAIN_AUTO   (0) - Auto
        /// RSZVB_IF_GAIN_LNOISE (1) - Low Noise
        /// RSZVB_IF_GAIN_LDIST  (2) - Low Distortion
        /// 
        /// 
        /// Default Value: RSZVB_IF_GAIN_AUTO   (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIFGain(int Channel, int Port, int IF_Gain)
        {
            int pInvokeResult = PInvoke.SetIFGain(this._handle, Channel, Port, IF_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the IF gain in the measurement channel b.  
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]POWer:IFGain&lt;Pt&gt;:MEASure?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="IF_Gain">
        /// This control returns the IF gain in the measurement channel b. 
        /// 
        /// 
        /// Valid Range: 
        /// RSZVB_IF_GAIN_AUTO   (0) - Auto
        /// RSZVB_IF_GAIN_LNOISE (1) - Low Noise
        /// RSZVB_IF_GAIN_LDIST  (2) - Low Distortion
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIFGain(int Channel, int Port, out int IF_Gain)
        {
            int pInvokeResult = PInvoke.GetIFGain(this._handle, Channel, Port, out IF_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the IF gain in the reference channel a.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]POWer:IFGain&lt;Pt&gt;:REFerence AUTO | LNOise | LDIStortion
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="IF_Gain">
        /// This control selects the IF gain in the reference channel a.
        /// 
        /// Valid Range: 
        /// RSZVB_IF_GAIN_AUTO   (0) - Auto
        /// RSZVB_IF_GAIN_LNOISE (1) - Low Noise
        /// RSZVB_IF_GAIN_LDIST  (2) - Low Distortion
        /// 
        /// Default Value: RSZVB_IF_GAIN_AUTO   (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIFGainReferenceChannel(int Channel, int Port, int IF_Gain)
        {
            int pInvokeResult = PInvoke.SetIFGainReferenceChannel(this._handle, Channel, Port, IF_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the IF gain in the reference channel a.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]POWer:IFGain&lt;Pt&gt;:REFerence?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="IF_Gain">
        /// This control returns the IF gain in the reference channel a.
        /// 
        /// Valid Range: 
        /// RSZVB_IF_GAIN_AUTO   (0) - Auto
        /// RSZVB_IF_GAIN_LNOISE (1) - Low Noise
        /// RSZVB_IF_GAIN_LDIST  (2) - Low Distortion
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIFGainReferenceChannel(int Channel, int Port, out int IF_Gain)
        {
            int pInvokeResult = PInvoke.GetIFGainReferenceChannel(this._handle, Channel, Port, out IF_Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function turns the RF source power at a specified test port on or off. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STATe &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control turns the RF source power at a specified test port on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRFSignalSourceState(int Channel, int Port, bool State)
        {
            int pInvokeResult = PInvoke.SetRFSignalSourceState(this._handle, Channel, Port, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the RF source power state at a specified test port. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the RF source power state at a specified test port.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRFSignalSourceState(int Channel, int Port, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetRFSignalSourceState(this._handle, Channel, Port, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether the source power is permanently on. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:PERManent[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control defines whether the source power is permanently on.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// ON  - Power at port &lt;Pt&gt; is permanently on 
        /// OFF - Power is only on for the partial measurements that require the port as a drive port
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPermanentSignalSourceState(int Channel, int Port, bool State)
        {
            int pInvokeResult = PInvoke.SetPermanentSignalSourceState(this._handle, Channel, Port, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function checks if the source power is permanently on. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:PERManent[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control checks if the source power is permanently on.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// ON  - Power at port &lt;Pt&gt; is permanently on 
        /// OFF - Power is only on for the partial measurements that require the port as a drive port
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPermanentSignalSourceState(int Channel, int Port, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPermanentSignalSourceState(this._handle, Channel, Port, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether the external generator power is permanently on. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:GENerator&lt;Gen&gt;:PERManent[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control defines whether the external generator power is permanently on.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// ON  - Power at port &lt;Pt&gt; is permanently on 
        /// OFF - Power is only on for the partial measurements that require the port as a drive port
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPermanentSignalGeneratorState(int Channel, int Port, int Generator_Number, bool State)
        {
            int pInvokeResult = PInvoke.SetPermanentSignalGeneratorState(this._handle, Channel, Port, Generator_Number, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the external generator power is permanently on. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:GENerator&lt;Gen&gt;:PERManent[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control queries whether the external generator power is permanently on.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) 
        /// ON  - Power at port &lt;Pt&gt; is permanently on 
        /// OFF - Power is only on for the partial measurements that require the port as a drive port
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPermanentSignalGeneratorState(int Channel, int Port, int Generator_Number, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetPermanentSignalGeneratorState(this._handle, Channel, Port, Generator_Number, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the power of an external generator or its power offset relative to the channel power. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:GENerator&lt;Gen&gt;:OFFSet &lt;numeric_value&gt;, ONLY | CPADd
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Power_Offset">
        /// This control sets the port-specific power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_Parameter">
        /// This control sets the offset parameter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_OFFSET_ONLY   (0) - Only
        /// RSZVB_PWR_CAL_OFFSET_CPADD  (1) - Add Channel Power 
        /// 
        /// Default Value: RSZVB_PWR_CAL_OFFSET_CPADD (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPortPowerGeneratorOffset(int Channel, int Port_Number, int Generator_Number, double Port_Power_Offset, int Offset_Parameter)
        {
            int pInvokeResult = PInvoke.SetPortPowerGeneratorOffset(this._handle, Channel, Port_Number, Generator_Number, Port_Power_Offset, Offset_Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the power of an external generator or its power offset relative to the channel power. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:GENerator&lt;Gen&gt;:OFFSet?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Power_Offset">
        /// This control gets the port-specific power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB
        /// </param>
        /// <param name="Offset_Parameter">
        /// This control gets the offset parameter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_OFFSET_ONLY   (0) - Only
        /// RSZVB_PWR_CAL_OFFSET_CPADD  (1) - Add Channel Power
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPortPowerGeneratorOffset(int Channel, int Port_Number, int Generator_Number, out double Port_Power_Offset, out int Offset_Parameter)
        {
            int pInvokeResult = PInvoke.GetPortPowerGeneratorOffset(this._handle, Channel, Port_Number, Generator_Number, out Port_Power_Offset, out Offset_Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a linear factor to modify the internal source power at port &lt;Pt&gt; as a function of the stimulus frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) The value can be set for frequency sweeps only.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]:SLOPe &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Slope">
        /// This control defines a linear factor to modify the internal source power at port &lt;Pt&gt; as a function of the stimulus frequency.
        /// 
        /// Valid Range: -40 dB/GHz to +40 dB/GHz
        /// 
        /// Default Value: 0 dB/GHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSlope(int Channel, int Port, double Slope)
        {
            int pInvokeResult = PInvoke.SetSlope(this._handle, Channel, Port, Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a linear factor to modify the internal source power at port &lt;Pt&gt; as a function of the stimulus frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) The value can be set for frequency sweeps only.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]:SLOPe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the logical port number.
        /// 
        /// Valid Range: 1 to n/2 (n even) or (n - 1)/2 (n odd) where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The logical ports must be defined using SOURce&lt;Ch&gt;:LPORt&lt;log_port&gt;  &lt;phys_port1&gt;,&lt;phys_port2&gt; (function rszvb_DefineBalancedPort)
        /// </param>
        /// <param name="Slope">
        /// This control returns the slope.
        /// 
        /// Valid Range: -40 dB/GHz to +40 dB/GHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSlope(int Channel, int Port, out double Slope)
        {
            int pInvokeResult = PInvoke.GetSlope(this._handle, Channel, Port, out Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the source combiner for reference channel on or off.
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This function is available only with hardware option B11.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer:COMBiner ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control switches the source combiner for reference channel on or off.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSourceCombinerState(int Channel, bool State)
        {
            int pInvokeResult = PInvoke.SetSourceCombinerState(this._handle, Channel, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source combiner for reference channel.
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) This function is available only with hardware option B11.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer:COMBiner?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the source combiner for reference channel.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSourceCombinerState(int Channel, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetSourceCombinerState(this._handle, Channel, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the stimulus signal that is used for the definition of the frequency sweep range or CW frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) This command is particularly useful in arbitrary mode (with option R&amp;S ZVA-K4), where the frequencies and source powers at the ports are independent. 
        /// 
        /// (2) For R&amp;S ZVA and ZVT analyzers without option R&amp;S ZVA-K4, all powers are coupled so that this selection has no effect. 
        /// 
        /// (3) For R&amp;S ZVB analyzers, all frequencies are coupled so that this selection has no effect. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:AXIS:FREQuency '&lt;frequency_ref&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency_Stimulus">
        /// This control selects the stimulus signal that is used for the definition of the frequency sweep range or CW frequency.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) Could use one of the following signals: 
        /// 
        /// 'Channel Base; Source' - Base channel frequency 
        /// 'Port 1; Source'       - Source frequency at port 1, 
        /// 'Port 2; Source'       - Source frequency at port 2 
        /// ...
        /// 'Port All; Receiver'   - Receiver frequency (equal for all analyzer ports)
        /// 'Gen 1; Source'        - External generator frequency 1 
        /// ...
        /// 'Pmtr 1; Receiver'     - External power meter frequency 1 
        /// ...
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyStimulus(int Channel, string Frequency_Stimulus)
        {
            int pInvokeResult = PInvoke.SetFrequencyStimulus(this._handle, Channel, Frequency_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stimulus signal that is used for the definition of the frequency sweep range or CW frequency. 
        /// 
        /// Note(s):
        /// 
        /// (1) This command is particularly useful in arbitrary mode (with option R&amp;S ZVA-K4), where the frequencies and source powers at the ports are independent. 
        /// 
        /// (2) For R&amp;S ZVA and ZVT analyzers without option R&amp;S ZVA-K4, all powers are coupled so that this selection has no effect. 
        /// 
        /// (3) For R&amp;S ZVB analyzers, all frequencies are coupled so that this selection has no effect. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:AXIS:FREQuency?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency_Stimulus">
        /// This control returns the stimulus signal that is used for the definition of the frequency sweep range or CW frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyStimulus(int Channel, System.Text.StringBuilder Frequency_Stimulus)
        {
            int pInvokeResult = PInvoke.GetFrequencyStimulus(this._handle, Channel, Frequency_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the stimulus signal that is used for the definition of the power sweep range or fixed power.  
        /// 
        /// Note(s):
        /// 
        /// (1) This command is particularly useful in arbitrary mode (with option R&amp;S ZVA-K4), where the frequencies and source powers at the ports are independent. 
        /// 
        /// (2) For R&amp;S ZVA and ZVT analyzers without option R&amp;S ZVA-K4, all powers are coupled so that this selection has no effect. 
        /// 
        /// (3) For R&amp;S ZVB analyzers, all frequencies are coupled so that this selection has no effect. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:AXIS:POWer '&lt;power_ref&gt;' 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Stimulus">
        /// This control selects the stimulus signal that is used for the definition of the power sweep range or fixed power. 
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) Could use one of the following signals: 
        /// 
        /// 'Channel Base; Source' - Base channel power 
        /// 'Port 1; Source' - Source power at port 1, 
        /// 'Port 2; Source' - Source power at port 2 
        /// ...
        /// 'Gen 1; Source' - External generator power 1 
        /// ...
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerStimulus(int Channel, string Power_Stimulus)
        {
            int pInvokeResult = PInvoke.SetPowerStimulus(this._handle, Channel, Power_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stimulus signal that is used for the definition of the power sweep range or fixed power.  
        /// 
        /// Note(s):
        /// 
        /// (1) This command is particularly useful in arbitrary mode (with option R&amp;S ZVA-K4), where the frequencies and source powers at the ports are independent. 
        /// 
        /// (2) For R&amp;S ZVA and ZVT analyzers without option R&amp;S ZVA-K4, all powers are coupled so that this selection has no effect. 
        /// 
        /// (3) For R&amp;S ZVB analyzers, all frequencies are coupled so that this selection has no effect. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:AXIS:POWer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Stimulus">
        /// This control returns the stimulus signal that is used for the definition of the power sweep range or fixed power. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerStimulus(int Channel, System.Text.StringBuilder Power_Stimulus)
        {
            int pInvokeResult = PInvoke.GetPowerStimulus(this._handle, Channel, Power_Stimulus);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the true differential mode on or off. This command is available only if a suitable balanced port configuration is active. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="True_Differential_Mode_State">
        /// This control switches the true differential mode on or off. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFState(int Channel, bool True_Differential_Mode_State)
        {
            int pInvokeResult = PInvoke.SetTDIFState(this._handle, Channel, System.Convert.ToUInt16(True_Differential_Mode_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the true differential mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="True_Differential_Mode_State">
        /// This control returns the state of the true differential mode. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFState(int Channel, out bool True_Differential_Mode_State)
        {
            ushort True_Differential_Mode_StateAsUShort;
            int pInvokeResult = PInvoke.GetTDIFState(this._handle, Channel, out True_Differential_Mode_StateAsUShort);
            True_Differential_Mode_State = System.Convert.ToBoolean(True_Differential_Mode_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a logical (balanced) port for the amplitude imbalance sweep in true differential mode. A balanced port configuration must be defined and an amplitude imbalance sweep must be active to use this function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:AMPLitude:LPORt  &lt;log_port&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control selects a logical (balanced) port for the amplitude imbalance sweep in true differential mode.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFAmplitudeImbalanceLogicalPort(int Channel, int Port)
        {
            int pInvokeResult = PInvoke.SetTDIFAmplitudeImbalanceLogicalPort(this._handle, Channel, Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a logical (balanced) port for the amplitude imbalance sweep in true differential mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:AMPLitude:LPORt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control returns a logical (balanced) port for the amplitude imbalance sweep in true differential mode.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFAmplitudeImbalanceLogicalPort(int Channel, out int Port)
        {
            int pInvokeResult = PInvoke.GetTDIFAmplitudeImbalanceLogicalPort(this._handle, Channel, out Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the start power for an amplitude imbalance sweep, which is equal to the left edge of a Cartesian diagram. A balanced port configuration must be defined and an amplitude imbalance sweep must be active to use this function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:AMPLitude:STARt &lt;start_power&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Power">
        /// This control defines the start power for an amplitude imbalance sweep, which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -40.0 dBm to +9.99 dBm
        /// 
        /// Default Value: -10.0 dBm
        /// 
        /// Note(s):
        /// 
        /// (1) The exact range depends on the analyzer model.
        /// 
        /// (2) The start power must be smaller than the stop power.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFAmplitudeImbalanceStartPower(int Channel, double Start_Power)
        {
            int pInvokeResult = PInvoke.SetTDIFAmplitudeImbalanceStartPower(this._handle, Channel, Start_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start power for an amplitude imbalance sweep, which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:AMPLitude:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Power">
        /// This control returns the start power for an amplitude imbalance sweep, which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -40.0 dBm to +9.99 dBm
        /// 
        /// Note(s):
        /// 
        /// (1) The exact range depends on the analyzer model.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFAmplitudeImbalanceStartPower(int Channel, out double Start_Power)
        {
            int pInvokeResult = PInvoke.GetTDIFAmplitudeImbalanceStartPower(this._handle, Channel, out Start_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stop power for an amplitude imbalance sweep, which is equal to the right edge of a Cartesian diagram. A balanced port configuration must be defined and an amplitude imbalance sweep must be active to use this function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:AMPLitude:STOP &lt;stop_power&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Power">
        /// This control defines the stop power for an amplitude imbalance sweep, which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -39.99 dBm to +10.0 dBm
        /// 
        /// Default Value: +10.0 dBm
        /// 
        /// Note(s):
        /// 
        /// (1) The exact range depends on the analyzer model.
        /// 
        /// (2) The stop power must be larger than the start power.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFAmplitudeImbalanceStopPower(int Channel, double Stop_Power)
        {
            int pInvokeResult = PInvoke.SetTDIFAmplitudeImbalanceStopPower(this._handle, Channel, Stop_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop power for an amplitude imbalance sweep, which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:AMPLitude:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Power">
        /// This control returns the stop power for an amplitude imbalance sweep, which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -39.99 dBm to +10.0 dBm
        /// 
        /// Note(s):
        /// 
        /// (1) The exact range depends on the analyzer model.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFAmplitudeImbalanceStopPower(int Channel, out double Stop_Power)
        {
            int pInvokeResult = PInvoke.GetTDIFAmplitudeImbalanceStopPower(this._handle, Channel, out Stop_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a logical (balanced) port for the phase imbalance sweep in true differential mode. A balanced port configuration must be defined and an amplitude imbalance sweep must be active to use this function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:PHASe:LPORt  &lt;log_port&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control selects a logical (balanced) port for the phase imbalance sweep in true differential mode.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFPhaseImbalanceLogicalPort(int Channel, int Port)
        {
            int pInvokeResult = PInvoke.SetTDIFPhaseImbalanceLogicalPort(this._handle, Channel, Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a logical (balanced) port for the phase imbalance sweep in true differential mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:PHASe:LPORt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control returns a logical (balanced) port for the phase imbalance sweep in true differential mode.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFPhaseImbalanceLogicalPort(int Channel, out int Port)
        {
            int pInvokeResult = PInvoke.GetTDIFPhaseImbalanceLogicalPort(this._handle, Channel, out Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the start phase for a phase imbalance sweep, which is equal to the left edge of a Cartesian diagram. A balanced port configuration must be defined and an amplitude imbalance sweep must be active to use this function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:PHASe:STARt &lt;start_phase&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Phase">
        /// This control defines the start phase for a phase imbalance sweep, which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -180 deg to +179.99 deg 
        /// 
        /// Default Value: -180.0 deg
        /// 
        /// Note(s):
        /// 
        /// (1) The start phase must be smaller than the stop phase.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFPhaseImbalanceStartPhase(int Channel, double Start_Phase)
        {
            int pInvokeResult = PInvoke.SetTDIFPhaseImbalanceStartPhase(this._handle, Channel, Start_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start phase for a phase imbalance sweep, which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:PHASe:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Start_Phase">
        /// This control returns the start phase for a phase imbalance sweep, which is equal to the left edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -180 deg to +179.99 deg 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFPhaseImbalanceStartPhase(int Channel, out double Start_Phase)
        {
            int pInvokeResult = PInvoke.GetTDIFPhaseImbalanceStartPhase(this._handle, Channel, out Start_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the stop phase for a phase imbalance sweep, which is equal to the right edge of a Cartesian diagram. A balanced port configuration must be defined and an amplitude imbalance sweep must be active to use this function.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:PHASe:STOP &lt;stop_phase&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Phase">
        /// This control defines the stop phase for a phase imbalance sweep, which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -179.99 deg to +180 deg 
        /// 
        /// Default Value: 180.0 deg
        /// 
        /// Note(s):
        /// 
        /// (1) The stop phase must be larger than the start phase.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFPhaseImbalanceStopPhase(int Channel, double Stop_Phase)
        {
            int pInvokeResult = PInvoke.SetTDIFPhaseImbalanceStopPhase(this._handle, Channel, Stop_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop phase for a phase imbalance sweep, which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:IMBalance:PHASe:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Stop_Phase">
        /// This control returns the stop phase for a phase imbalance sweep, which is equal to the right edge of a Cartesian diagram.
        /// 
        /// Valid Range:
        /// -179.99 deg to +180 deg 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFPhaseImbalanceStopPhase(int Channel, out double Stop_Phase)
        {
            int pInvokeResult = PInvoke.GetTDIFPhaseImbalanceStopPhase(this._handle, Channel, out Stop_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function qualifies whether the source power (SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate][:AMPlitude]) is equal to the power of each single-ended wave or to the balanced waves in true differential mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6 and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:WAVes SENDed | DCMode
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source_Power_Mode">
        /// This control selects the power of each single-ended wave or the balanced waves in true differential mode. 
        /// 
        /// Valid Values:
        /// RSZVB_POWER_SENDED (0) - Single-ended
        /// RSZVB_POWER_DCMODE (1) - Differential and Common Mode
        /// 
        /// Default Value: RSZVB_POWER_SENDED (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Single-ended: Same Differential and Common Mode Voltages as in Single-Ended Mode.
        /// 
        /// (2) Differential and Common Mode: Apply to Differential (Zd = 2Z0) and Common Mode (Zd = Z0/2) Waves.  
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFSourcePowerMode(int Channel, int Source_Power_Mode)
        {
            int pInvokeResult = PInvoke.SetTDIFSourcePowerMode(this._handle, Channel, Source_Power_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns source power mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6 and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:TDIF:WAVes?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source_Power_Mode">
        /// This control returns the power of each single-ended wave or the balanced waves in true differential mode. 
        /// 
        /// Valid Values:
        /// RSZVB_POWER_SENDED (0) - Single-ended
        /// RSZVB_POWER_DCMODE (1) - Differential and Common Mode
        /// 
        /// Note(s):
        /// 
        /// (1) Single-ended: Same Differential and Common Mode Voltages as in Single-Ended Mode.
        /// 
        /// (2) Differential and Common Mode: Apply to Differential (Zd = 2Z0) and Common Mode (Zd = Z0/2) Waves.  
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFSourcePowerMode(int Channel, out int Source_Power_Mode)
        {
            int pInvokeResult = PInvoke.GetTDIFSourcePowerMode(this._handle, Channel, out Source_Power_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the calculation method for S-parameters, ratios and derived quantities during an amplitude imbalance or phase imbalance sweep.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6 and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TDIF:IMBalance:COMPensation[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Compensation_State">
        /// This control switches the compensation state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON:  Compensate imbalance of a waves 
        /// 
        /// (2) OFF: Use the actual a-waves, depending on the imbalance parameters. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTDIFCompensationState(int Channel, bool Compensation_State)
        {
            int pInvokeResult = PInvoke.SetTDIFCompensationState(this._handle, Channel, System.Convert.ToUInt16(Compensation_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the calculation method state.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K6 and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// CALCulate:TDIF:IMBalance:COMPensation[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Compensation_State">
        /// This control returns the compensation imbalance state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) ON:  Compensate imbalance of a waves 
        /// 
        /// (2) OFF: Use the actual a-waves, depending on the imbalance parameters. 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTDIFCompensationState(int Channel, out bool Compensation_State)
        {
            ushort Compensation_StateAsUShort;
            int pInvokeResult = PInvoke.GetTDIFCompensationState(this._handle, Channel, out Compensation_StateAsUShort);
            Compensation_State = System.Convert.ToBoolean(Compensation_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function turns the pulse generator on or off.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Pulse_Generator_State">
        /// This control turns the pulse generator on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorState(int Channel, bool Pulse_Generator_State)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorState(this._handle, Channel, System.Convert.ToUInt16(Pulse_Generator_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse generator state.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Pulse_Generator_State">
        /// This control returns the pulse generator state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorState(int Channel, out bool Pulse_Generator_State)
        {
            ushort Pulse_Generator_StateAsUShort;
            int pInvokeResult = PInvoke.GetPulseGeneratorState(this._handle, Channel, out Pulse_Generator_StateAsUShort);
            Pulse_Generator_State = System.Convert.ToBoolean(Pulse_Generator_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the properties of the pulse generator signals.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TYPE SINGle | TRAin | CHIGh | CLOW
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:WIDTh
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:PERiod
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:PERiod
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:POLarity NORMal | INVerted
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:MODE CSPecific | CONTinuous
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Number of the pulse generator signal.
        /// 
        /// Valid Range: 
        /// 1 - pulse generator
        /// 2 - sync generator
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Type">
        /// Selects the pulse type of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// RSZVB_PULS_TYPE_SING (0) - Single Pulse 
        /// RSZVB_PULS_TYPE_TRAI (1) - Pulse Train 
        /// RSZVB_PULS_TYPE_CHIG (2) - Constant High 
        /// RSZVB_PULS_TYPE_CLOW (3) - Constant Low 
        /// 
        /// Default Value: RSZVB_PULS_TYPE_SING (0)
        /// </param>
        /// <param name="Pulse_Width">
        /// Defines the pulse width of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s  - pulse generator signal, increment: 100 ns 
        /// 12.5e-9 to 53.6870911875 s - sync signal, increment: 12.5 ns
        /// 
        /// Default Value: 0.5e-6 s
        /// </param>
        /// <param name="Single_Train_Pulse_Period">
        /// Defines the pulse period of the (single) pulse generator signal.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s
        /// 
        /// Default Value: 100.0e-6 s
        /// </param>
        /// <param name="Pulse_Polarity">
        /// Selects the polarity of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// RSZVB_PULS_POL_NORM (0) - Normal
        /// RSZVB_PULS_POL_INV  (1) - Inverted
        /// 
        /// Default Value: RSZVB_PULS_POL_NORM (0)
        /// </param>
        /// <param name="Pulse_Mode">
        /// Selects the channel-specific or continuous pulse mode. 
        /// 
        /// Valid Values:
        /// RSZVB_PULS_MODE_CSP  (0) - Channel Specific
        /// RSZVB_PULS_MODE_CONT (1) - Continuous Pulse
        /// 
        /// Default Value: RSZVB_PULS_MODE_CSP (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefinePulseGenerator(int Channel, int Generator, int Pulse_Type, double Pulse_Width, double Single_Train_Pulse_Period, int Pulse_Polarity, int Pulse_Mode)
        {
            int pInvokeResult = PInvoke.DefinePulseGenerator(this._handle, Channel, Generator, Pulse_Type, Pulse_Width, Single_Train_Pulse_Period, Pulse_Polarity, Pulse_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function adds and enables/disables an arbitrary number of pulse train segments. Each segment consists of a single pulse of definite width and position which may be active or inactive.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:DATA &lt;Active&gt;, &lt;Start High&gt;, &lt;Stop High&gt;{, &lt;Active&gt;, &lt;Start High&gt;, &lt;Stop High&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the controls Pulse Train State, Start High and Stop High.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Train_Active">
        /// Identifier for the state of the pulse train segment.  
        /// 
        /// Valid Values:
        /// 0 - Pulse train segment inactive, range defined but no pulse generated
        /// 1 - Pulse train segment active 
        /// 
        /// Default Value: none
        /// 
        /// Note(s):
        /// 
        /// (1) Number of elements should be the same as Buffer Size.
        /// </param>
        /// <param name="Start_Time">
        /// Start time of the segment (pulse). 
        /// 
        /// Valid Values:
        /// 0 s to 54975.5813622 s
        /// 
        /// Default Value: none
        /// 
        /// Note(s):
        /// 
        /// (1) Number of elements should be the same as Buffer Size.
        /// </param>
        /// <param name="Stop_Time">
        /// Stop time of the segment (pulse). 
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54975.5813632 s
        /// 
        /// Default Value: none
        /// 
        /// Note(s):
        /// 
        /// (1) Number of elements should be the same as Buffer Size.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefinePulseTrainSegments(int Channel, int Buffer_Size, int[] Pulse_Train_Active, double[] Start_Time, double[] Stop_Time)
        {
            int pInvokeResult = PInvoke.DefinePulseTrainSegments(this._handle, Channel, Buffer_Size, Pulse_Train_Active, Start_Time, Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the properties of the chopped pulse profile.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:CPPRofile
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:DINCrement
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Chopped_Pulse_Profile_Mode">
        /// This control enables or disables the chopped pulse profile mode
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Delay_Increment">
        /// Defines a delay increment for the sync signal in chopped pulse profile mode. The delay increment defines the distance between two measurement intervals (sweep points). For sweep point no. n, the total delay of thhe sync signal relative to the pulse generator signal is &lt;Delay&gt; + n * &lt;Increment&gt;.
        /// 
        /// Valid Values:
        /// 0.0 s to 0.8191875 s
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureChoppedPulseProfile(int Channel, bool Chopped_Pulse_Profile_Mode, double Delay_Increment)
        {
            int pInvokeResult = PInvoke.ConfigureChoppedPulseProfile(this._handle, Channel, System.Convert.ToUInt16(Chopped_Pulse_Profile_Mode), Delay_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the pulse type of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TYPE SINGle | TRAin | CHIGh | CLOW
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Number of the pulse generator signal.
        /// 
        /// Valid Range: 
        /// 1 - pulse generator
        /// 2 - sync generator
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Type">
        /// Selects the pulse type of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// RSZVB_PULS_TYPE_SING (0) - Single Pulse 
        /// RSZVB_PULS_TYPE_TRAI (1) - Pulse Train 
        /// RSZVB_PULS_TYPE_CHIG (2) - Constant High 
        /// RSZVB_PULS_TYPE_CLOW (3) - Constant Low 
        /// 
        /// Default Value: RSZVB_PULS_TYPE_SING (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorType(int Channel, int Generator, int Pulse_Type)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorType(this._handle, Channel, Generator, Pulse_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse type of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TYPE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Number of the pulse generator signal.
        /// 
        /// Valid Range: 
        /// 1 - pulse generator
        /// 2 - sync generator
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Type">
        /// Returns the pulse type of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// RSZVB_PULS_TYPE_SING (0) - Single Pulse 
        /// RSZVB_PULS_TYPE_TRAI (1) - Pulse Train 
        /// RSZVB_PULS_TYPE_CHIG (2) - Constant High 
        /// RSZVB_PULS_TYPE_CLOW (3) - Constant Low
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorType(int Channel, int Generator, out int Pulse_Type)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorType(this._handle, Channel, Generator, out Pulse_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the pulse width of the pulse generator signal &lt;gen_no&gt;.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:WIDTh
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Number of the pulse generator signal.
        /// 
        /// Valid Range: 
        /// 1 - pulse generator
        /// 2 - sync generator
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Width">
        /// Defines the pulse width of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s  - pulse generator signal, increment: 100 ns 
        /// 12.5e-9 to 53.6870911875 s - sync signal, increment: 12.5 ns
        /// 
        /// Default Value: 0.5e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorWidth(int Channel, int Generator, double Pulse_Width)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorWidth(this._handle, Channel, Generator, Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse width of the pulse generator signal &lt;gen_no&gt;.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:WIDTh?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Number of the pulse generator signal.
        /// 
        /// Valid Range: 
        /// 1 - pulse generator
        /// 2 - sync generator
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Width">
        /// Returns the pulse width of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s         - pulse generator signal
        /// 12.5e-9 to 53.6870911875 s - sync signal
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorWidth(int Channel, int Generator, out double Pulse_Width)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorWidth(this._handle, Channel, Generator, out Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the pulse period of the single pulse generator signal.  
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:PERiod
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Single_Pulse_Period">
        /// Defines the pulse period of the (single) pulse generator signal.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s
        /// 
        /// Default Value: 100.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorSinglePeriod(int Channel, double Single_Pulse_Period)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorSinglePeriod(this._handle, Channel, Single_Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse period of the single pulse generator signal.  
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:PERiod?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Single_Pulse_Period">
        /// Returns the pulse period of the (single) pulse generator signal.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorSinglePeriod(int Channel, out double Single_Pulse_Period)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorSinglePeriod(this._handle, Channel, out Single_Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the pulse period of the (single) pulse generator signal.  
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:PERiod
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Train_Pulse_Period">
        /// Defines the pulse period of the (single) pulse generator signal.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s
        /// 
        /// Default Value: 100.0e-6 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorTrainPeriod(int Channel, double Train_Pulse_Period)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorTrainPeriod(this._handle, Channel, Train_Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse period of the (single) pulse generator signal.  
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:PERiod?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Train_Pulse_Period">
        /// Returns the pulse period of the (single) pulse generator signal.  
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54948 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorTrainPeriod(int Channel, out double Train_Pulse_Period)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorTrainPeriod(this._handle, Channel, out Train_Pulse_Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the polarity of the pulse generator signal &lt;gen_no&gt;. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:POLarity NORMal | INVerted
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Number of the pulse generator signal.
        /// 
        /// Valid Range: 
        /// 1 - pulse generator
        /// 2 - sync generator
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Polarity">
        /// Selects the polarity of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// RSZVB_PULS_POL_NORM (0) - Normal
        /// RSZVB_PULS_POL_INV  (1) - Inverted
        /// 
        /// Default Value: RSZVB_PULS_POL_NORM (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorPolarity(int Channel, int Generator, int Pulse_Polarity)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorPolarity(this._handle, Channel, Generator, Pulse_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the polarity of the pulse generator signal &lt;gen_no&gt;. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:POLarity?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Number of the pulse generator signal.
        /// 
        /// Valid Range: 
        /// 1 - pulse generator
        /// 2 - sync generator
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Polarity">
        /// Returns the polarity of the pulse generator signal &lt;gen_no&gt;.  
        /// 
        /// Valid Values:
        /// RSZVB_PULS_POL_NORM (0) - Normal
        /// RSZVB_PULS_POL_INV  (1) - Inverted
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorPolarity(int Channel, int Generator, out int Pulse_Polarity)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorPolarity(this._handle, Channel, Generator, out Pulse_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the channel-specific or continuous pulse mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:MODE CSPecific | CONTinuous
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Pulse_Mode">
        /// Selects the channel-specific or continuous pulse mode. 
        /// 
        /// Valid Values:
        /// RSZVB_PULS_MODE_CSP  (0) - Channel Specific
        /// RSZVB_PULS_MODE_CONT (1) - Continuous Pulse
        /// 
        /// Default Value: RSZVB_PULS_MODE_CSP (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorMode(int Channel, int Pulse_Mode)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorMode(this._handle, Channel, Pulse_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel-specific or continuous pulse mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Pulse_Mode">
        /// Returns the channel-specific or continuous pulse mode. 
        /// 
        /// Valid Values:
        /// RSZVB_PULS_MODE_CSP  (0) - Channel Specific
        /// RSZVB_PULS_MODE_CONT (1) - Continuous Pulse
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorMode(int Channel, out int Pulse_Mode)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorMode(this._handle, Channel, out Pulse_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the pulse train segments. Each segment consists of a single pulse of definite width and position which may be active or inactive.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:DATA?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the controls Pulse Train State, Start High and Stop High.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Pulse_Train_Active">
        /// Returns the states of the pulse train segments.
        /// 
        /// Valid Values:
        /// 0 - Pulse train segment inactive, range defined but no pulse generated
        /// 1 - Pulse train segment active 
        /// 
        /// Note(s):
        /// 
        /// (1) Number of elements should be the same as Buffer Size.
        /// </param>
        /// <param name="Start_Time">
        /// Returns the Start times of the segment (pulse). 
        /// 
        /// Valid Values:
        /// 0 s to 54975.5813622 s
        /// 
        /// Note(s):
        /// 
        /// (1) Number of elements should be the same as Buffer Size.
        /// </param>
        /// <param name="Stop_Time">
        /// Returns the Stop times of the segment (pulse). 
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54975.5813632 s
        /// 
        /// Note(s):
        /// 
        /// (1) Number of elements should be the same as Buffer Size.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTrainSegments(int Channel, int Buffer_Size, int[] Pulse_Train_Active, double[] Start_Time, double[] Stop_Time)
        {
            int pInvokeResult = PInvoke.GetPulseTrainSegments(this._handle, Channel, Buffer_Size, Pulse_Train_Active, Start_Time, Stop_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function set the pulse train segment no. &lt;Seg&gt; active or inactive
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:SEGMent&lt;Seg&gt;[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment_State">
        /// This control set the pulse train segment no. &lt;Seg&gt; active or inactive.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseTrainSegmentState(int Channel, int Segment, bool Segment_State)
        {
            int pInvokeResult = PInvoke.SetPulseTrainSegmentState(this._handle, Channel, Segment, System.Convert.ToUInt16(Segment_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the pulse train segment.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:SEGMent&lt;Seg&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment_State">
        /// This control returns the state of the pulse train segment..
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTrainSegmentState(int Channel, int Segment, out bool Segment_State)
        {
            ushort Segment_StateAsUShort;
            int pInvokeResult = PInvoke.GetPulseTrainSegmentState(this._handle, Channel, Segment, out Segment_StateAsUShort);
            Segment_State = System.Convert.ToBoolean(Segment_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function changes the start time of a pulse train segment. A range must be created first to enable this function (rszvb_DefinePulseTrainSegments). 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:SEGMent&lt;Seg&gt;:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment_Start">
        /// This control changes the start time of a pulse train segment.
        /// 
        /// Valid Values:
        /// 0.0 to 54975.5813622 s
        /// 
        /// Default Value: 0.0 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseTrainSegmentStart(int Channel, int Segment, double Segment_Start)
        {
            int pInvokeResult = PInvoke.SetPulseTrainSegmentStart(this._handle, Channel, Segment, Segment_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the start time of a pulse train segment.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:SEGMent&lt;Seg&gt;:STARt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment_Start">
        /// This control returns the start time of a pulse train segment.
        /// 
        /// Valid Values:
        /// 0.0 to 54975.5813622 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTrainSegmentStart(int Channel, int Segment, out double Segment_Start)
        {
            int pInvokeResult = PInvoke.GetPulseTrainSegmentStart(this._handle, Channel, Segment, out Segment_Start);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function changes the stop time of a pulse train segment. A range must be created first to enable this function (rszvb_DefinePulseTrainSegments). 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:SEGMent&lt;Seg&gt;:STOP
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment_Stop">
        /// This control changes the stop time of a pulse train segment.
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54975.5813632 s
        /// 
        /// Default Value: 12.5e-9 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseTrainSegmentStop(int Channel, int Segment, double Segment_Stop)
        {
            int pInvokeResult = PInvoke.SetPulseTrainSegmentStop(this._handle, Channel, Segment, Segment_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the stop time of a pulse train segment.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:SEGMent&lt;Seg&gt;:STOP?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment">
        /// Segment number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment_Stop">
        /// This control returns the stop time of a pulse train segment.
        /// 
        /// Valid Values:
        /// 12.5e-9 to 54975.5813632 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTrainSegmentStop(int Channel, int Segment, out double Segment_Stop)
        {
            int pInvokeResult = PInvoke.GetPulseTrainSegmentStop(this._handle, Channel, Segment, out Segment_Stop);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the number of pulse train segments.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:SEGMent&lt;Seg&gt;:COUNt? 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Segment_Count">
        /// This control queries the number of pulse train segments.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseTrainSegmentCount(int Channel, out int Segment_Count)
        {
            int pInvokeResult = PInvoke.GetPulseTrainSegmentCount(this._handle, Channel, out Segment_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all pulse train segments..
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:TRAin:DELete:ALL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteAllPulseTrainSegments(int Channel)
        {
            int pInvokeResult = PInvoke.DeleteAllPulseTrainSegments(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves a pulse train definition associated with a specified channel to a pulse train file.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:PTRain &lt;Channel&gt;, &lt;Generator&gt;, '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Generator number.
        /// 
        /// Valid Range: 
        /// 1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) In the present firmware version, this number is always 1.
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the created pulse train file. The default extension (manual control) for pulse train files is *.train, although other extensions are allowed. If no path is specified the analyzer uses the current directory
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SavePulseTrainFile(int Channel, int Generator, string File_Name)
        {
            int pInvokeResult = PInvoke.SavePulseTrainFile(this._handle, Channel, Generator, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads a pulse train definition from a specified file and assigns it to a channel with a specified number.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:PTRain &lt;Channel&gt;, &lt;Generator&gt;, '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator">
        /// Generator number.
        /// 
        /// Valid Range: 
        /// 1
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) In the present firmware version, this number is always 1.
        /// </param>
        /// <param name="File_Name">
        /// String parameter to specify the name and directory of the pulse train file to be loaded. The default extension (manual control) for pulse train files is *.train, although other extensions are allowed. If no path is specified the analyzer searches the current directory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadPulseTrainFile(int Channel, int Generator, string File_Name)
        {
            int pInvokeResult = PInvoke.LoadPulseTrainFile(this._handle, Channel, Generator, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the delay of the sync signal relative to the pulse generator signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:DELay
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delay">
        /// Defines the delay of the sync signal relative to the pulse generator signal.  
        /// 
        /// Valid Values:
        /// -26.8435455875 to +53.6870911875 s
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorDelay(int Channel, double Delay)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorDelay(this._handle, Channel, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the delay of the sync signal relative to the pulse generator signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:DELay?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delay">
        /// Returns the delay of the sync signal relative to the pulse generator signal.  
        /// 
        /// Valid Values:
        /// -26.8435455875 to +53.6870911875 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorDelay(int Channel, out double Delay)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorDelay(this._handle, Channel, out Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the chopped pulse profile mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:CPPRofile
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Chopped_Pulse_Profile_Mode">
        /// This control enables or disables the chopped pulse profile mode
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetChoppedPulseProfileMode(int Channel, bool Chopped_Pulse_Profile_Mode)
        {
            int pInvokeResult = PInvoke.SetChoppedPulseProfileMode(this._handle, Channel, System.Convert.ToUInt16(Chopped_Pulse_Profile_Mode));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the chopped pulse profile mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:CPPRofile?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Chopped_Pulse_Profile_Mode">
        /// This control returns the state of the chopped pulse profile mode
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetChoppedPulseProfileMode(int Channel, out bool Chopped_Pulse_Profile_Mode)
        {
            ushort Chopped_Pulse_Profile_ModeAsUShort;
            int pInvokeResult = PInvoke.GetChoppedPulseProfileMode(this._handle, Channel, out Chopped_Pulse_Profile_ModeAsUShort);
            Chopped_Pulse_Profile_Mode = System.Convert.ToBoolean(Chopped_Pulse_Profile_ModeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a delay increment for the sync signal in chopped pulse profile mode. The delay increment defines the distance between two measurement intervals (sweep points). For sweep point no. n, the total delay of thhe sync signal relative to the pulse generator signal is &lt;Delay&gt; + n * &lt;Increment&gt;.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:DINCrement
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delay_Increment">
        /// Defines a delay increment for the sync signal in chopped pulse profile mode.
        /// 
        /// Valid Values:
        /// 0.0 s to 0.8191875 s
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetChoppedPulseProfileDelayIncrement(int Channel, double Delay_Increment)
        {
            int pInvokeResult = PInvoke.SetChoppedPulseProfileDelayIncrement(this._handle, Channel, Delay_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a delay increment for the sync signal in chopped pulse profile mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVA-K27.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PULSe:GENerator&lt;gen_no&gt;:DINCrement?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delay_Increment">
        /// Returns a delay increment for the sync signal in chopped pulse profile mode.
        /// 
        /// Valid Values:
        /// 0.0 s to 0.8191875 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetChoppedPulseProfileDelayIncrement(int Channel, out double Delay_Increment)
        {
            int pInvokeResult = PInvoke.GetChoppedPulseProfileDelayIncrement(this._handle, Channel, out Delay_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the different signal paths in the Extension Unit R&amp;S ZVAX24.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:COMBiner[:STATe] 
        /// [SENSe&lt;Ch&gt;:]EUNit:HFILter&lt;Path&gt;[:STATe] 
        /// [SENSe&lt;Ch&gt;:]EUNit:PMODulator&lt;Path&gt;[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Path">
        /// Signal path number.
        /// 
        /// Valid Range: 
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path. 
        /// </param>
        /// <param name="Internal_Combiner">
        /// This control switches the internal combiner in-between the RF signal paths no. 1 and 3 (source path).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Internal combiner used. The combined source signals of the R&amp;S ZVAX signal paths 1 and 3 are available at the NWA port 1. 
        /// 
        /// (2) OFF - No combiner used (through path). The source signals of the R&amp;S ZVAX signal paths 1 and 3 are available at the NWA ports no. 1 and 3, respectively
        /// </param>
        /// <param name="Harmonic_Filter">
        /// This control loops harmonic filters into the RF signal paths no. &lt;Path&gt;. Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Harmonic filter used  
        /// 
        /// (2) OFF - No harmonic filter (through path)
        ///  
        /// </param>
        /// <param name="Pulse_Modulator">
        /// This control loops pulse modulators into the RF signal paths no. &lt;Path&gt;. Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Pulse modulator used  
        /// 
        /// (2) OFF - No pulse modulator (through path) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureZVAXPath(int Channel, int Path, bool Internal_Combiner, bool Harmonic_Filter, bool Pulse_Modulator)
        {
            int pInvokeResult = PInvoke.ConfigureZVAXPath(this._handle, Channel, Path, System.Convert.ToUInt16(Internal_Combiner), System.Convert.ToUInt16(Harmonic_Filter), System.Convert.ToUInt16(Pulse_Modulator));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the source and the output of the pulse generator signals and assigns pulse generator signals to the pulse modulators of the Extension Unit R&amp;S ZVAXxx.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:INPut:EXTernal
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:ASSignment G1Mall | G2Mall | G1M2 | G1M3
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:OUTPut:EXTernal
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Ext_Signal_Generator_Input">
        /// This control selects the R&amp;S ZVA or an external pulse generator as a source for the pulse generator signals. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - External generator signals, fed in via EXT PULSE GENERATOR IN  
        /// 
        /// (2) OFF - R&amp;S ZVA signals, fed in via CASCADE IN  
        /// </param>
        /// <param name="Ext_Signal_Generator_Output">
        /// This control routes either the R&amp;S ZVA pulse generator signals or the external pulse generator signals to the PULSE GENERATOR OUT connector.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - External pulse generator signals, fed in via EXT PULSE GENERATOR OUT 
        /// 
        /// (2) OFF - R&amp;S ZVA signals, fed in via CASCADE IN 
        /// </param>
        /// <param name="Assignment">
        /// This control defines the assignment between pulse generator signals and pulse modulators.  
        /// 
        /// Valid Values:
        /// RSZVB_ASSIGN_G1M  (0) - Gen 1 Controls All Modulators
        /// RSZVB_ASSIGN_G2M  (1) - Gen 2 Controls All Modulators  
        /// RSZVB_ASSIGN_G2M2 (2) - Generator 1 Controls Modulators 1 And 3, Generator 2 Controls Modulator 2 
        /// RSZVB_ASSIGN_G1M3 (4) - Generator 1 Controls Modulators 1 And 2, Generator 2 Controls Modulator 3 
        /// 
        /// Default Value: RSZVB_ASSIGN_G1M  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigurePulseGenerators(int Channel, bool Ext_Signal_Generator_Input, bool Ext_Signal_Generator_Output, int Assignment)
        {
            int pInvokeResult = PInvoke.ConfigurePulseGenerators(this._handle, Channel, System.Convert.ToUInt16(Ext_Signal_Generator_Input), System.Convert.ToUInt16(Ext_Signal_Generator_Output), Assignment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the internal combiner in-between the RF signal paths no. 1 and 3 (source path).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:COMBiner[:STATe] 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Combiner">
        /// This control switches the internal combiner in-between the RF signal paths no. 1 and 3 (source path).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Internal combiner used. The combined source signals of the R&amp;S ZVAX signal paths 1 and 3 are available at the NWA port 1. 
        /// 
        /// (2) OFF - No combiner used (through path). The source signals of the R&amp;S ZVAX signal paths 1 and 3 are available at the NWA ports no. 1 and 3, respectively
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetInternalCombiner(int Channel, bool Internal_Combiner)
        {
            int pInvokeResult = PInvoke.SetInternalCombiner(this._handle, Channel, System.Convert.ToUInt16(Internal_Combiner));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the internal combiner in-between the RF signal paths no. 1 and 3 (source path).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:COMBiner[:STATe]? 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Combiner">
        /// This control returns the internal combiner in-between the RF signal paths no. 1 and 3 (source path).
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Internal combiner used. The combined source signals of the R&amp;S ZVAX signal paths 1 and 3 are available at the NWA port 1. 
        /// 
        /// (2) OFF - No combiner used (through path). The source signals of the R&amp;S ZVAX signal paths 1 and 3 are available at the NWA ports no. 1 and 3, respectively
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetInternalCombiner(int Channel, out bool Internal_Combiner)
        {
            ushort Internal_CombinerAsUShort;
            int pInvokeResult = PInvoke.GetInternalCombiner(this._handle, Channel, out Internal_CombinerAsUShort);
            Internal_Combiner = System.Convert.ToBoolean(Internal_CombinerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loops harmonic filters into the RF signal paths no. &lt;Path&gt;. Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:HFILter&lt;Path&gt;[:STATe] 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Path">
        /// Signal path number.
        /// 
        /// Valid Range: 
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path. 
        /// </param>
        /// <param name="Harmonic_Filter">
        /// This control loops harmonic filters into the RF signal paths no. &lt;Path&gt;. Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Harmonic filter used  
        /// 
        /// (2) OFF - No harmonic filter (through path)
        ///  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHarmonicFilter(int Channel, int Path, bool Harmonic_Filter)
        {
            int pInvokeResult = PInvoke.SetHarmonicFilter(this._handle, Channel, Path, System.Convert.ToUInt16(Harmonic_Filter));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the harmonic filters. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:HFILter&lt;Path&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Path">
        /// Signal path number.
        /// 
        /// Valid Range: 
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path. 
        /// </param>
        /// <param name="Harmonic_Filter">
        /// This control returns the state of the harmonic filters. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Harmonic filter used  
        /// 
        /// (2) OFF - No harmonic filter (through path)
        ///  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHarmonicFilter(int Channel, int Path, out bool Harmonic_Filter)
        {
            ushort Harmonic_FilterAsUShort;
            int pInvokeResult = PInvoke.GetHarmonicFilter(this._handle, Channel, Path, out Harmonic_FilterAsUShort);
            Harmonic_Filter = System.Convert.ToBoolean(Harmonic_FilterAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loops pulse modulators into the RF signal paths no. &lt;Path&gt;. Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PMODulator&lt;Path&gt;[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Path">
        /// Signal path number.
        /// 
        /// Valid Range: 
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path. 
        /// </param>
        /// <param name="Pulse_Modulator">
        /// This control loops pulse modulators into the RF signal paths no. &lt;Path&gt;. Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Pulse modulator used  
        /// 
        /// (2) OFF - No pulse modulator (through path) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseModulator(int Channel, int Path, bool Pulse_Modulator)
        {
            int pInvokeResult = PInvoke.SetPulseModulator(this._handle, Channel, Path, System.Convert.ToUInt16(Pulse_Modulator));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the pulse modulators.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PMODulator&lt;Path&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Path">
        /// Signal path number.
        /// 
        /// Valid Range: 
        /// 1, 2, 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) Paths no. 1 and 3 in the extension unit are source paths, path no. 2 is a receiver path. 
        /// </param>
        /// <param name="Pulse_Modulator">
        /// This control returns the state of the pulse modulators.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) ON - Pulse modulator used  
        /// 
        /// (2) OFF - No pulse modulator (through path) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseModulator(int Channel, int Path, out bool Pulse_Modulator)
        {
            ushort Pulse_ModulatorAsUShort;
            int pInvokeResult = PInvoke.GetPulseModulator(this._handle, Channel, Path, out Pulse_ModulatorAsUShort);
            Pulse_Modulator = System.Convert.ToBoolean(Pulse_ModulatorAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the R&amp;S ZVA or an external pulse generator as a source for the pulse generator signals.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:INPut:EXTernal
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Ext_Signal_Generator_Input">
        /// This control selects the R&amp;S ZVA or an external pulse generator as a source for the pulse generator signals. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - External generator signals, fed in via EXT PULSE GENERATOR IN  
        /// 
        /// (2) OFF - R&amp;S ZVA signals, fed in via CASCADE IN  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSignalGeneratorInput(int Channel, bool Ext_Signal_Generator_Input)
        {
            int pInvokeResult = PInvoke.SetExternalSignalGeneratorInput(this._handle, Channel, System.Convert.ToUInt16(Ext_Signal_Generator_Input));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the R&amp;S ZVA or an external pulse generator as a source for the pulse generator signals. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:INPut:EXTernal?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Ext_Signal_Generator_Input">
        /// This control returns the R&amp;S ZVA or an external pulse generator as a source for the pulse generator signals. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) ON - External generator signals, fed in via EXT PULSE GENERATOR IN  
        /// 
        /// (2) OFF - R&amp;S ZVA signals, fed in via CASCADE IN  
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSignalGeneratorInput(int Channel, out bool Ext_Signal_Generator_Input)
        {
            ushort Ext_Signal_Generator_InputAsUShort;
            int pInvokeResult = PInvoke.GetExternalSignalGeneratorInput(this._handle, Channel, out Ext_Signal_Generator_InputAsUShort);
            Ext_Signal_Generator_Input = System.Convert.ToBoolean(Ext_Signal_Generator_InputAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the assignment between pulse generator signals and pulse modulators.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:ASSignment G1Mall | G2Mall | G1M2 | G1M3
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Assignment">
        /// This control defines the assignment between pulse generator signals and pulse modulators.  
        /// 
        /// Valid Values:
        /// RSZVB_ASSIGN_G1M  (0) - Gen 1 Controls All Modulators
        /// RSZVB_ASSIGN_G2M  (1) - Gen 2 Controls All Modulators  
        /// RSZVB_ASSIGN_G2M2 (2) - Generator 1 Controls Modulators 1 And 3, Generator 2 Controls Modulator 2 
        /// RSZVB_ASSIGN_G1M3 (3) - Generator 1 Controls Modulators 1 And 2, Generator 2 Controls Modulator 3 
        /// 
        /// Default Value: RSZVB_ASSIGN_G1M  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPulseGeneratorAssignment(int Channel, int Assignment)
        {
            int pInvokeResult = PInvoke.SetPulseGeneratorAssignment(this._handle, Channel, Assignment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the assignment between pulse generator signals and pulse modulators.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:ASSignment?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Assignment">
        /// This control returns the assignment between pulse generator signals and pulse modulators.  
        /// 
        /// Valid Values:
        /// RSZVB_ASSIGN_G1M  (0) - Gen 1 Controls All Modulators
        /// RSZVB_ASSIGN_G2M  (1) - Gen 2 Controls All Modulators  
        /// RSZVB_ASSIGN_G2M2 (2) - Generator 1 Controls Modulators 1 And 3, Generator 2 Controls Modulator 2 
        /// RSZVB_ASSIGN_G1M3 (4) - Generator 1 Controls Modulators 1 And 2, Generator 2 Controls Modulator 3
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPulseGeneratorAssignment(int Channel, out int Assignment)
        {
            int pInvokeResult = PInvoke.GetPulseGeneratorAssignment(this._handle, Channel, out Assignment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function routes either the R&amp;S ZVA pulse generator signals or the external pulse generator signals to the PULSE GENERATOR OUT connector.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:OUTPut:EXTernal
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Ext_Signal_Generator_Output">
        /// This control routes either the R&amp;S ZVA pulse generator signals or the external pulse generator signals to the PULSE GENERATOR OUT connector.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) ON - External pulse generator signals, fed in via EXT PULSE GENERATOR OUT 
        /// 
        /// (2) OFF - R&amp;S ZVA signals, fed in via CASCADE IN 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSignalGeneratorOutput(int Channel, bool Ext_Signal_Generator_Output)
        {
            int pInvokeResult = PInvoke.SetExternalSignalGeneratorOutput(this._handle, Channel, System.Convert.ToUInt16(Ext_Signal_Generator_Output));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns either the R&amp;S ZVA pulse generator signals or the external pulse generator signals to the PULSE GENERATOR OUT connector.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]EUNit:PGENerator:OUTPut:EXTernal?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Ext_Signal_Generator_Output">
        /// This control returns either the R&amp;S ZVA pulse generator signals or the external pulse generator signals to the PULSE GENERATOR OUT connector.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) ON - External pulse generator signals, fed in via EXT PULSE GENERATOR OUT 
        /// 
        /// (2) OFF - R&amp;S ZVA signals, fed in via CASCADE IN 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSignalGeneratorOutput(int Channel, out bool Ext_Signal_Generator_Output)
        {
            ushort Ext_Signal_Generator_OutputAsUShort;
            int pInvokeResult = PInvoke.GetExternalSignalGeneratorOutput(this._handle, Channel, out Ext_Signal_Generator_OutputAsUShort);
            Ext_Signal_Generator_Output = System.Convert.ToBoolean(Ext_Signal_Generator_OutputAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the harmonic measurement on selected channel.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion FUNDamental | HARMonic
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:ORDer
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:SPORt
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:RPORt
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:RELative ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Harmonic_Measurement">
        /// This control enables the measurement of a harmonic or the fundamental signal for selected channel. 
        /// 
        /// Valid Values:
        /// RSZVB_MEAS_FUNDAMENTAL (0) - Off
        /// RSZVB_MEAS_HARMONIC    (1) - On
        /// 
        /// Default Value: RSZVB_MEAS_FUNDAMENTAL (0)
        /// </param>
        /// <param name="Relative_Harmonic_Measurement">
        /// This control enables or disables the relative harmonic measurement where the harmonic is divided by the fundamental wave.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Source">
        /// This control defines the source port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Harmonic_Measured_at">
        /// This control defines the receive port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Harmonic_Order">
        /// This control defines the order of the harmonic, integer multiple of the fundamental frequency measured.
        /// 
        /// Valid Range: 2 to 100
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureHarmonicMeasurement(int Channel, int Harmonic_Measurement, bool Relative_Harmonic_Measurement, int Source, int Harmonic_Measured_at, int Harmonic_Order)
        {
            int pInvokeResult = PInvoke.ConfigureHarmonicMeasurement(this._handle, Channel, Harmonic_Measurement, System.Convert.ToUInt16(Relative_Harmonic_Measurement), Source, Harmonic_Measured_at, Harmonic_Order);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables the measurement of a harmonic or the fundamental signal for selected channel.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion FUNDamental | HARMonic
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Harmonic_Measurement">
        /// This control enables the measurement of a harmonic or the fundamental signal for selected channel. 
        /// 
        /// Valid Values:
        /// RSZVB_MEAS_FUNDAMENTAL (0) - Off
        /// RSZVB_MEAS_HARMONIC    (1) - On
        /// 
        /// Default Value: RSZVB_MEAS_FUNDAMENTAL (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHarmonicMeasurementState(int Channel, int Harmonic_Measurement)
        {
            int pInvokeResult = PInvoke.SetHarmonicMeasurementState(this._handle, Channel, Harmonic_Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the measurement of a harmonic or the fundamental signal for selected channel.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Harmonic_Measurement">
        /// This control returns the state of the measurement of a harmonic or the fundamental signal for selected channel. 
        /// 
        /// Valid Values:
        /// RSZVB_MEAS_FUNDAMENTAL (0) - Off
        /// RSZVB_MEAS_HARMONIC    (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHarmonicMeasurementState(int Channel, out int Harmonic_Measurement)
        {
            int pInvokeResult = PInvoke.GetHarmonicMeasurementState(this._handle, Channel, out Harmonic_Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the order of the harmonic measured if a harmonic measurement is enabled.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:ORDer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Harmonic_Order">
        /// This control defines the order of the harmonic, integer multiple of the fundamental frequency measured.
        /// 
        /// Valid Range: 2 to 100
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHarmonicOrder(int Channel, int Harmonic_Order)
        {
            int pInvokeResult = PInvoke.SetHarmonicOrder(this._handle, Channel, Harmonic_Order);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the order of the harmonic measured if a harmonic measurement is enabled.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:ORDer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Harmonic_Order">
        /// This control returns the order of the harmonic, integer multiple of the fundamental frequency measured.
        /// 
        /// Valid Range: 2 to 100
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHarmonicOrder(int Channel, out int Harmonic_Order)
        {
            int pInvokeResult = PInvoke.GetHarmonicOrder(this._handle, Channel, out Harmonic_Order);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source port for the harmonic measurement.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:SPORt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the source port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHarmonicSourcePort(int Channel, int Port)
        {
            int pInvokeResult = PInvoke.SetHarmonicSourcePort(this._handle, Channel, Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the source port for the harmonic measurement.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:SPORt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control returns the source port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHarmonicSourcePort(int Channel, out int Port)
        {
            int pInvokeResult = PInvoke.GetHarmonicSourcePort(this._handle, Channel, out Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the receive port for the harmonic measurement.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:RPORt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control defines the receive port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHarmonicReceivePort(int Channel, int Port)
        {
            int pInvokeResult = PInvoke.SetHarmonicReceivePort(this._handle, Channel, Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the receive port for the harmonic measurement.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:RPORt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// This control returns the receive port number.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHarmonicReceivePort(int Channel, out int Port)
        {
            int pInvokeResult = PInvoke.GetHarmonicReceivePort(this._handle, Channel, out Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the relative harmonic measurement where the harmonic is divided by the fundamental wave.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:RELative ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Relative_Harmonic_Measurement">
        /// This control enables or disables the relative harmonic measurement where the harmonic is divided by the fundamental wave.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetHarmonicRelativeState(int Channel, bool Relative_Harmonic_Measurement)
        {
            int pInvokeResult = PInvoke.SetHarmonicRelativeState(this._handle, Channel, System.Convert.ToUInt16(Relative_Harmonic_Measurement));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the relative harmonic measurement state.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:HARMonic:RELative?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Relative_Harmonic_Measurement">
        /// This control returns the relative harmonic measurement state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetHarmonicRelativeState(int Channel, out bool Relative_Harmonic_Measurement)
        {
            ushort Relative_Harmonic_MeasurementAsUShort;
            int pInvokeResult = PInvoke.GetHarmonicRelativeState(this._handle, Channel, out Relative_Harmonic_MeasurementAsUShort);
            Relative_Harmonic_Measurement = System.Convert.ToBoolean(Relative_Harmonic_MeasurementAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function toggle between the (frequency-converting) mixer mode and normal operation, where the analyzer measures the unconverted fundamental wave.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion MIXer | FUNDamental
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mixer_Mode">
        /// This control toggle between the (frequency-converting) mixer mode and normal operation, where the analyzer measures the unconverted fundamental wave.
        /// 
        /// Valid Values:
        /// RSZVB_MIX_MODE_MIXER          (0) - Mixer Measurement
        /// RSZVB_MIX_MODE_FREQ_CONV_OFF  (1) - Frequency Conversion Off
        /// 
        /// Default Value: RSZVB_MIX_MODE_MIXER (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerMode(int Channel, int Mixer_Mode)
        {
            int pInvokeResult = PInvoke.SetMixerMode(this._handle, Channel, Mixer_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the (frequency-converting) mixer mode or normal operation, where the analyzer measures the unconverted fundamental wave.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mixer_Mode">
        /// This control returns the (frequency-converting) mixer mode or normal operation, where the analyzer measures the unconverted fundamental wave.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerMode(int Channel, out int Mixer_Mode)
        {
            int pInvokeResult = PInvoke.GetMixerMode(this._handle, Channel, out Mixer_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets an analyzer port as a signal source for the LO signal (internal source).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:LOINternal NONE | &lt;port_number&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Signal_Source">
        /// This control sets an analyzer port as a signal source for the LO signal (internal source).
        /// 
        /// Valid Values:
        /// 0 (NONE), 3 (for 3-port analyzers), 3, 4 (for 4-port analyzers)
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// 
        /// (0) No internal source is available for 2-port instruments.
        /// 
        /// (1) Parameter 0 sets NONE as a command value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetInternalSignalSource(int Channel, int Internal_Signal_Source)
        {
            int pInvokeResult = PInvoke.SetInternalSignalSource(this._handle, Channel, Internal_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an analyzer port as a signal source for the LO signal (internal source).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:LOINternal?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Signal_Source">
        /// This control returns an analyzer port as a signal source for the LO signal (internal source).
        /// 
        /// Notes:
        /// 
        /// (0) No internal source is available for 2-port instruments.
        /// 
        /// (1) When 0 is returned, it means that the input signal at LO (if available) is not controlled by the analyzer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetInternalSignalSource(int Channel, out int Internal_Signal_Source)
        {
            int pInvokeResult = PInvoke.GetInternalSignalSource(this._handle, Channel, out Internal_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets an external generator as a signal source for the LO signal (external source).
        /// 
        /// Notes:
        /// 
        /// (0) Generators must be configured explicitly in the System - System Config - Configure External Generators function.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:LOEXternal NONE | &lt;port_number&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="External_Signal_Source">
        /// This control sets an external generator as a signal source for the LO signal (external source).
        /// 
        /// Valid Values:
        /// 0 (NONE), not checked
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// 
        /// (0) Parameter 0 sets NONE as a command value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSignalSource(int Channel, int External_Signal_Source)
        {
            int pInvokeResult = PInvoke.SetExternalSignalSource(this._handle, Channel, External_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an external generator as a signal source for the LO signal (external source).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:LOEXternal?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="External_Signal_Source">
        /// This control gets an external generator as a signal source for the LO signal (external source).
        /// 
        /// Notes:
        /// 
        /// (0) When 0 is returned, it means that the input signal at LO (if available) is not controlled by the analyzer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSignalSource(int Channel, out int External_Signal_Source)
        {
            int pInvokeResult = PInvoke.GetExternalSignalSource(this._handle, Channel, out External_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the power settings for the mixer measurement.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FUNDamental RF | LO
        /// SOURce&lt;Ch&gt;:FREQuency:CONVersion:MIXer:PFIXed &lt;fixed_power&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fundamental_Power">
        /// This control selects the mixer input signal which is at the fundamental power.
        /// 
        /// Valid Values:
        /// RSZVB_FUNDAMENTAL_TYPE_RF  (0) - RF
        /// RSZVB_FUNDAMENTAL_TYPE_LO  (1) - LO
        /// 
        /// Default Value: RSZVB_FUNDAMENTAL_TYPE_RF (0)
        /// </param>
        /// <param name="Fixed_Power">
        /// This control defines a fixed power, to be assigned either to the RF or to the LO signal.
        /// 
        /// Valid Values:
        /// -40 dBm to +10 dBm
        /// 
        /// Default Value: -25.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigurePowerSettings(int Channel, int Fundamental_Power, double Fixed_Power)
        {
            int pInvokeResult = PInvoke.ConfigurePowerSettings(this._handle, Channel, Fundamental_Power, Fixed_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mixer input signal which is at the fundamental power.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FUNDamental RF | LO
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fundamental_Power">
        /// This control selects the mixer input signal which is at the fundamental power.
        /// 
        /// Valid Values:
        /// RSZVB_FUNDAMENTAL_TYPE_RF  (0) - RF
        /// RSZVB_FUNDAMENTAL_TYPE_LO  (1) - LO
        /// 
        /// Default Value: RSZVB_FUNDAMENTAL_TYPE_RF (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFundamentalPowerSignal(int Channel, int Fundamental_Power)
        {
            int pInvokeResult = PInvoke.SetFundamentalPowerSignal(this._handle, Channel, Fundamental_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mixer input signal which is at the fundamental power.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FUNDamental?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fundamental_Power">
        /// This control returns the mixer input signal which is at the fundamental power.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFundamentalPowerSignal(int Channel, out int Fundamental_Power)
        {
            int pInvokeResult = PInvoke.GetFundamentalPowerSignal(this._handle, Channel, out Fundamental_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a fixed power, to be assigned either to the RF or to the LO signal.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency:CONVersion:MIXer:PFIXed &lt;fixed_power&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Power">
        /// This control defines a fixed power, to be assigned either to the RF or to the LO signal.
        /// 
        /// Valid Values:
        /// -40 dBm to +10 dBm
        /// 
        /// Default Value: -25.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFixedPower(int Channel, double Fixed_Power)
        {
            int pInvokeResult = PInvoke.SetFixedPower(this._handle, Channel, Fixed_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a fixed power, assigned either to the RF or to the LO signal.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency:CONVersion:MIXer:PFIXed?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Power">
        /// This control returns a fixed power, to be assigned either to the RF or to the LO signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFixedPower(int Channel, out double Fixed_Power)
        {
            int pInvokeResult = PInvoke.GetFixedPower(this._handle, Channel, out Fixed_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the frequency settings for the mixer measurement.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FUNDamental RF | LO | IF
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FIXed RF | LO | IF
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FFIXed &lt;fixed_frequency&gt;
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:TFRequency DCLower | DCUPper | UCONversion
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fundamental_Frequency_Signal">
        /// This control selects the mixer input or output signal which is at the fundamental frequency .
        /// 
        /// Valid Values:
        /// RSZVB_FUNDAMENTAL_TYPE_RF  (0) - RF
        /// RSZVB_FUNDAMENTAL_TYPE_LO  (1) - LO
        /// RSZVB_FUNDAMENTAL_TYPE_IF  (2) - IF
        /// 
        /// Default Value: RSZVB_FUNDAMENTAL_TYPE_RF (0)
        /// </param>
        /// <param name="Fixed_Frequency_Signal">
        /// This control selects the mixer input or output signal which is at the fixed frequency.
        /// 
        /// Valid Values:
        /// RSZVB_FUNDAMENTAL_TYPE_RF  (0) - RF
        /// RSZVB_FUNDAMENTAL_TYPE_LO  (1) - LO
        /// RSZVB_FUNDAMENTAL_TYPE_IF  (2) - IF
        /// 
        /// Default Value: RSZVB_FUNDAMENTAL_TYPE_RF (0)
        /// </param>
        /// <param name="Fixed_Frequency">
        /// This control defines a fixed frequency, to be assigned either to the RF, the LO, or the IF signal.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 300000.0 Hz
        /// </param>
        /// <param name="Frequency_Conversion_Mode">
        /// This control selects the frequency conversion mode of the IF signal.
        /// 
        /// Valid Values:
        /// RSZVB_CONVERSION_DCLOWER      (0) - IF = LO - RF 
        /// RSZVB_CONVERSION_DCUPPER      (1) - IF = RF - LO
        /// RSZVB_CONVERSION_UCONVERSION  (2) - IF = LO + RF
        /// 
        /// Default Value: RSZVB_CONVERSION_DCUPPER (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureFrequencySettings(int Channel, int Fundamental_Frequency_Signal, int Fixed_Frequency_Signal, double Fixed_Frequency, int Frequency_Conversion_Mode)
        {
            int pInvokeResult = PInvoke.ConfigureFrequencySettings(this._handle, Channel, Fundamental_Frequency_Signal, Fixed_Frequency_Signal, Fixed_Frequency, Frequency_Conversion_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mixer input or output signal which is at the fundamental frequency.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FUNDamental RF | LO | IF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fundamental_Frequency">
        /// This control selects the mixer input or output signal which is at the fundamental frequency.
        /// 
        /// Valid Values:
        /// RSZVB_FUNDAMENTAL_TYPE_RF  (0) - RF
        /// RSZVB_FUNDAMENTAL_TYPE_LO  (1) - LO
        /// RSZVB_FUNDAMENTAL_TYPE_IF  (2) - IF
        /// 
        /// Default Value: RSZVB_FUNDAMENTAL_TYPE_RF (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFundamentalFrequencySignal(int Channel, int Fundamental_Frequency)
        {
            int pInvokeResult = PInvoke.SetFundamentalFrequencySignal(this._handle, Channel, Fundamental_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mixer input or output signal which is at the fundamental frequency .
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FUNDamental?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fundamental_Frequency">
        /// This control returns the mixer input or output signal which is at the fundamental frequency .
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFundamentalFrequencySignal(int Channel, out int Fundamental_Frequency)
        {
            int pInvokeResult = PInvoke.GetFundamentalFrequencySignal(this._handle, Channel, out Fundamental_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mixer input or output signal which is at the fixed frequency.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FIXed RF | LO | IF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Frequency">
        /// This control selects the mixer input or output signal which is at the fixed frequency.
        /// 
        /// Valid Values:
        /// RSZVB_FUNDAMENTAL_TYPE_RF  (0) - RF
        /// RSZVB_FUNDAMENTAL_TYPE_LO  (1) - LO
        /// RSZVB_FUNDAMENTAL_TYPE_IF  (2) - IF
        /// 
        /// Default Value: RSZVB_FUNDAMENTAL_TYPE_RF (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFixedFrequencySignal(int Channel, int Fixed_Frequency)
        {
            int pInvokeResult = PInvoke.SetFixedFrequencySignal(this._handle, Channel, Fixed_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the mixer input or output signal which is at the fixed frequency.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FIXed?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Frequency">
        /// This control returns the mixer input or output signal which is at the fixed frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFixedFrequencySignal(int Channel, out int Fixed_Frequency)
        {
            int pInvokeResult = PInvoke.GetFixedFrequencySignal(this._handle, Channel, out Fixed_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a fixed frequency, to be assigned either to the RF, the LO, or the IF signal.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FFIXed &lt;fixed_frequency&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Frequency">
        /// This control defines a fixed frequency, to be assigned either to the RF, the LO, or the IF signal.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 300000.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFixedFrequency(int Channel, double Fixed_Frequency)
        {
            int pInvokeResult = PInvoke.SetFixedFrequency(this._handle, Channel, Fixed_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a fixed frequency, assigned either to the RF, the LO, or the IF signal.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:FFIXed?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Frequency">
        /// This control returns a fixed frequency, assigned either to the RF, the LO, or the IF signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFixedFrequency(int Channel, out double Fixed_Frequency)
        {
            int pInvokeResult = PInvoke.GetFixedFrequency(this._handle, Channel, out Fixed_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the frequency conversion mode of the IF signal.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:TFRequency DCLower | DCUPper | UCONversion
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency_Conversion_Mode">
        /// This control selects the frequency conversion mode of the IF signal.
        /// 
        /// Valid Values:
        /// RSZVB_CONVERSION_DCLOWER      (0) - IF = LO - RF 
        /// RSZVB_CONVERSION_DCUPPER      (1) - IF = RF - LO
        /// RSZVB_CONVERSION_UCONVERSION  (2) - IF = LO + RF
        /// 
        /// Default Value: RSZVB_CONVERSION_DCUPPER (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyConversionMode(int Channel, int Frequency_Conversion_Mode)
        {
            int pInvokeResult = PInvoke.SetFrequencyConversionMode(this._handle, Channel, Frequency_Conversion_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency conversion mode of the IF signal.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:TFRequency?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency_Conversion_Mode">
        /// This control returns the frequency conversion mode of the IF signal.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyConversionMode(int Channel, out int Frequency_Conversion_Mode)
        {
            int pInvokeResult = PInvoke.GetFrequencyConversionMode(this._handle, Channel, out Frequency_Conversion_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the mixer measurement with highest accuracy or with maximum speed.
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVB instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:HACCuracy ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="High_Accuracy">
        /// This control selects the mixer measurement with highest accuracy or with maximum speed.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyHighAccuracy(int Channel, bool High_Accuracy)
        {
            int pInvokeResult = PInvoke.SetFrequencyHighAccuracy(this._handle, Channel, System.Convert.ToUInt16(High_Accuracy));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the mixer measurement is set to highest accuracy or to maximum speed.
        /// 
        /// Note(s):
        /// 
        /// (1) This function can be used only with R&amp;S ZVB instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:HACCuracy?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="High_Accuracy">
        /// This control returns whether the mixer measurement is set to highest accuracy or to maximum speed.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyHighAccuracy(int Channel, out bool High_Accuracy)
        {
            ushort High_AccuracyAsUShort;
            int pInvokeResult = PInvoke.GetFrequencyHighAccuracy(this._handle, Channel, out High_AccuracyAsUShort);
            High_Accuracy = System.Convert.ToBoolean(High_AccuracyAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects an external power meter for the source power calibration.
        /// 
        /// Notes:
        /// 
        /// (1) The command cannot be used unless a power meter is connected via GPIB bus, USB or LAN interface and configured with System - System Config - Configure External Power Meter.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:PMETer:ID &lt;pmeter_no&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_Of_External_Power_Meter">
        /// This control selects an external power meter for the source power calibration.
        /// 
        /// Valid Values:
        /// 1 to number of external generators
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalPowerMeter(int Channel, int Number_Of_External_Power_Meter)
        {
            int pInvokeResult = PInvoke.SetExternalPowerMeter(this._handle, Channel, Number_Of_External_Power_Meter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns an external power meter for the source power calibration.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:PMETer:ID?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_Of_External_Power_Meter">
        /// This control returns an external power meter for the source power calibration.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalPowerMeter(int Channel, out int Number_Of_External_Power_Meter)
        {
            int pInvokeResult = PInvoke.GetExternalPowerMeter(this._handle, Channel, out Number_Of_External_Power_Meter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the RF source calibration (1st power calibration step for mixer measurements), stores and applies the calibration data.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:MIXer:RF[:ACQuire]
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int RFSourceCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.RFSourceCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the IF receiver calibration (2nd power calibration step for mixer measurements), stores and applies the calibration data.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;:MIXer:IF:ACQuire
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int IFReceiverCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.IFReceiverCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the LO source calibration (3rd power calibration step for mixer measurements), stores and applies the calibration data.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:MIXer:LO[:ACQuire]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LOSourceCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.LOSourceCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects the measurement setup/receiver configuration for the mixer delay measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This mode requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:RECeiver INTernal | EXTernal
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Measurement_Setup">
        /// Selects the measurement setup/receiver configuration for the mixer delay measurement.
        /// 
        /// Valid Values:
        /// RSZVB_INT (0) - Internal Receiver
        /// RSZVB_EXT (1) - External Receiver
        /// 
        /// Default Value: RSZVB_INT (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerDelayMeasurementSetup(int Channel, int Measurement_Setup)
        {
            int pInvokeResult = PInvoke.SetMixerDelayMeasurementSetup(this._handle, Channel, Measurement_Setup);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the measurement setup/receiver configuration for the mixer delay measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This mode requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:RECeiver?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Measurement_Setup">
        /// Returns the measurement setup/receiver configuration for the mixer delay measurement.
        /// 
        /// Valid Values:
        /// RSZVB_INT (0) - Internal Receiver
        /// RSZVB_EXT (1) - External Receiver
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerDelayMeasurementSetup(int Channel, out int Measurement_Setup)
        {
            int pInvokeResult = PInvoke.GetMixerDelayMeasurementSetup(this._handle, Channel, out Measurement_Setup);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects the LAN connection for the mixer delay measurement with external receiver. The function has no effect if a single analyzer (internal receiver) is used.
        /// 
        /// Notes:
        /// 
        /// (1) This mode requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:RECeiver:USE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LAN_Connection">
        /// Selects the LAN connection for the mixer delay measurement with external receiver.
        /// 
        /// Valid Values:
        /// RSZVB_MDEL_LAN1 (1) - LAN1
        /// RSZVB_MDEL_LAN2 (2) - LAN2
        /// 
        /// Default Value: RSZVB_MDEL_LAN1 (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerDelayLANConnection(int Channel, int LAN_Connection)
        {
            int pInvokeResult = PInvoke.SetMixerDelayLANConnection(this._handle, Channel, LAN_Connection);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the LAN connection for the mixer delay measurement with external receiver.
        /// 
        /// Notes:
        /// 
        /// (1) This mode requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:RECeiver:USE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LAN_Connection">
        /// Returns the LAN connection for the mixer delay measurement with external receiver.
        /// 
        /// Valid Values:
        /// RSZVB_MDEL_LAN1 (1) - LAN1
        /// RSZVB_MDEL_LAN2 (2) - LAN2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerDelayLANConnection(int Channel, out int LAN_Connection)
        {
            int pInvokeResult = PInvoke.GetMixerDelayLANConnection(this._handle, Channel, out LAN_Connection);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures a network analyzer as an external receiver for the mixer delay measurement and adds it to the list of available receivers. 
        /// 
        /// Notes:
        /// 
        /// (1) This mode requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:RECeiver:DEFine
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Measurement_Setup">
        /// Defines IP address of external receiver.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: "192.168.0.1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefineMixerDelayReceiver(string Measurement_Setup)
        {
            int pInvokeResult = PInvoke.DefineMixerDelayReceiver(this._handle, Measurement_Setup);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Clears the configuration table for external receivers for the mixer delay measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This mode requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:RECeiver:DELete
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ClearMixerDelayReceiverList()
        {
            int pInvokeResult = PInvoke.ClearMixerDelayReceiverList(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Starts a calibration sweep for the mixer delay measurement. 
        /// 
        /// Notes:
        /// 
        /// (1) This mode requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:ACQuire
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartMixerDelayCalibrationSweep(int Channel)
        {
            int pInvokeResult = PInvoke.StartMixerDelayCalibrationSweep(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Sets the frequency difference between the upper and lower tone (aperture). 
        /// 
        /// Notes:
        /// 
        /// (1) This function requires options R&amp;S ZVA-K9, R&amp;S ZVA-K4 and ZVT20-B11.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:APERture
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Aperture">
        /// Defines the frequency difference between the upper and lower tone (aperture). 
        /// 
        /// Valid Range:
        /// 0 to 15.0e9 Hz
        /// 
        /// Default Value: 0.0 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerDelayAperture(int Channel, double Aperture)
        {
            int pInvokeResult = PInvoke.SetMixerDelayAperture(this._handle, Channel, Aperture);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the frequency difference between the upper and lower tone (aperture). 
        /// 
        /// Notes:
        /// 
        /// (1) This function requires options R&amp;S ZVA-K9, R&amp;S ZVA-K4 and ZVT20-B11.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:APERture?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Aperture">
        /// Returns the frequency difference between the upper and lower tone (aperture). 
        /// 
        /// Valid Range:
        /// 0 to 15.0e9 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerDelayAperture(int Channel, out double Aperture)
        {
            int pInvokeResult = PInvoke.GetMixerDelayAperture(this._handle, Channel, out Aperture);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines a constant mixer delay value, to be used as a reference for a mixer delay measurement calibration.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:CDELay
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Constant_Delay">
        /// Defines a constant mixer delay value.
        /// 
        /// Valid Range:
        /// 0 s to 0.001 s
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerDelayConstant(int Channel, double Constant_Delay)
        {
            int pInvokeResult = PInvoke.SetMixerDelayConstant(this._handle, Channel, Constant_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns a constant mixer delay value, to be used as a reference for a mixer delay measurement calibration.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:CDELay?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Constant_Delay">
        /// Returns a constant mixer delay value.
        /// 
        /// Valid Range:
        /// 0 s to 0.001 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerDelayConstant(int Channel, out double Constant_Delay)
        {
            int pInvokeResult = PInvoke.GetMixerDelayConstant(this._handle, Channel, out Constant_Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enables or disables the internal combiner (for R&amp;S ZVT analyzers with option R&amp;S ZVT20-B11 or R&amp;S ZVA analyzers with an Extension Unit R&amp;S ZVAXxx and option R&amp;S ZVAXxx-B11). The internal combiner requires the following port configuration: Lower Tone: Port 1, Upper Tone: Port 3. The two-tone signal is available at port 1. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:COMBiner[:STATe]
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Combiner">
        /// State of combiner.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerDelayCombinerState(int Channel, bool Internal_Combiner)
        {
            int pInvokeResult = PInvoke.SetMixerDelayCombinerState(this._handle, Channel, System.Convert.ToUInt16(Internal_Combiner));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the state of the internal combiner (for R&amp;S ZVT analyzers with option R&amp;S ZVT20-B11 or R&amp;S ZVA analyzers with an Extension Unit R&amp;S ZVAXxx and option R&amp;S ZVAXxx-B11). The internal combiner requires the following port configuration: Lower Tone: Port 1, Upper Tone: Port 3. The two-tone signal is available at port 1. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:COMBiner[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Combiner">
        /// Returns the state of combiner.
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerDelayCombinerState(int Channel, out bool Internal_Combiner)
        {
            ushort Internal_CombinerAsUShort;
            int pInvokeResult = PInvoke.GetMixerDelayCombinerState(this._handle, Channel, out Internal_CombinerAsUShort);
            Internal_Combiner = System.Convert.ToBoolean(Internal_CombinerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Qualifies whether the analyzer applies the current mixer delay meas. calibration data. 
        /// 
        /// Notes:
        /// 
        /// (1) This function requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:CORRection[:STATe]
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Correction">
        /// Apply or ignore current mixer delay calibration data.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerDelayCorrection(int Channel, bool Correction)
        {
            int pInvokeResult = PInvoke.SetMixerDelayCorrection(this._handle, Channel, System.Convert.ToUInt16(Correction));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Gets state of applying current mixer delay meas. calibration data. 
        /// 
        /// Notes:
        /// 
        /// (1) This function requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:CORRection[:STATe]?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Correction">
        /// State of applying of current mixer delay calibration data.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerDelayCorrection(int Channel, out bool Correction)
        {
            ushort CorrectionAsUShort;
            int pInvokeResult = PInvoke.GetMixerDelayCorrection(this._handle, Channel, out CorrectionAsUShort);
            Correction = System.Convert.ToBoolean(CorrectionAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects the source for the upper tone signal that is used for the mixer delay measurement.
        /// 
        /// Notes:
        /// 
        /// (1) This function requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:UTONe NONE | PORT | GENerator, &lt;source_no&gt; 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source">
        /// Upper tone source.
        /// 
        /// Valid Range:
        /// RSZVB_IMOD_SRC_NONE (0) - None
        /// RSZVB_IMOD_SRC_PORT (1) - Port
        /// RSZVB_IMOD_SRC_GEN  (2) - Generator
        /// 
        /// Default Value: RSZVB_IMOD_SRC_PORT (1)
        /// 
        /// </param>
        /// <param name="Port_number">
        /// Number of the port for the internal source or of the generator (to be omitted for source: NONE) 
        /// 
        /// Valid Range:
        /// 1 to port number of the analyzer/number of external generators
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMixerDelayUpperToneSource(int Channel, int Source, int Port_number)
        {
            int pInvokeResult = PInvoke.SetMixerDelayUpperToneSource(this._handle, Channel, Source, Port_number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the source for the upper tone signal that is used for the mixer delay measurement.
        /// 
        /// Notes:
        /// 
        /// (1) This function requires options R&amp;S ZVA-K9 and R&amp;S ZVA-K4.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:MDELay:UTONe? PORT | GENerator
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source">
        /// Upper tone source.
        /// 
        /// Valid Range:
        /// RSZVB_IMOD_SRC_PORT (1) - Port
        /// RSZVB_IMOD_SRC_GEN  (2) - Generator
        /// </param>
        /// <param name="Port_Number">
        /// Returns the number of the port for the internal source or of the generator (to be omitted for source: NONE) 
        /// 
        /// Valid Range:
        /// 1 to port number of the analyzer/number of external generators
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMixerDelayUpperToneSource(int Channel, out int Source, out int Port_Number)
        {
            int pInvokeResult = PInvoke.GetMixerDelayUpperToneSource(this._handle, Channel, out Source, out Port_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Loads the known delay values of a calibration mixer, to be used as a reference for a mixer delay measurement calibration. Mixer delay measurements are controlled using the SENSe&lt;Ch&gt;:FREQuency:MDELay... commands. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:MDAData &lt;Channel&gt;, '&lt;file_name&gt;' | CDELay
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// Type of delay values
        /// 
        /// Valid Range:
        /// RSZVB_MIXER_LOAD_FILE  (0) - File
        /// RSZVB_MIXER_LOAD_DELAY (1) - Constant values
        /// 
        /// Default Value: RSZVB_MIXER_LOAD_FILE
        /// </param>
        /// <param name="File">
        /// String parameter to specify the name and directory of the loaded file. The default extension (manual control) for files containing known delays is *.csv, although other extensions are allowed. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only used when Type control is set to File.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadMixerDelayValues(int Channel, int Type, string File)
        {
            int pInvokeResult = PInvoke.LoadMixerDelayValues(this._handle, Channel, Type, File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Loads correction data for a mixer delay measurement calibration from a specified file and assigns it to a channel with a specified number. Mixer delay measurements are controlled using the SENSe&lt;Ch&gt;:FREQuency:MDELay... commands. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:MDCData &lt;Channel&gt;, '&lt;file_name&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File">
        /// String parameter to specify the name and directory of the calibration file to be loaded. The default extension (manual control) for mixer delay calibration files is *.mcal, although other extensions are allowed. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadMixerDelayCalibrationData(int Channel, string File)
        {
            int pInvokeResult = PInvoke.LoadMixerDelayCalibrationData(this._handle, Channel, File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Stores the correction data for a mixer delay measurement calibration to a specified file. Mixer delay measurements are controlled using the SENSe&lt;Ch&gt;:FREQuency:MDELay... commands. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:MDCData &lt;Channel&gt;, '&lt;file_name&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File">
        /// String parameter to specify the name and directory of the created calibration file. The default extension (manual control) for mixer delay calibration files is *.mcal, although other extensions are allowed. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StoreMixerDelayCalibrationData(int Channel, string File)
        {
            int pInvokeResult = PInvoke.StoreMixerDelayCalibrationData(this._handle, Channel, File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function toggle between the (frequency-converting) vector mixer mode and normal operation, where the analyzer measures the unconverted fundamental wave.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion VMIXer | FUNDamental
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mixer_Mode">
        /// This control toggle between the (frequency-converting) vector mixer mode and normal operation, where the analyzer measures the unconverted fundamental wave.
        /// 
        /// Valid Values:
        /// RSZVB_MIX_MODE_VMIXER         (0) - Vector Mixer Measurement
        /// RSZVB_MIX_MODE_FREQ_CONV_OFF  (1) - Frequency Conversion Off
        /// 
        /// Default Value: RSZVB_MIX_MODE_VMIXER (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVectorMixerMode(int Channel, int Mixer_Mode)
        {
            int pInvokeResult = PInvoke.SetVectorMixerMode(this._handle, Channel, Mixer_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the (frequency-converting) vector mixer mode or normal operation, where the analyzer measures the unconverted fundamental wave.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mixer_Mode">
        /// This control returns the (frequency-converting) vectormixer mode or normal operation, where the analyzer measures the unconverted fundamental wave.
        /// 
        /// Valid Values:
        /// RSZVB_MIX_MODE_VMIXER         (0) - Vector Mixer Measurement
        /// RSZVB_MIX_MODE_FREQ_CONV_OFF  (1) - Frequency Conversion Off
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVectorMixerMode(int Channel, out int Mixer_Mode)
        {
            int pInvokeResult = PInvoke.GetVectorMixerMode(this._handle, Channel, out Mixer_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects an analyzer port as a signal source for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5). The Aux LO signal is fed to the MEAS and REF mixers.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:AINTernal NONE | &lt;port_number&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Signal_Source">
        /// Selects an analyzer port as a signal source for the Aux LO signal in a vector mixer measurement.
        /// 
        /// Valid Values:
        /// 0 (NONE), 3 (for 3-port analyzers), 3, 4 (for 4-port analyzers)
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// 
        /// (0) No internal source is available for 2-port instruments.
        /// 
        /// (1) Parameter 0 sets NONE as a command value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetInternalSignalSourceAUX(int Channel, int Internal_Signal_Source)
        {
            int pInvokeResult = PInvoke.SetInternalSignalSourceAUX(this._handle, Channel, Internal_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries analyzer port as a signal source for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:AINTernal?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Signal_Source">
        /// Returns an analyzer port as a signal source for the Aux LO signal in a vector mixer measurement.
        /// 
        /// Valid Values:
        /// 0 (NONE), 3 (for 3-port analyzers), 3, 4 (for 4-port analyzers)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetInternalSignalSourceAUX(int Channel, out int Internal_Signal_Source)
        {
            int pInvokeResult = PInvoke.GetInternalSignalSourceAUX(this._handle, Channel, out Internal_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects an external generator as a signal source for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5). The Aux LO signal is fed to the MEAS and REF mixers.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:AEXTernal NONE | &lt;port_number&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="External_Signal_Source">
        /// Selects an external generator as a signal source for the Aux LO signal in a vector mixer measurement.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// 
        /// (1) Parameter 0 sets NONE as a command value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetExternalSignalSourceAUX(int Channel, int External_Signal_Source)
        {
            int pInvokeResult = PInvoke.SetExternalSignalSourceAUX(this._handle, Channel, External_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries an external generator as a signal source for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5). The Aux LO signal is fed to the MEAS and REF mixers.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:AEXTernal?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="External_Signal_Source">
        /// Returns an external generator as a signal source for the Aux LO signal in a vector mixer measurement.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetExternalSignalSourceAUX(int Channel, out int External_Signal_Source)
        {
            int pInvokeResult = PInvoke.GetExternalSignalSourceAUX(this._handle, Channel, out External_Signal_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects the Aux Mixer port (and thus the basic test setup) for vector mixer measurements (option R&amp;S ZVA-K5).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:APORt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// Selects the Aux Mixer port (and thus the basic test setup) for vector mixer measurements (option R&amp;S ZVA-K5).
        /// 
        /// Valid Values:
        /// 1 to 2
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAUXMixerPort(int Channel, int Port_Number)
        {
            int pInvokeResult = PInvoke.SetAUXMixerPort(this._handle, Channel, Port_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the Aux Mixer port (and thus the basic test setup) for vector mixer measurements (option R&amp;S ZVA-K5).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:MIXer:APORt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// Returns the Aux Mixer port (and thus the basic test setup) for vector mixer measurements (option R&amp;S ZVA-K5).
        /// 
        /// Valid Values:
        /// 1 to 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAUXMixerPort(int Channel, out int Port_Number)
        {
            int pInvokeResult = PInvoke.GetAUXMixerPort(this._handle, Channel, out Port_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines a fixed power for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5). The Aux LO signal is fed to the MEAS and REF mixers.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency:CONVersion:MIXer:PAFixed
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Power">
        /// Defines a fixed power for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5). The Aux LO signal is fed to the MEAS and REF mixers.
        /// 
        /// Valid Values:
        /// -40 dBm to +10 dBm
        /// 
        /// Default Value: -25.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAUXFixedPower(int Channel, double Fixed_Power)
        {
            int pInvokeResult = PInvoke.SetAUXFixedPower(this._handle, Channel, Fixed_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries a fixed power for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5).
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:FREQuency:CONVersion:MIXer:PAFixed?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Fixed_Power">
        /// Returns a fixed power for the Aux LO signal in a vector mixer measurement (option R&amp;S ZVA-K5).
        /// 
        /// Valid Values:
        /// -40 dBm to +10 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAUXFixedPower(int Channel, out double Fixed_Power)
        {
            int pInvokeResult = PInvoke.GetAUXFixedPower(this._handle, Channel, out Fixed_Power);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source for the lower tone signal that is used for the intermodulation measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:LTONe PORT | GENerator, &lt;source_no&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source">
        /// This control selects the source for the lower tone signal that is used for the intermodulation measurement.
        /// 
        /// Valid Values:
        /// RSZVB_IMOD_SRC_PORT (1) - Port
        /// RSZVB_IMOD_SRC_GEN  (2) - Generator
        /// 
        /// Default Value: RSZVB_IMOD_SRC_PORT (1)
        /// 
        /// Note(s):
        /// 
        /// (1) Port - internal source at port &lt;source_no&gt; 
        /// 
        /// (2) Generator - external generator no. &lt;source_no&gt;, as defined in the System Configuration -External Generators dialog.
        /// </param>
        /// <param name="Source_Number">
        /// This control selects the number of the port for the internal source or of the generator. 
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer/number of external generators 
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODLowerToneSource(int Channel, int Source, int Source_Number)
        {
            int pInvokeResult = PInvoke.SetIMODLowerToneSource(this._handle, Channel, Source, Source_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source for the lower tone signal that is used for the intermodulation measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:LTONe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source">
        /// This control returns the source for the lower tone signal that is used for the intermodulation measurement.
        /// 
        /// Valid Values:
        /// RSZVB_IMOD_SRC_NONE (0) - None
        /// RSZVB_IMOD_SRC_PORT (1) - Port
        /// RSZVB_IMOD_SRC_GEN  (2) - Generator
        /// 
        /// Note(s):
        /// 
        /// (1) None - no port or generator selected, Source Number control is ignored.
        /// 
        /// (2) Port - internal source at port &lt;source_no&gt; 
        /// 
        /// (3) Generator - external generator no. &lt;source_no&gt;, as defined in the System Configuration -External Generators dialog.
        /// </param>
        /// <param name="Source_Number">
        /// This control returns the number of the port for the internal source or of the generator (to be omitted for source: NONE) 
        /// 
        /// Valid Values:
        /// 0 - when None source is returned
        /// 1 to port number of the analyzer/number of external generators 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODLowerToneSource(int Channel, out int Source, out int Source_Number)
        {
            int pInvokeResult = PInvoke.GetIMODLowerToneSource(this._handle, Channel, out Source, out Source_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source for the upper tone signal that is used for the intermodulation measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:UTONe PORT | GENerator, &lt;source_no&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source">
        /// This control selects the source for the upper tone signal that is used for the intermodulation measurement.
        /// 
        /// Valid Values:
        /// RSZVB_IMOD_SRC_PORT (1) - Port
        /// RSZVB_IMOD_SRC_GEN  (2) - Generator
        /// 
        /// Default Value: RSZVB_IMOD_SRC_PORT (1)
        /// 
        /// Note(s):
        /// 
        /// (1) Port - internal source at port &lt;source_no&gt; 
        /// 
        /// (2) Generator - external generator no. &lt;source_no&gt;, as defined in the System Configuration -External Generators dialog.
        /// </param>
        /// <param name="Source_Number">
        /// This control selects the number of the port for the internal source or of the generator.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer/number of external generators 
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODUpperToneSource(int Channel, int Source, int Source_Number)
        {
            int pInvokeResult = PInvoke.SetIMODUpperToneSource(this._handle, Channel, Source, Source_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the source for the upper tone signal that is used for the intermodulation measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:UTONe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source">
        /// This control returns the source for the upper tone signal that is used for the intermodulation measurement.
        /// 
        /// Valid Values:
        /// RSZVB_IMOD_SRC_NONE (0) - None
        /// RSZVB_IMOD_SRC_PORT (1) - Port
        /// RSZVB_IMOD_SRC_GEN  (2) - Generator
        /// 
        /// Note(s):
        /// 
        /// (1) None - no port or generator selected, Source Number control is ignored.
        /// 
        /// (2) Port - internal source at port &lt;source_no&gt; 
        /// 
        /// (3) Generator - external generator no. &lt;source_no&gt;, as defined in the System Configuration -External Generators dialog.
        /// </param>
        /// <param name="Source_Number">
        /// This control returns the number of the port for the internal source or of the generator (to be omitted for source: NONE) 
        /// 
        /// Valid Values:
        /// 0 - when None source is returned
        /// 1 to port number of the analyzer/number of external generators 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODUpperToneSource(int Channel, out int Source, out int Source_Number)
        {
            int pInvokeResult = PInvoke.GetIMODUpperToneSource(this._handle, Channel, out Source, out Source_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the tone distance (frequency offset) between the upper and the lower tone.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:TDIStance
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Tone_Distance">
        /// This control sets the tone distance (frequency offset) between the upper and the lower tone (Upper tone frequency minus lower tone frequency) 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 1.0e6 Hz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODToneDistance(int Channel, double Tone_Distance)
        {
            int pInvokeResult = PInvoke.SetIMODToneDistance(this._handle, Channel, Tone_Distance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the tone distance (frequency offset) between the upper and the lower tone.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:TDIStance?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Tone_Distance">
        /// This control returns the tone distance (frequency offset) between the upper and the lower tone (Upper tone frequency minus lower tone frequency) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODToneDistance(int Channel, out double Tone_Distance)
        {
            int pInvokeResult = PInvoke.GetIMODToneDistance(this._handle, Channel, out Tone_Distance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the receiver port for the intermodulation measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:RECeiver
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Port">
        /// This control selects the receiver port for the intermodulation measurement. 
        /// 
        /// Valid Values: 
        /// 1 to the number of ports of the analyzer
        /// 
        /// Default Value: 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODReceiverPort(int Channel, int Receiver_Port)
        {
            int pInvokeResult = PInvoke.SetIMODReceiverPort(this._handle, Channel, Receiver_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the receiver port for the intermodulation measurement.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:RECeiver?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Receiver_Port">
        /// This control returns the receiver port for the intermodulation measurement. 
        /// 
        /// Valid Values: 
        /// 1 to the number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODReceiverPort(int Channel, out int Receiver_Port)
        {
            int pInvokeResult = PInvoke.GetIMODReceiverPort(this._handle, Channel, out Receiver_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the measurement of the intermodulation products of order &lt;IM order&gt;.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:ORDer&lt;Im&gt;[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Product_Order">
        /// This control selects the order of IM products 
        /// 
        /// Valid Values: 
        /// 3, 5, 7, 9
        /// 
        /// Default Value: 3
        /// </param>
        /// <param name="Measurement_State">
        /// This control enables or disables measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODMeasurementOrder(int Channel, int Product_Order, bool Measurement_State)
        {
            int pInvokeResult = PInvoke.SetIMODMeasurementOrder(this._handle, Channel, Product_Order, System.Convert.ToUInt16(Measurement_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the measurement of the intermodulation products of order &lt;IM order&gt;.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:ORDer&lt;Im&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Product_Order">
        /// This control selects the order of IM products 
        /// 
        /// Valid Values: 
        /// 3, 5, 7, 9
        /// 
        /// Default Value: 3
        /// </param>
        /// <param name="Measurement_State">
        /// This control returns the state of the measurement.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODMeasurementOrder(int Channel, int Product_Order, out bool Measurement_State)
        {
            ushort Measurement_StateAsUShort;
            int pInvokeResult = PInvoke.GetIMODMeasurementOrder(this._handle, Channel, Product_Order, out Measurement_StateAsUShort);
            Measurement_State = System.Convert.ToBoolean(Measurement_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the internal combiner. The internal combiner requires the following port configuration: Lower Tone: Port 1, Upper Tone: Port 3.
        /// 
        /// Note(s):
        /// 
        /// (1) This function requires option R&amp;S ZVT20-B11.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:COMBiner[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Combiner">
        /// This control enables or disables the internal combiner.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODInternalCombiner(int Channel, bool Internal_Combiner)
        {
            int pInvokeResult = PInvoke.SetIMODInternalCombiner(this._handle, Channel, System.Convert.ToUInt16(Internal_Combiner));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the internal combiner.
        /// 
        /// Note(s):
        /// 
        /// (1) This function requires option R&amp;S ZVT20-B11.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:COMBiner[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Internal_Combiner">
        /// This control returns the internal combiner.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODInternalCombiner(int Channel, out bool Internal_Combiner)
        {
            ushort Internal_CombinerAsUShort;
            int pInvokeResult = PInvoke.GetIMODInternalCombiner(this._handle, Channel, out Internal_CombinerAsUShort);
            Internal_Combiner = System.Convert.ToBoolean(Internal_CombinerAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the measurement of the intermodulation spectrum without creating a new channel. 
        /// 
        /// Note(s):
        /// 
        /// (1) If a new channel is desired, it must be created by other means - use command CALC:PAR:SDEF 'name','order' (function rszvb_ChannelAddTrace)
        /// 
        /// (2) This function is not available for R&amp;S ZVB instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:SPECtrum[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Spectrum_Measurement">
        /// This control enables or disables the measurement of the intermodulation spectrum without creating a new channel.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODSpectrumMeasurement(int Channel, bool Spectrum_Measurement)
        {
            int pInvokeResult = PInvoke.SetIMODSpectrumMeasurement(this._handle, Channel, System.Convert.ToUInt16(Spectrum_Measurement));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the measurement of the intermodulation spectrum without creating a new channel. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available for R&amp;S ZVB instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:SPECtrum[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Spectrum_Measurement">
        /// This control returns the state of the measurement of the intermodulation spectrum without creating a new channel.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODSpectrumMeasurement(int Channel, out bool Spectrum_Measurement)
        {
            ushort Spectrum_MeasurementAsUShort;
            int pInvokeResult = PInvoke.GetIMODSpectrumMeasurement(this._handle, Channel, out Spectrum_MeasurementAsUShort);
            Spectrum_Measurement = System.Convert.ToBoolean(Spectrum_MeasurementAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the maximum order of intermodulation products for the intermodulation spectrum measurement. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available for R&amp;S ZVB instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:SPECtrum:MORDer
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Max_Order">
        /// This control selects the maximum order of IM products 
        /// 
        /// Valid Values: 
        /// 3, 5, 7, 9
        /// 
        /// Default Value: 3
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODMaxOrder(int Channel, int Max_Order)
        {
            int pInvokeResult = PInvoke.SetIMODMaxOrder(this._handle, Channel, Max_Order);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the maximum order of intermodulation products for the intermodulation spectrum measurement. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is not available for R&amp;S ZVB instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:SPECtrum:MORDer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Max_Order">
        /// This control returns the maximum order of IM products 
        /// 
        /// Valid Values: 
        /// 3, 5, 7, 9
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODMaxOrder(int Channel, out int Max_Order)
        {
            int pInvokeResult = PInvoke.GetIMODMaxOrder(this._handle, Channel, out Max_Order);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects the source for the two tone output signal for intermodulation measurements.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:TTOutput PORT | EDEVice
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Two_Tone_Output">
        /// Selects the source for the two tone output signal for intermodulation measurements.
        /// 
        /// Valid Values: 
        /// RSZVB_IMOD_SOURCE_PORT (0) - Port
        /// RSZVB_IMOD_SOURCE_EDEV (1) - External Device
        /// 
        /// Default Value: RSZVB_IMOD_SOURCE_EDEV (1)
        /// 
        /// Note(s):
        /// 
        /// (1) PORT - analyzer port 1 (for instruments with option R&amp;S
        ///            ZVA-B16 or with internal combiner only)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIMODTwoToneOutput(int Channel, int Two_Tone_Output)
        {
            int pInvokeResult = PInvoke.SetIMODTwoToneOutput(this._handle, Channel, Two_Tone_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the source for the two tone output signal for intermodulation measurements.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:IMODulation:TTOutput?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Two_Tone_Output">
        /// Returns the source for the two tone output signal for intermodulation measurements.
        /// 
        /// Valid Values: 
        /// RSZVB_IMOD_SOURCE_PORT (0) - Port
        /// RSZVB_IMOD_SOURCE_EDEV (1) - External Device
        /// 
        /// Note(s):
        /// 
        /// (1) PORT - analyzer port 1 (for instruments with option R&amp;S
        ///            ZVA-B16 or with internal combiner only)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIMODTwoToneOutput(int Channel, out int Two_Tone_Output)
        {
            int pInvokeResult = PInvoke.GetIMODTwoToneOutput(this._handle, Channel, out Two_Tone_Output);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the source calibration for the lower tone (1st power calibration step for intermodulation measurements), stores and applies the calibration data. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:IMODulation:LTONe[:ACQuire]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartIMODLowerToneSourcePowerCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.StartIMODLowerToneSourcePowerCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the source calibration for the upper tone (2nd power calibration step for intermodulation measurements), stores and applies the calibration data.  
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:IMODulation:UTONe[:ACQuire]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartIMODUpperToneSourcePowerCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.StartIMODUpperToneSourcePowerCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the receiver calibration (2nd power calibration step for intermodulation measurements), stores and applies the calibration data.  
        /// 
        /// Note(s):
        /// 
        /// (1) The receiver calibration relies on the source power calibration acquired in step no. 1. Use this function after using rszvb_StartIMODLowerToneSourcePowerCalibration and rszvb_StartIMODUpperToneSourcePowerCalibration functions.
        /// 
        /// (2) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;:IMODulation:ACQuire
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartIMODReceiverPowerCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.StartIMODReceiverPowerCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the time that the analyzer uses to acquire data with each of the detector settings.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:DETector:TIME
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Detector_Time">
        /// This control sets the time that the analyzer uses to acquire data with each of the detector settings
        /// 
        /// Valid Values:
        /// 0.0 to 3456000.0 s
        /// 
        /// Default Value:
        /// 0.01 s
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNoiseFigureDetectorMeasurementTime(int Channel, double Detector_Time)
        {
            int pInvokeResult = PInvoke.SetNoiseFigureDetectorMeasurementTime(this._handle, Channel, Detector_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the time that the analyzer uses to acquire data with each of the detector settings.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]SWEep:DETector:TIME?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Detector_Time">
        /// This control retruns the time that the analyzer uses to acquire data with each of the detector settings
        /// 
        /// Valid Values:
        /// 0.0 to 3456000.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNoiseFigureDetectorMeasurementTime(int Channel, out double Detector_Time)
        {
            int pInvokeResult = PInvoke.GetNoiseFigureDetectorMeasurementTime(this._handle, Channel, out Detector_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects sequential or simultaneous measurement mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]NFIGure:SEQuential ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Measurement_Mode">
        /// This control selects sequential or simultaneous measurement mode. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Simultaneous
        /// VI_TRUE  (1) - Sequential
        /// 
        /// Default Value: VI_TRUE  (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNoiseFigureMeasurementMode(int Channel, bool Measurement_Mode)
        {
            int pInvokeResult = PInvoke.SetNoiseFigureMeasurementMode(this._handle, Channel, System.Convert.ToUInt16(Measurement_Mode));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns sequential or simultaneous measurement mode. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]NFIGure:SEQuential?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Measurement_Mode">
        /// This control returns sequential or simultaneous measurement mode. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Simultaneous
        /// VI_TRUE  (1) - Sequential
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNoiseFigureMeasurementMode(int Channel, out bool Measurement_Mode)
        {
            ushort Measurement_ModeAsUShort;
            int pInvokeResult = PInvoke.GetNoiseFigureMeasurementMode(this._handle, Channel, out Measurement_ModeAsUShort);
            Measurement_Mode = System.Convert.ToBoolean(Measurement_ModeAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets whether the analyzer assumes an ideal T0 source noise. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]NFIGure:ISNoise ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LO_Oscillator">
        /// This control switches the LO oscillator on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNoiseFigureLOOscillator(int Channel, bool LO_Oscillator)
        {
            int pInvokeResult = PInvoke.SetNoiseFigureLOOscillator(this._handle, Channel, System.Convert.ToUInt16(LO_Oscillator));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the analyzer assumes an ideal T0 source noise. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]NFIGure:ISNoise?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="LO_Oscillator">
        /// This control returns the state of the LO oscillator. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNoiseFigureLOOscillator(int Channel, out bool LO_Oscillator)
        {
            ushort LO_OscillatorAsUShort;
            int pInvokeResult = PInvoke.GetNoiseFigureLOOscillator(this._handle, Channel, out LO_OscillatorAsUShort);
            LO_Oscillator = System.Convert.ToBoolean(LO_OscillatorAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function disables or enables the Noise Figure Calibration for the active channel &lt;Ch&gt;. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:NFIGure[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration">
        /// This control disables or enables the Noise Figure Calibration for the active channel &lt;Ch&gt;. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// 
        /// Note(s):
        /// 
        /// (1) On - (re-)enable calibration
        /// 
        /// (2) Off - Disable calibration (Correction Off i.e. the softkey in the user interface is checked) 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNoiseFigureCalibrationState(int Channel, bool Calibration)
        {
            int pInvokeResult = PInvoke.SetNoiseFigureCalibrationState(this._handle, Channel, System.Convert.ToUInt16(Calibration));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Noise Figure Calibration for the active channel &lt;Ch&gt;. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:NFIGure[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration">
        /// This control returns the state of the Noise Figure Calibration for the active channel &lt;Ch&gt;. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) On - (re-)enable calibration
        /// 
        /// (2) Off - Disable calibration (Correction Off i.e. the softkey in the user interface is checked)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNoiseFigureCalibrationState(int Channel, out bool Calibration)
        {
            ushort CalibrationAsUShort;
            int pInvokeResult = PInvoke.GetNoiseFigureCalibrationState(this._handle, Channel, out CalibrationAsUShort);
            Calibration = System.Convert.ToBoolean(CalibrationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the calibration settings (port assignment, attenuations) for a noise figure calibration.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:NFIGure:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_1">
        /// This control defines the port number of the DUT input.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_2">
        /// This control defines the port number of the DUT output.
        /// 
        /// Valid Range: 1 to n where n is the number of ports of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="External_Attenuator">
        /// This control indicates whether an external attenuator is used
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE  (0)
        /// </param>
        /// <param name="Source_Noise_Cal_Attenuation">
        /// This control sets the attenuation of the source level during the source noise calibration.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <param name="DUT_Measurement_Attenuation">
        /// This control sets the attenuation of the source level during the measurement (i.e. after calibration).
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DefineNoiseFigureCalibrationSettings(int Channel, int Port_1, int Port_2, bool External_Attenuator, double Source_Noise_Cal_Attenuation, double DUT_Measurement_Attenuation)
        {
            int pInvokeResult = PInvoke.DefineNoiseFigureCalibrationSettings(this._handle, Channel, Port_1, Port_2, System.Convert.ToUInt16(External_Attenuator), Source_Noise_Cal_Attenuation, DUT_Measurement_Attenuation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a noise figure calibration sweep for the NWA receiver, NWA source, or an external attenuator.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// (2) A noise figure calibration must be terminated with one of the following functions, to be sent immediately after the sequence of ...[:ACQuire] commands: 
        /// 
        /// rszvb_TerminateNoiseFigureCalibration - terminate calibration, discarding the acquired calibration data (the active channel is not calibrated) 
        /// 
        /// rszvb_CompleteNoiseFigureCalibration - terminate calibration, applying the acquired calibration data (the active channel is calibrated) 
        /// 
        /// These functions ensure that the analyzer is able to start a new measurement sweep.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:NFIGure[:ACQuire] RECeiver | SOURce | ATTenuator
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_Step">
        /// This control defines the calibration step, to be performed in the order RECeiver -&gt; SOURce -&gt; ATTenuator (optional, only if an external attenuator is used).
        /// 
        /// Valid Range: 
        /// RSZVB_NOISE_FIGURE_CAL_STEP_REC (0) - Receiver
        /// RSZVB_NOISE_FIGURE_CAL_STEP_SRC (1) - Source
        /// RSZVB_NOISE_FIGURE_CAL_STEP_ATT (2) - Attenuator
        /// 
        /// Default Value: RSZVB_NOISE_FIGURE_CAL_STEP_REC (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartNoiseFigureCalibration(int Channel, int Calibration_Step)
        {
            int pInvokeResult = PInvoke.StartNoiseFigureCalibration(this._handle, Channel, Calibration_Step);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function terminates a noise figure calibration, discarding the acquired data
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:NFIGure:END
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TerminateNoiseFigureCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.TerminateNoiseFigureCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function completes a noise figure calibration, storing and applying the acquired data
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:NFIGure:SAVE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CompleteNoiseFigureCalibration(int Channel)
        {
            int pInvokeResult = PInvoke.CompleteNoiseFigureCalibration(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function overwrites the current channel settings with the ones that were used during the active (previously performed) noise figure calibration. The referenced trace must show the noise figure of a device.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with option R&amp;S ZVAB-K30.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:PARameter:NFIGure:CSETtings
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Name of a noise figure trace.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int OverwriteNoiseFigureChannelSettings(int Channel, string Trace_Name)
        {
            int pInvokeResult = PInvoke.OverwriteNoiseFigureChannelSettings(this._handle, Channel, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the deembedding/embedding function for balanced ports.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;[:STATe] &lt;Boolean&gt; 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;[:STATe] &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control enables or disables the deembedding function for balanced ports.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformBalancedState(int Channel, int Function_Type, int Logical_Port_Number, bool State)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformBalancedState(this._handle, Channel, Function_Type, Logical_Port_Number, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the deembedding/embedding function for balanced ports.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;[:STATe]? 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;[:STATe]?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the state of the deembedding/embedding function for balanced ports.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformBalancedState(int Channel, int Function_Type, int Logical_Port_Number, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetVirtualTransformBalancedState(this._handle, Channel, Function_Type, Logical_Port_Number, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the capacitance, inductance or resistance values C1, C2, C3, L1, L2, L3 or R1, R2, R3 in the different circuit models for balanced port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:PARameters:C&lt;no&gt; STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:PARameters:L&lt;no&gt; STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:PARameters:R&lt;no&gt; STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:PARameters:C&lt;no&gt; STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:PARameters:L&lt;no&gt; STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:PARameters:R&lt;no&gt; STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS,&lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Parameter_Number">
        /// Number of capacitances, inductances or resistances in circuit model.
        /// 
        /// Valid Range: 1 to 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The number of capacitances, inductances or resistances depends on the selected circuit model. 
        /// 
        /// (2) 
        /// STSL   -            R1           L1
        /// STSC   C1           R1           -
        /// SLST   -            R1           L1
        /// SCST   C1           R1           -
        /// CSSL   C1, C2       R1, R2, R3   L1
        /// LSSC   C1           R1, R2, R3   L1, L2
        /// CSSC   C1, C2, C3   R1, R2, R3   -
        /// LSSL   -            R1, R2, R3   L1, L2, L3
        /// SLCS   C1, C2       R1, R2, R3   L1
        /// SCLS   C1           R1, R2, R3   L1, L2
        /// SCCS   C1, C2, C3   R1, R2, R3   -
        /// SLLS   -            R1, R2, R3   L1, L2, L3
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// 
        /// Default Value: RSZVB_BALANCED_CIRCUIT_STSL  (1) 
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS
        /// Inductance - STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS
        /// Resistance - STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS
        /// 
        /// </param>
        /// <param name="Value">
        /// Capacitance C&lt;no&gt;, Inductance L&lt;no&gt; or Resistance R&lt;no&gt; for the specified circuit model. 
        /// 
        /// Valid Values:
        /// -1.0e-3 F to 1.0e-3 F  (Capacitance)
        /// -1.0 H to 1.0 H  (Inductance)
        /// -10.0e+6 Ohm to 10.0e+6 Ohm  (Resistance)
        /// 
        /// Default Value:
        /// 1.0e-12 F  (Capacitance)
        /// 1.0e-9 H  (Inductance)
        /// 0.0 Ohm for all resistances connected in series with an inductance
        /// 10.0e+6 Ohm for all resistances connected in parallel with a capacitance
        /// 
        /// Note(s):
        /// 
        /// (1) The value depends on the selected parameter type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformBalancedPort(int Channel, int Function_Type, int Logical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, double Value)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformBalancedPort(this._handle, Channel, Function_Type, Logical_Port_Number, Parameter_Type, Parameter_Number, Circuit_Model, Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the capacitance, inductance or resistance values C1, C2, C3, L1, L2, L3 or R1, R2, R3 in the different circuit models for balanced port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:PARameters:C&lt;no&gt;? STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:PARameters:L&lt;no&gt;? STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:PARameters:R&lt;no&gt;? STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:PARameters:C&lt;no&gt;? STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:PARameters:L&lt;no&gt;? STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:PARameters:R&lt;no&gt;? STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Parameter_Number">
        /// Number of capacitances, inductances or resistances in circuit model.
        /// 
        /// Valid Range: 1 to 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The number of capacitances, inductances or resistances depends on the selected circuit model. 
        /// 
        /// (2) 
        /// STSL   -            R1           L1
        /// STSC   C1           R1           -
        /// SLST   -            R1           L1
        /// SCST   C1           R1           -
        /// CSSL   C1, C2       R1, R2, R3   L1
        /// LSSC   C1           R1, R2, R3   L1, L2
        /// CSSC   C1, C2, C3   R1, R2, R3   -
        /// LSSL   -            R1, R2, R3   L1, L2, L3
        /// SLCS   C1, C2       R1, R2, R3   L1
        /// SCLS   C1           R1, R2, R3   L1, L2
        /// SCCS   C1, C2, C3   R1, R2, R3   -
        /// SLLS   -            R1, R2, R3   L1, L2, L3
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS
        /// Inductance - STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS
        /// Resistance - STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS
        /// 
        /// </param>
        /// <param name="Value">
        /// Returns capacitance C&lt;no&gt;, inductance L&lt;no&gt; or resistance R&lt;no&gt; for the specified circuit model. 
        /// 
        /// Note(s):
        /// 
        /// (1) The value depends on the selected parameter type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformBalancedPort(int Channel, int Function_Type, int Logical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, out double Value)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformBalancedPort(this._handle, Channel, Function_Type, Logical_Port_Number, Parameter_Type, Parameter_Number, Circuit_Model, out Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the circuit model for balanced port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:TNDefinition
        /// FIMPort | STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:TNDefinition
        /// FIMPort | STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_FIMP  (0) - File import, no circuit model 
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) 
        /// data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// 
        /// Default Value:  RSZVB_BALANCED_CIRCUIT_CSSL  (5)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformBalancedCircuitModel(int Channel, int Function_Type, int Logical_Port_Number, int Circuit_Model)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformBalancedCircuitModel(this._handle, Channel, Function_Type, Logical_Port_Number, Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the circuit model for balanced port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:DEEMbedding&lt;Log_pt&gt;:TNDefinition?
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:BALanced:EMBedding&lt;Log_pt&gt;:TNDefinition?
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Circuit_Model">
        /// This control returns the circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_FIMP  (0) - File import, no circuit model 
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) 
        /// data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformBalancedCircuitModel(int Channel, int Function_Type, int Logical_Port_Number, out int Circuit_Model)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformBalancedCircuitModel(this._handle, Channel, Function_Type, Logical_Port_Number, out Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads data from a specified Touchstone file defining the characteristics of the current embedded/deembedded  balanced port circuit model. A balanced port circuit model involving file import must be selected before using this function. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:BALanced:EMBedding&lt;Log_pt&gt; '&lt;file_name&gt;', PMAin | PSECondary 
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:BALanced:DEEMbedding&lt;Log_pt&gt; '&lt;file_name&gt;', PMAin | PSECondary 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the loaded Touchstone file. The balanced port circuit models STSL | STSC | SLST | SCST require two 2-port (*.s2p) files, to be assigned to the different ports PMAin and PSECondary; the FIMPort model requires a single 4-port (*.s4p) file but no additional port assignment.
        /// 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Notes:
        /// (1) If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// </param>
        /// <param name="Parameter">
        /// Port assignment for two 2-port (*.s2p) files.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_PMAIN     (0) - Port 1
        /// RSZVB_VNET_PARAM_PSECOND   (1) - Port 2
        /// 
        /// Default Value: RSZVB_VNET_PARAM_PMAIN  (0)
        /// 
        /// Note(s):
        /// (1) The ports must be specified for the import of 2-port (*.s2p) files; they must be omitted for 4-port (*.s4p) files.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadBalancedPortCircuitModelData(int Channel, int Function_Type, int Logical_Port_Number, string File_Name, int Parameter)
        {
            int pInvokeResult = PInvoke.LoadBalancedPortCircuitModelData(this._handle, Channel, Function_Type, Logical_Port_Number, File_Name, Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads data from a specified Touchstone file defining the characteristics of the current embedded/deembedded  balanced port circuit model. A balanced port circuit model involving file import must be selected before using this function. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:BALanced:EMBedding&lt;Log_pt&gt; '&lt;file_name&gt;', PMAin | PSECondary 
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:BALanced:DEEMbedding&lt;Log_pt&gt; '&lt;file_name&gt;', PMAin | PSECondary 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Logical_Port_Number">
        /// Logical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the loaded Touchstone file. The balanced port circuit models STSL | STSC | SLST | SCST require two 2-port (*.s2p) files, to be assigned to the different ports PMAin and PSECondary; the FIMPort model requires a single 4-port (*.s4p) file but no additional port assignment.
        /// 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Notes:
        /// (1) If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// </param>
        /// <param name="Parameter">
        /// Port assignment for two 2-port (*.s2p) files.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_PMAIN     (0) - Port 1
        /// RSZVB_VNET_PARAM_PSECOND   (1) - Port 2
        /// 
        /// Default Value: RSZVB_VNET_PARAM_PMAIN  (0)
        /// 
        /// Note(s):
        /// (1) The ports must be specified for the import of 2-port (*.s2p) files; they must be omitted for 4-port (*.s4p) files.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadAndInterchangeBalancedPortCircuitModelData(int Channel, int Function_Type, int Logical_Port_Number, string File_Name, int Parameter)
        {
            int pInvokeResult = PInvoke.LoadAndInterchangeBalancedPortCircuitModelData(this._handle, Channel, Function_Type, Logical_Port_Number, File_Name, Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the deembedding/embedding function for single ended ports.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;[:STATe] &lt;Boolean&gt; 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;[:STATe] &lt;Boolean&gt; 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control enables or disables the deembedding function for single ended ports.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformSingleEndedState(int Channel, int Function_Type, int Physical_Port_Number, bool State)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformSingleEndedState(this._handle, Channel, Function_Type, Physical_Port_Number, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the deembedding/embedding function for single ended ports.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;[:STATe]?
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the state of the deembedding/embedding function for single ended ports.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformSingleEndedState(int Channel, int Function_Type, int Physical_Port_Number, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetVirtualTransformSingleEndedState(this._handle, Channel, Function_Type, Physical_Port_Number, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the capacitance, inductance or resistance values C1, C2, L1, L2 or R1, R2 in the different circuit models for single ended port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:PARameters:C&lt;no&gt; CSL | LSC | CSC | SLC | SCL | SCC,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:PARameters:L&lt;no&gt; CSL | LSC | LSL | SLC | SCL | SLL,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:PARameters:R&lt;no&gt; CSL | LSC | CSC | LSL | SLC | SCL | SCC | SLL,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:PARameters:C&lt;no&gt; CSL | LSC | CSC | SLC | SCL | SCC,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:PARameters:L&lt;no&gt; CSL | LSC | LSL | SLC | SCL | SLL,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:PARameters:R&lt;no&gt; CSL | LSC | CSC | LSL | SLC | SCL | SCC | SLL,&lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Parameter_Number">
        /// Number of capacitances, inductances or resistances in circuit model.
        /// 
        /// Valid Range: 
        /// 1 to 2  (Capacitance)
        /// 1 to 3  (Inductance, Resistance)
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The number of capacitances, inductances or resistances depends on the selected circuit model. 
        /// 
        /// (2) 
        /// CSL    C1       R1, R2   L1 
        /// LSC    C1       R1, R2   L1 
        /// CSC    C1, C2   R1, R2   - 
        /// LSL    -        R1, R2   L1, L2 
        /// SLC    C1       R1, R2   L1 
        /// SCL    C1       R1, R2   L1 
        /// SCC    C1, C2   R1, R2   - 
        /// SLL    -        R1, R2   L1, L2
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_SENDED_CIRCUIT_CSL   (1) - Serial C, shunt L
        /// RSZVB_SENDED_CIRCUIT_LSC   (2) - Serial L, shunt C
        /// RSZVB_SENDED_CIRCUIT_CSC   (3) - Serial C, shunt C 
        /// RSZVB_SENDED_CIRCUIT_LSL   (4) - Serial L, shunt L
        /// RSZVB_SENDED_CIRCUIT_SLC   (5) - Shunt L, serial C 
        /// RSZVB_SENDED_CIRCUIT_SCL   (6) - Shunt C, serial L 
        /// RSZVB_SENDED_CIRCUIT_SCC   (7) - Shunt C, serial C
        /// RSZVB_SENDED_CIRCUIT_SLL   (8) - Shunt L, serial L 
        /// 
        /// Default Value: RSZVB_SENDED_CIRCUIT_CSL  (1) 
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - CSL | LSC | CSC | SLC | SCL | SCC
        /// Inductance - CSL | LSC | LSL | SLC | SCL | SLL
        /// Resistance - CSL | LSC | CSC | LSL | SLC | SCL | SCC | SLL
        /// 
        /// </param>
        /// <param name="Value">
        /// Capacitance C&lt;no&gt;, Inductance L&lt;no&gt; or Resistance R&lt;no&gt; for the specified circuit model. 
        /// 
        /// Valid Values:
        /// -1.0e-3 F to 1.0e-3 F  (Capacitance)
        /// -1.0 H to 1.0 H  (Inductance)
        /// -10.0e+6 Ohm to 10.0e+6 Ohm  (Resistance)
        /// 
        /// Default Value:
        /// 1.0e-12 F  (Capacitance)
        /// 1.0e-9 H  (Inductance)
        /// 0.0 Ohm for all resistances connected in series with an inductance
        /// 10.0e+6 Ohm for all resistances connected in parallel with a capacitance
        /// 
        /// Note(s):
        /// 
        /// (1) The value depends on the selected parameter type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformSingleEndedPort(int Channel, int Function_Type, int Physical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, double Value)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformSingleEndedPort(this._handle, Channel, Function_Type, Physical_Port_Number, Parameter_Type, Parameter_Number, Circuit_Model, Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the capacitance, inductance or resistance values C1, C2, L1, L2 or R1, R2 in the different circuit models for single ended port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:PARameters:C&lt;no&gt;? CSL | LSC | CSC | SLC | SCL | SCC
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:PARameters:L&lt;no&gt;? CSL | LSC | LSL | SLC | SCL | SLL
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:PARameters:R&lt;no&gt;? CSL | LSC | CSC | LSL | SLC | SCL | SCC | SLL
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:PARameters:C&lt;no&gt; CSL? | LSC | CSC | SLC | SCL | SCC
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:PARameters:L&lt;no&gt; CSL? | LSC | LSL | SLC | SCL | SLL
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:PARameters:R&lt;no&gt; CSL? | LSC | CSC | LSL | SLC | SCL | SCC | SLL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Parameter_Number">
        /// Number of capacitances, inductances or resistances in circuit model.
        /// 
        /// Valid Range: 
        /// 1 to 2  (Capacitance)
        /// 1 to 3  (Inductance, Resistance)
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The number of capacitances, inductances or resistances depends on the selected circuit model. 
        /// 
        /// (2) 
        /// CSL    C1       R1, R2   L1 
        /// LSC    C1       R1, R2   L1 
        /// CSC    C1, C2   R1, R2   - 
        /// LSL    -        R1, R2   L1, L2 
        /// SLC    C1       R1, R2   L1 
        /// SCL    C1       R1, R2   L1 
        /// SCC    C1, C2   R1, R2   - 
        /// SLL    -        R1, R2   L1, L2
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_SENDED_CIRCUIT_CSL   (1) - Serial C, shunt L
        /// RSZVB_SENDED_CIRCUIT_LSC   (2) - Serial L, shunt C
        /// RSZVB_SENDED_CIRCUIT_CSC   (3) - Serial C, shunt C 
        /// RSZVB_SENDED_CIRCUIT_LSL   (4) - Serial L, shunt L
        /// RSZVB_SENDED_CIRCUIT_SLC   (5) - Shunt L, serial C 
        /// RSZVB_SENDED_CIRCUIT_SCL   (6) - Shunt C, serial L 
        /// RSZVB_SENDED_CIRCUIT_SCC   (7) - Shunt C, serial C
        /// RSZVB_SENDED_CIRCUIT_SLL   (8) - Shunt L, serial L 
        /// 
        /// Default Value: RSZVB_SENDED_CIRCUIT_CSL  (1) 
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - CSL | LSC | CSC | SLC | SCL | SCC
        /// Inductance - CSL | LSC | LSL | SLC | SCL | SLL
        /// Resistance - CSL | LSC | CSC | LSL | SLC | SCL | SCC | SLL
        /// 
        /// </param>
        /// <param name="Value">
        /// Returns capacitance C&lt;no&gt;, inductance L&lt;no&gt; or resistance R&lt;no&gt; for the specified circuit model. 
        /// 
        /// Note(s):
        /// 
        /// (1) The value depends on the selected parameter type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformSingleEndedPort(int Channel, int Function_Type, int Physical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, out double Value)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformSingleEndedPort(this._handle, Channel, Function_Type, Physical_Port_Number, Parameter_Type, Parameter_Number, Circuit_Model, out Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the circuit model for single ended port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:TNDefinition
        /// FIMPort | CSL | LSC | CSC | LSL | SLC | SCL | SCC | SLL 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:TNDefinition
        /// FIMPort | CSL | LSC | CSC | LSL | SLC | SCL | SCC | SLL 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_SENDED_CIRCUIT_FIMP  (0) - File import, no circuit model 
        /// RSZVB_SENDED_CIRCUIT_CSL   (1) - Serial C, shunt L
        /// RSZVB_SENDED_CIRCUIT_LSC   (2) - Serial L, shunt C
        /// RSZVB_SENDED_CIRCUIT_CSC   (3) - Serial C, shunt C 
        /// RSZVB_SENDED_CIRCUIT_LSL   (4) - Serial L, shunt L
        /// RSZVB_SENDED_CIRCUIT_SLC   (5) - Shunt L, serial C 
        /// RSZVB_SENDED_CIRCUIT_SCL   (6) - Shunt C, serial L 
        /// RSZVB_SENDED_CIRCUIT_SCC   (7) - Shunt C, serial C
        /// RSZVB_SENDED_CIRCUIT_SSL   (8) - Shunt L, serial L 
        /// 
        /// Default Value: RSZVB_SENDED_CIRCUIT_CSL  (1) 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformSingleEndedCircuitModel(int Channel, int Function_Type, int Physical_Port_Number, int Circuit_Model)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformSingleEndedCircuitModel(this._handle, Channel, Function_Type, Physical_Port_Number, Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the circuit model for single ended port deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:DEEMbedding&lt;Ph_pt&gt;:TNDefinition?
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:SENDed:EMBedding&lt;Ph_pt&gt;:TNDefinition?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Circuit_Model">
        /// This control returns the circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_SENDED_CIRCUIT_FIMP  (0) - File import, no circuit model 
        /// RSZVB_SENDED_CIRCUIT_CSL   (1) - Serial C, shunt L
        /// RSZVB_SENDED_CIRCUIT_LSC   (2) - Serial L, shunt C
        /// RSZVB_SENDED_CIRCUIT_CSC   (3) - Serial C, shunt C 
        /// RSZVB_SENDED_CIRCUIT_LSL   (4) - Serial L, shunt L
        /// RSZVB_SENDED_CIRCUIT_SLC   (5) - Shunt L, serial C 
        /// RSZVB_SENDED_CIRCUIT_SCL   (6) - Shunt C, serial L 
        /// RSZVB_SENDED_CIRCUIT_SCC   (7) - Shunt C, serial C
        /// RSZVB_SENDED_CIRCUIT_SSL   (8) - Shunt L, serial L 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformSingleEndedCircuitModel(int Channel, int Function_Type, int Physical_Port_Number, out int Circuit_Model)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformSingleEndedCircuitModel(this._handle, Channel, Function_Type, Physical_Port_Number, out Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads data from a specified two-port (*.sp2) Touchstone file defining the characteristics of the current embedded/deembedded single ended port circuit model. The single ended port circuit model involving file import (FIMPort) must be selected before using this function. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:SENDed:EMBedding&lt;Ph_pt&gt; '&lt;file_name&gt;' 
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:SENDed:DEEMbedding&lt;Ph_pt&gt; '&lt;file_name&gt;' 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the loaded Touchstone file. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadSingleEndedPortCircuitModelData(int Channel, int Function_Type, int Physical_Port_Number, string File_Name)
        {
            int pInvokeResult = PInvoke.LoadSingleEndedPortCircuitModelData(this._handle, Channel, Function_Type, Physical_Port_Number, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads data from a specified two-port (*.sp2) Touchstone file defining the characteristics of the current embedded/deembedded single ended port circuit model. The single ended port circuit model involving file import (FIMPort) must be selected before using this function. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:SENDed:EMBedding&lt;Ph_pt&gt; '&lt;file_name&gt;',IPORt 
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:SENDed:DEEMbedding&lt;Ph_pt&gt; '&lt;file_name&gt;',IPORt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Physical_Port_Number">
        /// Physical port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the loaded Touchstone file. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadAndInterchangeSingleEndedPortCircuitModelData(int Channel, int Function_Type, int Physical_Port_Number, string File_Name)
        {
            int pInvokeResult = PInvoke.LoadAndInterchangeSingleEndedPortCircuitModelData(this._handle, Channel, Function_Type, Physical_Port_Number, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the deembedding/embedding function for ground loops. It is allowed to change the circuit model and its parameters while deembedding is enabled.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding[:STATe] ON | OFF
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="State">
        /// This control enables or disables the deembedding function for ground loop.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformGroundLoopState(int Channel, int Function_Type, bool State)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformGroundLoopState(this._handle, Channel, Function_Type, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the deembedding/embedding function for ground loops. It is allowed to change the circuit model and its parameters while deembedding is enabled.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding[:STATe]?
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="State">
        /// This control returns the state of the deembedding function for ground loop.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformGroundLoopState(int Channel, int Function_Type, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetVirtualTransformGroundLoopState(this._handle, Channel, Function_Type, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the capacitance C, inductance L or resistance R value in the different circuit models for ground loop deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:PARameters:C SC, &lt;capacitance&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:PARameters:L SL, &lt;inductance&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:PARameters:R SC | SL, &lt;resistance&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:PARameters:C SC,&lt;capacitance&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:PARameters:L SL, &lt;inductance&gt; 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:PARameters:R SC | SL,&lt;resistance&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_GLOOP_CIRCUIT_SL (1) - Shunt L
        /// RSZVB_GLOOP_CIRCUIT_SC (2) - Shunt C
        /// 
        /// Default Value: RSZVB_GLOOP_CIRCUIT_SL (1) 
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - SC
        /// Inductance - SL
        /// Resistance - SL | SC
        /// 
        /// </param>
        /// <param name="Ground_Loop_Value">
        /// Capacitance C, Inductance L or Resistance R for the specified circuit model. 
        /// 
        /// Valid Values:
        /// -1.0e-3 F to 1.0e-3 F  (Capacitance)
        /// -1.0 H to 1.0 H  (Inductance)
        /// -10.0e+6 Ohm to 10.0e+6 Ohm  (Resistance)
        /// 
        /// Default Value:
        /// 1.0e-12 F  (Capacitance)
        /// 1.0e-9 H  (Inductance)
        /// 0.0 Ohm if the resistance is connected in series with an inductance (SL)
        /// 10.0e+6 Ohm if the resistance is connected in parallel with a capacitance (SC)
        /// 
        /// Note(s):
        /// 
        /// (1) The value depends on the selected parameter type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformGroundLoop(int Channel, int Function_Type, int Parameter_Type, int Circuit_Model, double Ground_Loop_Value)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformGroundLoop(this._handle, Channel, Function_Type, Parameter_Type, Circuit_Model, Ground_Loop_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the capacitance C, inductance L or resistance R value in the different circuit models for ground loop deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:PARameters:C? SC
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:PARameters:L? SL
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:PARameters:R? SC | SL
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:PARameters:C? SC
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:PARameters:L? SL
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:PARameters:R? SC | SL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_GLOOP_CIRCUIT_SL (1) - Shunt L
        /// RSZVB_GLOOP_CIRCUIT_SC (2) - Shunt C
        /// 
        /// Default Value: RSZVB_GLOOP_CIRCUIT_SL (1) 
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - SC
        /// Inductance - SL
        /// Resistance - SL | SC
        /// 
        /// </param>
        /// <param name="Ground_Loop_Value">
        /// Returns Capacitance C, Inductance L or Resistance R for the specified circuit model. 
        /// 
        /// Valid Values:
        /// -1.0e-3 F to 1.0e-3 F  (Capacitance)
        /// -1.0 H to 1.0 H  (Inductance)
        /// -10.0e+6 Ohm to 10.0e+6 Ohm  (Resistance)
        /// 
        /// Note(s):
        /// 
        /// (1) The value depends on the selected parameter type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformGroundLoop(int Channel, int Function_Type, int Parameter_Type, int Circuit_Model, out double Ground_Loop_Value)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformGroundLoop(this._handle, Channel, Function_Type, Parameter_Type, Circuit_Model, out Ground_Loop_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the circuit model for ground loop deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:TNDefinition FIMPort | SL | SC 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:TNDefinition FIMPort | SL | SC 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_GLOOP_CIRCUIT_FIMP (0) - File import, no circuit model 
        /// RSZVB_GLOOP_CIRCUIT_SL   (1) - Shunt L
        /// RSZVB_GLOOP_CIRCUIT_SC   (2) - Shunt C
        /// 
        /// Default Value: RSZVB_GLOOP_CIRCUIT_SL  (1) 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformGroundLoopCircuitModel(int Channel, int Function_Type, int Circuit_Model)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformGroundLoopCircuitModel(this._handle, Channel, Function_Type, Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the circuit model for ground loop deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:DEEMbedding:TNDefinition? 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:GLOop:EMBedding:TNDefinition?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Circuit_Model">
        /// This control returns the circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_GLOOP_CIRCUIT_FIMP (0) - File import, no circuit model 
        /// RSZVB_GLOOP_CIRCUIT_SL   (1) - Shunt L
        /// RSZVB_GLOOP_CIRCUIT_SC   (2) - Shunt C
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformGroundLoopCircuitModel(int Channel, int Function_Type, out int Circuit_Model)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformGroundLoopCircuitModel(this._handle, Channel, Function_Type, out Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads data from a specified one-port (*.s1p) Touchstone file defining the characteristics of the current embedded/deembedded ground loop circuit model. The ground loop circuit model involving file import (FIMPort) must be selected before using this function. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:GLOop:DEEMbedding&lt;Ph_pt&gt; '&lt;file_name&gt;'
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:GLOop:EMBedding&lt;Ph_pt&gt; '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the loaded Touchstone file. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadGroundLoopCircuitModelData(int Channel, int Function_Type, string File_Name)
        {
            int pInvokeResult = PInvoke.LoadGroundLoopCircuitModelData(this._handle, Channel, Function_Type, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the deembedding/embedding function for for port pairs.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;[:STATe] &lt;Boolean&gt; 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;[:STATe] &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control enables or disables the deembedding function for port pair.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformPortPairState(int Channel, int Function_Type, int Port_Pair, bool State)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformPortPairState(this._handle, Channel, Function_Type, Port_Pair, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the deembedding/embedding function for for port pairs.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;[:STATe]?
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;[:STATe]?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// This control returns the state of the embedding/deembedding function for port pair.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformPortPairState(int Channel, int Function_Type, int Port_Pair, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetVirtualTransformPortPairState(this._handle, Channel, Function_Type, Port_Pair, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the capacitance, inductance or resistance values C1, C2, C3, L1, L2, L3 or R1, R2, R3 in the different circuit models for port pair deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:PARameters:C&lt;no&gt; STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:PARameters:L&lt;no&gt; STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:PARameters:R&lt;no&gt; STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:PARameters:C&lt;no&gt; STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:PARameters:L&lt;no&gt; STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:PARameters:R&lt;no&gt; STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS,&lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Parameter_Number">
        /// Number of capacitances, inductances or resistances in circuit model.
        /// 
        /// Valid Range: 1 to 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The number of capacitances, inductances or resistances depends on the selected circuit model. 
        /// 
        /// (2) 
        /// STSL   -            R1           L1
        /// STSC   C1           R1           -
        /// SLST   -            R1           L1
        /// SCST   C1           R1           -
        /// CSSL   C1, C2       R1, R2, R3   L1
        /// LSSC   C1           R1, R2, R3   L1, L2
        /// CSSC   C1, C2, C3   R1, R2, R3   -
        /// LSSL   -            R1, R2, R3   L1, L2, L3
        /// SLCS   C1, C2       R1, R2, R3   L1
        /// SCLS   C1           R1, R2, R3   L1, L2
        /// SCCS   C1, C2, C3   R1, R2, R3   -
        /// SLLS   -            R1, R2, R3   L1, L2, L3
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// 
        /// Default Value: RSZVB_BALANCED_CIRCUIT_STSL  (1) 
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS
        /// Inductance - STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS
        /// Resistance - STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS
        /// 
        /// </param>
        /// <param name="Value">
        /// Capacitance C&lt;no&gt;, Inductance L&lt;no&gt; or Resistance R&lt;no&gt; for the specified circuit model. 
        /// 
        /// Valid Values:
        /// -1.0e-3 F to 1.0e-3 F  (Capacitance)
        /// -1.0 H to 1.0 H  (Inductance)
        /// -10.0e+6 Ohm to 10.0e+6 Ohm  (Resistance)
        /// 
        /// Default Value:
        /// 1.0e-12 F  (Capacitance)
        /// 1.0e-9 H  (Inductance)
        /// 0.0 Ohm for all resistances connected in series with an inductance
        /// 10.0e+6 Ohm for all resistances connected in parallel with a capacitance
        /// 
        /// Note(s):
        /// 
        /// (1) The value depends on the selected parameter type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformPortPair(int Channel, int Function_Type, int Port_Pair, int Parameter_Type, int Parameter_Number, int Circuit_Model, double Value)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformPortPair(this._handle, Channel, Function_Type, Port_Pair, Parameter_Type, Parameter_Number, Circuit_Model, Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the capacitance, inductance or resistance values C1, C2, C3, L1, L2, L3 or R1, R2, R3 in the different circuit models for port pair deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:PARameters:C&lt;no&gt;? STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:PARameters:L&lt;no&gt;? STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:PARameters:R&lt;no&gt;? STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:PARameters:C&lt;no&gt;? STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:PARameters:L&lt;no&gt;? STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS,&lt;numeric_value&gt;
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:PARameters:R&lt;no&gt;? STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS,&lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Parameter_Type">
        /// Parameter type, capacitance, inductance or resistance.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_C  (0) - Capacitance
        /// RSZVB_VNET_PARAM_L  (1) - Inductance
        /// RSZVB_VNET_PARAM_R  (2) - Resistance
        /// 
        /// Default Value: RSZVB_VNET_PARAM_C  (0)
        /// </param>
        /// <param name="Parameter_Number">
        /// Number of capacitances, inductances or resistances in circuit model.
        /// 
        /// Valid Range: 1 to 3
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) The number of capacitances, inductances or resistances depends on the selected circuit model. 
        /// 
        /// (2) 
        /// STSL   -            R1           L1
        /// STSC   C1           R1           -
        /// SLST   -            R1           L1
        /// SCST   C1           R1           -
        /// CSSL   C1, C2       R1, R2, R3   L1
        /// LSSC   C1           R1, R2, R3   L1, L2
        /// CSSC   C1, C2, C3   R1, R2, R3   -
        /// LSSL   -            R1, R2, R3   L1, L2, L3
        /// SLCS   C1, C2       R1, R2, R3   L1
        /// SCLS   C1           R1, R2, R3   L1, L2
        /// SCCS   C1, C2, C3   R1, R2, R3   -
        /// SLLS   -            R1, R2, R3   L1, L2, L3
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// 
        /// Default Value: RSZVB_BALANCED_CIRCUIT_STSL  (1) 
        /// 
        /// Note(s):
        /// 
        /// (1) The circuit model depends on the selected parameter type.
        /// 
        /// (2) Parameter type: 
        /// 
        /// Capacitance - STSC | SCST | CSSL | LSSC | CSSC | SLCS | SCLS | SCCS
        /// Inductance - STSL | SLST | CSSL | LSSC | LSSL | SLCS | SCLS | SLLS
        /// Resistance - STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS
        /// 
        /// </param>
        /// <param name="Value">
        /// Capacitance C&lt;no&gt;, Inductance L&lt;no&gt; or Resistance R&lt;no&gt; for the specified circuit model. 
        /// 
        /// Valid Values:
        /// -1.0e-3 F to 1.0e-3 F  (Capacitance)
        /// -1.0 H to 1.0 H  (Inductance)
        /// -10.0e+6 Ohm to 10.0e+6 Ohm  (Resistance)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformPortPair(int Channel, int Function_Type, int Port_Pair, int Parameter_Type, int Parameter_Number, int Circuit_Model, out double Value)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformPortPair(this._handle, Channel, Function_Type, Port_Pair, Parameter_Type, Parameter_Number, Circuit_Model, out Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the circuit model for port pair deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:TNDefinition
        /// FIMPort | STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:TNDefinition
        /// FIMPort | STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Circuit_Model">
        /// This control defines the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_FIMP  (0) - File import, no circuit model 
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) 
        /// data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// 
        /// Default Value:  RSZVB_BALANCED_CIRCUIT_CSSL  (5)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVirtualTransformPortPairCircuitModel(int Channel, int Function_Type, int Port_Pair, int Circuit_Model)
        {
            int pInvokeResult = PInvoke.SetVirtualTransformPortPairCircuitModel(this._handle, Channel, Function_Type, Port_Pair, Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the circuit model for port pair deembedding/embedding.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:DEEMbedding&lt;List_idx&gt;:TNDefinition?
        /// FIMPort | STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS 
        /// CALCulate&lt;Ch&gt;:TRANsform:VNETworks:PPAir:EMBedding&lt;List_idx&gt;:TNDefinition?
        /// FIMPort | STSL | STSC | SLST | SCST | CSSL | LSSC | CSSC | LSSL | SLCS | SCLS | SCCS | SLLS 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Circuit_Model">
        /// This control returns the possible circuit model.
        /// 
        /// Valid Values:
        /// RSZVB_BALANCED_CIRCUIT_FIMP  (0) - File import, no circuit model 
        /// RSZVB_BALANCED_CIRCUIT_STSL  (1) - Serial Touchstone (.s2p) 
        /// data, shunt L
        /// RSZVB_BALANCED_CIRCUIT_STSC  (2) - Serial Touchstone (.s2p) data, shunt C
        /// RSZVB_BALANCED_CIRCUIT_SLST  (3) - Shunt L, serial Touchstone (.s2p) data 
        /// RSZVB_BALANCED_CIRCUIT_SCST  (4) - Shunt C, serial Touchstone (.s2p) data
        /// RSZVB_BALANCED_CIRCUIT_CSSL  (5) - Serial Cs, shunt L 
        /// RSZVB_BALANCED_CIRCUIT_LSSC  (6) - Serial Ls, shunt C 
        /// RSZVB_BALANCED_CIRCUIT_CSSC  (7) - Serial Cs, shunt C
        /// RSZVB_BALANCED_CIRCUIT_LSSL  (8) - Serial Ls, shunt L
        /// RSZVB_BALANCED_CIRCUIT_SLCS  (9) - Shunt L, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SCLS  (10) - Shunt C, serial Ls
        /// RSZVB_BALANCED_CIRCUIT_SCCS  (11) - Shunt C, serial Cs
        /// RSZVB_BALANCED_CIRCUIT_SLLS  (12) - Shunt L, serial Ls
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVirtualTransformPortPairCircuitModel(int Channel, int Function_Type, int Port_Pair, out int Circuit_Model)
        {
            int pInvokeResult = PInvoke.GetVirtualTransformPortPairCircuitModel(this._handle, Channel, Function_Type, Port_Pair, out Circuit_Model);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads data from a specified Touchstone file defining the characteristics of the current embedded/deembedded  port pair circuit model. A balanced port circuit model involving file import must be selected before using this function. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:PPAir:EMBedding&lt;List_idx&gt; '&lt;file_name&gt;', PMAin | PSECondary 
        /// MMEMory:LOAD:VNETworks&lt;Ch&gt;:PPAir:DEEMbedding&lt;List_idx&gt; '&lt;file_name&gt;', PMAin | PSECondary 
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Function_Type">
        /// Function type, deembedding or embedding.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_FUNC_DEEMBED  (0) - Deembedding
        /// RSZVB_VNET_FUNC_EMBED    (1) - Embedding
        /// 
        /// Default Value: RSZVB_VNET_FUNC_DEEMBED  (0)
        /// </param>
        /// <param name="Port_Pair">
        /// Current number of a port pair in the list.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the loaded Touchstone file. The balanced port circuit models STSL | STSC | SLST | SCST require two 2-port (*.s2p) files, to be assigned to the different ports PMAin and PSECondary; the FIMPort model requires a single 4-port (*.s4p) file but no additional port assignment.
        /// 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// Notes:
        /// (1) If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?. 
        /// </param>
        /// <param name="Parameter">
        /// Port assignment for two 2-port (*.s2p) files.
        /// 
        /// Valid Values:
        /// RSZVB_VNET_PARAM_PMAIN     (0) - Port 1
        /// RSZVB_VNET_PARAM_PSECOND   (1) - Port 2
        /// 
        /// Default Value: RSZVB_VNET_PARAM_PMAIN  (0)
        /// 
        /// Note(s):
        /// (1) The ports must be specified for the import of 2-port (*.s2p) files; they must be omitted for 4-port (*.s4p) files.
        /// </param>
        /// <param name="Interchange_Port_Numbers">
        /// Interchange port numbers of loaded *.s2p file. If the parameter is omitted, the port numbers are not interchanged. The parameter must not be used for 4-port files.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadPortPairCircuitModelData(int Channel, int Function_Type, int Port_Pair, string File_Name, int Parameter, bool Interchange_Port_Numbers)
        {
            int pInvokeResult = PInvoke.LoadPortPairCircuitModelData(this._handle, Channel, Function_Type, Port_Pair, File_Name, Parameter, System.Convert.ToUInt16(Interchange_Port_Numbers));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function qualifies whether the signal at port no. &lt;Pt&gt; is a coherent or a non-coherent signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:PORT&lt;Pt&gt;[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Coherent_Signal">
        /// This control sets the coherent or non-coherent signal at port no. &lt;Pt&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off - non-coherent signal
        /// 
        /// (2) On - coherent signal
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCoherentSignalState(int Channel, int Port, bool Coherent_Signal)
        {
            int pInvokeResult = PInvoke.SetCoherentSignalState(this._handle, Channel, Port, System.Convert.ToUInt16(Coherent_Signal));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the signal at port no. &lt;Pt&gt; is a coherent or a non-coherent signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:PORT&lt;Pt&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Coherent_Signal">
        /// This control returns the coherent or non-coherent signal at port no. &lt;Pt&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) Off - non-coherent signal
        /// 
        /// (2) On - coherent signal
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCoherentSignalState(int Channel, int Port, out bool Coherent_Signal)
        {
            ushort Coherent_SignalAsUShort;
            int pInvokeResult = PInvoke.GetCoherentSignalState(this._handle, Channel, Port, out Coherent_SignalAsUShort);
            Coherent_Signal = System.Convert.ToBoolean(Coherent_SignalAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the amplitude for the coherent signal at port no. &lt;Pt&gt; relative to the amplitude of the reference signal (SOURce&lt;Ch&gt;:CMODe:RPORt). The amplitude replaces the port amplitude as long as the port signal is selected as a coherent signal (SOURce&lt;Ch&gt;:CMODe:PORT&lt;Pt&gt;[:STATe] ON). 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:PORT&lt;Pt&gt;:AMPLitude
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Amplitude">
        /// This control defines the amplitude for the coherent signal at port no. &lt;Pt&gt;
        /// 
        /// Valid Values:
        /// -300.0 to 300.0 dB
        /// 
        /// Default Value: 0.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCoherentSignalAmplitude(int Channel, int Port, double Amplitude)
        {
            int pInvokeResult = PInvoke.SetCoherentSignalAmplitude(this._handle, Channel, Port, Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the amplitude for the coherent signal at port no. &lt;Pt&gt; relative to the amplitude of the reference signal.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:PORT&lt;Pt&gt;:AMPLitude?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Amplitude">
        /// This control returns the amplitude for the coherent signal at port no. &lt;Pt&gt;
        /// 
        /// Valid Values:
        /// -300.0 to 300.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCoherentSignalAmplitude(int Channel, int Port, out double Amplitude)
        {
            int pInvokeResult = PInvoke.GetCoherentSignalAmplitude(this._handle, Channel, Port, out Amplitude);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the phase for the coherent signal at port no. &lt;Pt&gt; relative to the phase of the reference signal (SOURce&lt;Ch&gt;:CMODe:RPORt).   
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:PORT&lt;Pt&gt;:PHASe
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Phase">
        /// This control defines the phase for the coherent signal at port no. &lt;Pt&gt;
        /// 
        /// Valid Values:
        /// -180.0 to 180.0 deg
        /// 
        /// Default Value: 0.0 deg
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCoherentSignalPhase(int Channel, int Port, double Phase)
        {
            int pInvokeResult = PInvoke.SetCoherentSignalPhase(this._handle, Channel, Port, Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the phase for the coherent signal at port no. &lt;Pt&gt; relative to the phase of the reference signal (SOURce&lt;Ch&gt;:CMODe:RPORt).   
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:PORT&lt;Pt&gt;:PHASe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Phase">
        /// This control returns the phase for the coherent signal at port no. &lt;Pt&gt;
        /// 
        /// Valid Values:
        /// -1800.0 to 180.0 deg
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCoherentSignalPhase(int Channel, int Port, out double Phase)
        {
            int pInvokeResult = PInvoke.GetCoherentSignalPhase(this._handle, Channel, Port, out Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the reference port for the Defined Coherence Mode.   
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:RPORt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Port">
        /// This control selects the reference port for the Defined Coherence Mode.
        /// 
        /// Valid Values:
        /// 1 to the total number of ports of the analyzer (must be &gt; 2)
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCoherentSignalReferencePort(int Channel, int Reference_Port)
        {
            int pInvokeResult = PInvoke.SetCoherentSignalReferencePort(this._handle, Channel, Reference_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the reference port of the Defined Coherence Mode.   
        /// 
        /// Note(s):
        /// 
        /// (1) This function is only availably for ZVA or ZVT instruments.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:CMODe:RPORt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Reference_Port">
        /// This control returns the reference port of the Defined Coherence Mode.
        /// 
        /// Valid Values:
        /// 1 to the total number of ports of the analyzer
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCoherentSignalReferencePort(int Channel, out int Reference_Port)
        {
            int pInvokeResult = PInvoke.GetCoherentSignalReferencePort(this._handle, Channel, out Reference_Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates normal or alternate sweep mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]COUPle ALL | NONE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Alternate_Sweep_Mode">
        /// This control activates normal or alternate sweep mode.
        /// 
        /// Valid Values:
        /// RSZVB_ALT_SWE_MODE_NORMAL (0) - Normal
        /// RSZVB_ALT_SWE_MODE_ALTER  (1) - Alternate
        /// 
        /// Default Value: RSZVB_ALT_SWE_MODE_NORMAL (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Normal - normal sweep mode (alternate off), complete all partial measurements before proceeding to the net sweep point.
        /// 
        /// (2) Alternate - alternate sweep mode on, reverse the order of partial measurements and sweeps.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAlternateSweepMode(int Channel, int Alternate_Sweep_Mode)
        {
            int pInvokeResult = PInvoke.SetAlternateSweepMode(this._handle, Channel, Alternate_Sweep_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the alternate sweep mode.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]COUPle?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Alternate_Sweep_Mode">
        /// This control returns the state of the alternate sweep mode.
        /// 
        /// Valid Values:
        /// RSZVB_ALT_SWE_MODE_NORMAL (0) - Normal
        /// RSZVB_ALT_SWE_MODE_ALTER  (1) - Alternate
        /// 
        /// Note(s):
        /// 
        /// (1) Normal - normal sweep mode (alternate off), complete all partial measurements before proceeding to the net sweep point.
        /// 
        /// (2) Alternate - alternate sweep mode on, reverse the order of partial measurements and sweeps.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAlternateSweepMode(int Channel, out int Alternate_Sweep_Mode)
        {
            int pInvokeResult = PInvoke.GetAlternateSweepMode(this._handle, Channel, out Alternate_Sweep_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines whether the analyzer measures with a local oscillator frequency LO below or above the RF input frequency.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:SBANd POSitive | NEGative | AUTO
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Spurious_Avoidance">
        /// This control defines whether the analyzer measures with a local oscillator frequency LO below or above the RF input frequency..
        /// 
        /// Valid Values:
        /// RSZVB_AVOID_AUTO (0) - Auto
        /// RSZVB_AVOID_POS  (1) - LO &gt; RF
        /// RSZVB_AVOID_NEG  (2) - LO &lt; RF
        /// 
        /// Default Value: RSZVB_AVOID_AUTO (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Auto - The analyzer auto-selects the local oscillator frequency, depending on the receiver (RF) frequency and the test port.
        /// 
        /// (2) LO &gt; RF - The LO frequency is always above the measured RF frequency.
        /// 
        /// (3) LO &lt; RF - The LO frequency is always below the measured RF frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSpuriousAvoidance(int Channel, int Spurious_Avoidance)
        {
            int pInvokeResult = PInvoke.SetSpuriousAvoidance(this._handle, Channel, Spurious_Avoidance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the analyzer measures with a local oscillator frequency LO below or above the RF input frequency.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:SBANd?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Spurious_Avoidance">
        /// This control returns whether the analyzer measures with a local oscillator frequency LO below or above the RF input frequency..
        /// 
        /// Valid Values:
        /// RSZVB_AVOID_AUTO (0) - Auto
        /// RSZVB_AVOID_POS  (1) - LO &gt; RF
        /// RSZVB_AVOID_NEG  (2) - LO &lt; RF
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSpuriousAvoidance(int Channel, out int Spurious_Avoidance)
        {
            int pInvokeResult = PInvoke.GetSpuriousAvoidance(this._handle, Channel, out Spurious_Avoidance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the Automatic Level Control for all channels. 
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:ALC:SETTings[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="ALC_State">
        /// This control enables or disables the Automatic Level Control for all channels.  
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutomaticLevelControlState(bool ALC_State)
        {
            int pInvokeResult = PInvoke.SetAutomaticLevelControlState(this._handle, System.Convert.ToUInt16(ALC_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Automatic Level Control for all channels. 
        /// 
        /// Remote-control command(s):
        /// DIAGnostic:ALC:SETTings[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="ALC_State">
        /// This control returns the state of the Automatic Level Control for all channels.  
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutomaticLevelControlState(out bool ALC_State)
        {
            ushort ALC_StateAsUShort;
            int pInvokeResult = PInvoke.GetAutomaticLevelControlState(this._handle, out ALC_StateAsUShort);
            ALC_State = System.Convert.ToBoolean(ALC_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enables or disables individual ALC (Automatic Level Control) settings at port &lt;Pt&gt;.  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:CONTrol
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// Enables (ON) or disables (OFF) individual ALC settings. 
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetIndividualALCPortState(int Channel, int Port, bool State)
        {
            int pInvokeResult = PInvoke.SetIndividualALCPortState(this._handle, Channel, Port, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the state of individual ALC (Automatic Level Control) settings at port &lt;Pt&gt;.  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:CONTrol?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// Returns the state of the individual ALC settings. 
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetIndividualALCPortState(int Channel, int Port, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetIndividualALCPortState(this._handle, Channel, Port, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enables or disables ALC (Automatic Level Control) at port &lt;Pt&gt;.  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC[:STATe]
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// Enables (ON) or disables (OFF) ALC. 
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetALCPortState(int Channel, int Port, bool State)
        {
            int pInvokeResult = PInvoke.SetALCPortState(this._handle, Channel, Port, System.Convert.ToUInt16(State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the state of ALC (Automatic Level Control) at port &lt;Pt&gt;.  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC[:STATe]?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="State">
        /// Returns the state of ALC. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetALCPortState(int Channel, int Port, out bool State)
        {
            ushort StateAsUShort;
            int pInvokeResult = PInvoke.GetALCPortState(this._handle, Channel, Port, out StateAsUShort);
            State = System.Convert.ToBoolean(StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Suspends the ALC mechanism at source port &lt;Pt&gt; while the analyzer acquires measurement data (Clamp ALC during Measurement).  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:CLAMp
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Clamp_State">
        /// Suspends the ALC mechanism at source port &lt;Pt&gt; while the analyzer acquires measurement data (Clamp ALC during Measurement). 
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetALCPortClamp(int Channel, int Port, bool Clamp_State)
        {
            int pInvokeResult = PInvoke.SetALCPortClamp(this._handle, Channel, Port, System.Convert.ToUInt16(Clamp_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries state of clamp ALC during Measurement.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:CLAMp?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Clamp_State">
        /// Returns state of clamp ALC during Measurement. 
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetALCPortClamp(int Channel, int Port, out bool Clamp_State)
        {
            ushort Clamp_StateAsUShort;
            int pInvokeResult = PInvoke.GetALCPortClamp(this._handle, Channel, Port, out Clamp_StateAsUShort);
            Clamp_State = System.Convert.ToBoolean(Clamp_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the Low Phase Noise function. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:LPNoise &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Low_Phase_Noise_State">
        /// This control enables or disables the Low Phase Noise function. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLowPhaseNoiseState(int Channel, bool Low_Phase_Noise_State)
        {
            int pInvokeResult = PInvoke.SetLowPhaseNoiseState(this._handle, Channel, System.Convert.ToUInt16(Low_Phase_Noise_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Low Phase Noise function. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:LPNoise &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Low_Phase_Noise_State">
        /// This control enables or disables the Low Phase Noise function. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLowPhaseNoiseState(int Channel, out bool Low_Phase_Noise_State)
        {
            ushort Low_Phase_Noise_StateAsUShort;
            int pInvokeResult = PInvoke.GetLowPhaseNoiseState(this._handle, Channel, out Low_Phase_Noise_StateAsUShort);
            Low_Phase_Noise_State = System.Convert.ToBoolean(Low_Phase_Noise_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures PI controller parameters at source port &lt;Pt&gt;.  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter:GAIN
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter:ITIMe
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="PI_Controller_Mode">
        /// Enables automatic or manual setting of the PI controller parameters at source port &lt;Pt&gt;. 
        /// 
        /// Valid Range:
        /// RSZVB_ATTEN_MODE_AUTO (0) - Auto
        /// RSZVB_ATTEN_MODE_MAN  (1) - Manual
        /// 
        /// Default Value: RSZVB_ATTEN_MODE_AUTO (0)
        /// </param>
        /// <param name="Gain">
        /// Defines the proportional gain of the PI controller at source port &lt;Pt&gt;. This setting takes effect when manual setting of the controller parameters is enabled.
        /// 
        /// Valid Range:
        /// 0.0 to 100.0 dB
        /// 
        /// Default Value: 0.4 dB
        /// </param>
        /// <param name="Integration_Time">
        /// Defines the integration time of the PI controller at source port &lt;Pt&gt;. This setting takes effect when manual setting of the controller parameters is enabled
        /// 
        /// Valid Range:
        /// 10.0E-9 to 100.0 s in 10.0E-9 steps
        /// 
        /// Default Value: 500.0E-9 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigurePortPIController(int Channel, int Port, int PI_Controller_Mode, double Gain, double Integration_Time)
        {
            int pInvokeResult = PInvoke.ConfigurePortPIController(this._handle, Channel, Port, PI_Controller_Mode, Gain, Integration_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures SAW Matching Network parameters.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:STATe ON | OFF
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DMCircuit:BPORt2:PARameters:L
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DMCircuit:BPORt2:PARameters:C
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DZConversion:BPORt2:ZDIFferent[:R]
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DZConversion:BPORt2:ZCOMmon[:R]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Apply">
        /// This control activates or deactivates the virtual matching network.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="Parallel_L">
        /// This control defines a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: -1.0e-3 to 1.0e-3 H
        /// 
        /// Default Value: 1.0e-9 H
        /// </param>
        /// <param name="Serial_C">
        /// This control defines the serial capacitance for the matching network.
        /// 
        /// Valid Range: -1.0e-3 to 1.0e-3 F
        /// 
        /// Default Value: 1.0e-9 F
        /// </param>
        /// <param name="Differential_Mode_Impedance">
        /// This control defines the differential mode impedance for the selected balanced port.
        /// 
        /// Valid Range: 0 to 3.4028234664E+032 Ohm
        /// 
        /// Default Value: 100
        /// 
        /// </param>
        /// <param name="Common_Mode_Impedance">
        /// This control defines the common mode impedance for the selected balanced port.
        /// 
        /// Valid Range: 0 to 3.4028234664E+032 Ohm
        /// 
        /// Default Value: 25
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureSAWMatchingNetwork(int Channel, bool Apply, double Parallel_L, double Serial_C, double Differential_Mode_Impedance, double Common_Mode_Impedance)
        {
            int pInvokeResult = PInvoke.ConfigureSAWMatchingNetwork(this._handle, Channel, System.Convert.ToUInt16(Apply), Parallel_L, Serial_C, Differential_Mode_Impedance, Common_Mode_Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates or deactivates the virtual matching network. When the network is activated, port 1 serves as an unbalanced port, the physical ports no. 2 and 3 of the analyzer are combined to a logical (balanced) port no. 2.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:STATe ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Apply">
        /// This control activates or deactivates the virtual matching network.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSAWState(int Channel, bool Apply)
        {
            int pInvokeResult = PInvoke.SetSAWState(this._handle, Channel, System.Convert.ToUInt16(Apply));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the state of the virtual matching network.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Apply">
        /// This control returns the state of the virtual matching network.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSAWState(int Channel, out bool Apply)
        {
            ushort ApplyAsUShort;
            int pInvokeResult = PInvoke.GetSAWState(this._handle, Channel, out ApplyAsUShort);
            Apply = System.Convert.ToBoolean(ApplyAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the parallel inductance for the matching network.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DMCircuit:BPORt2:PARameters:L
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parallel_L">
        /// This control defines a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: -1.0e-3 to 1.0e-3 H
        /// 
        /// Default Value: 1.0e-9 H
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSAWParallelL(int Channel, double Parallel_L)
        {
            int pInvokeResult = PInvoke.SetSAWParallelL(this._handle, Channel, Parallel_L);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the parallel inductance for the matching network.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DMCircuit:BPORt2:PARameters:L?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parallel_L">
        /// This control returns a delay time between the trigger event and the start of the measurement.
        /// 
        /// Valid Range: -1.0e-3 to 1.0e-3 H
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSAWParallelL(int Channel, out double Parallel_L)
        {
            int pInvokeResult = PInvoke.GetSAWParallelL(this._handle, Channel, out Parallel_L);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the serial capacitance for the matching network.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DMCircuit:BPORt2:PARameters:C
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Serial_C">
        /// This control defines the serial capacitance for the matching network.
        /// 
        /// Valid Range: -1.0e-3 to 1.0e-3 F
        /// 
        /// Default Value: 1.0e-9 F
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSAWSerialC(int Channel, double Serial_C)
        {
            int pInvokeResult = PInvoke.SetSAWSerialC(this._handle, Channel, Serial_C);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the serial capacitance for the matching network.
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DMCircuit:BPORt2:PARameters:C?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Serial_C">
        /// This control returns the serial capacitance for the matching network.
        /// 
        /// Valid Range: -1.0e-3 to 1.0e-3 F
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSAWSerialC(int Channel, out double Serial_C)
        {
            int pInvokeResult = PInvoke.GetSAWSerialC(this._handle, Channel, out Serial_C);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the type of matching network to be simulated. The present firmware version provides a virtual matching network for DUTs with a single-ended and a balanced port. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DEVice SBALanced
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// This control selects the type of matching network to be simulated.
        /// 
        /// Valid Values:
        /// RSZVB_SAW_SBAL (0) - Single-ended/balanced
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSAWSimulationType(int Channel, int Type)
        {
            int pInvokeResult = PInvoke.SetSAWSimulationType(this._handle, Channel, Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the type of matching network to be simulated. The present firmware version provides a virtual matching network for DUTs with a single-ended and a balanced port. 
        /// 
        /// Remote-control command(s):
        /// CALCulate&lt;Ch&gt;:FSIMulator:BALun:DEVice?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Type">
        /// This control returns the type of matching network to be simulated.
        /// 
        /// Valid Values:
        /// RSZVB_SAW_SBAL (0) - Single-ended/balanced
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSAWSimulationType(int Channel, out int Type)
        {
            int pInvokeResult = PInvoke.GetSAWSimulationType(this._handle, Channel, out Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enables automatic or manual setting of the PI controller parameters at source port &lt;Pt&gt;.  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="PI_Controller_Mode">
        /// Enables automatic or manual setting of the PI controller parameters at source port &lt;Pt&gt;. 
        /// 
        /// Valid Range:
        /// RSZVB_ATTEN_MODE_AUTO (0) - Auto
        /// RSZVB_ATTEN_MODE_MAN  (1) - Manual
        /// 
        /// Default Value: RSZVB_ATTEN_MODE_AUTO (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPIControllerMode(int Channel, int Port, int PI_Controller_Mode)
        {
            int pInvokeResult = PInvoke.SetPIControllerMode(this._handle, Channel, Port, PI_Controller_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the mode of the PI controller parameters at source port &lt;Pt&gt;.  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="PI_Controller_Mode">
        /// Returns the mode of the PI controller parameters at source port &lt;Pt&gt;. 
        /// 
        /// Valid Range:
        /// RSZVB_ATTEN_MODE_AUTO (0) - Auto
        /// RSZVB_ATTEN_MODE_MAN  (1) - Manual
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPIControllerMode(int Channel, int Port, out int PI_Controller_Mode)
        {
            int pInvokeResult = PInvoke.GetPIControllerMode(this._handle, Channel, Port, out PI_Controller_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines the proportional gain of the PI controller at source port &lt;Pt&gt;. This setting takes effect when manual setting of the controller parameters is enabled. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter:GAIN
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Gain">
        /// Defines the proportional gain of the PI controller at source port &lt;Pt&gt;. This setting takes effect when manual setting of the controller parameters is enabled.
        /// 
        /// Valid Range:
        /// 0.0 to 100.0 dB
        /// 
        /// Default Value: 0.4 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPIControllerGain(int Channel, int Port, double Gain)
        {
            int pInvokeResult = PInvoke.SetPIControllerGain(this._handle, Channel, Port, Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the proportional gain of the PI controller at source port &lt;Pt&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter:GAIN?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Gain">
        /// Returns the proportional gain of the PI controller at source port &lt;Pt&gt;.
        /// 
        /// Valid Range:
        /// 0.0 to 100.0 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPIControllerGain(int Channel, int Port, out double Gain)
        {
            int pInvokeResult = PInvoke.GetPIControllerGain(this._handle, Channel, Port, out Gain);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines the integration time of the PI controller at source port &lt;Pt&gt;. This setting takes effect when manual setting of the controller parameters is enabled 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter:ITIMe
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Integration_Time">
        /// Defines the integration time of the PI controller at source port &lt;Pt&gt;. This setting takes effect when manual setting of the controller parameters is enabled
        /// 
        /// Valid Range:
        /// 10.0E-9 to 100.0 s in 10.0E-9 steps
        /// 
        /// Default Value: 500.0E-9 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPIControllerIntegrationTime(int Channel, int Port, double Integration_Time)
        {
            int pInvokeResult = PInvoke.SetPIControllerIntegrationTime(this._handle, Channel, Port, Integration_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the integration time of the PI controller at source port &lt;Pt&gt;. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:ALC:PIParameter:ITIMe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number  
        /// 
        /// Valid Range:
        ///  &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Integration_Time">
        /// Returns the integration time of the PI controller at source port &lt;Pt&gt;.
        /// 
        /// Valid Range:
        /// 10.0E-9 to 100.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPIControllerIntegrationTime(int Channel, int Port, out double Integration_Time)
        {
            int pInvokeResult = PInvoke.GetPIControllerIntegrationTime(this._handle, Channel, Port, out Integration_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates channel and selects it as the active channel. It also assigns a name to channel number.
        /// 
        /// Note(s):
        /// 
        /// A channel created with CONFigure:CHANnel&lt;Ch&gt;[:STATe] ON can be configured but has no trace assigned so that no measurement can be initiated. Use CALCulate&lt;Ch&gt;:PARameter:SDEFine "&lt;Trace_name&gt;,"&lt;Parameter&gt;" to create a new channel and a new trace.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;[:STATe] ON
        /// CONFigure:CHANnel&lt;Ch&gt;:NAME '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Define channel name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Ch1"
        /// 
        /// Note(s):
        /// 
        /// (1) Assigns a name to channel number &lt;Ch&gt;. Moreover it is not possible to assign the same name to two different channels.
        /// 
        /// (2) If an empty string is passed into this parameter then only Channel State is set to ON. The command CONF:CHAN:NAME is not sent.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelAdd(int Channel, string Channel_Name)
        {
            int pInvokeResult = PInvoke.ChannelAdd(this._handle, Channel, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates a new channel and a new trace, which is displayed in the selected existing diagram area. The new channel settings (including a possible channel calibration) is preset to the default settings; the trace is created with the default trace settings.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;[:STATe] ON
        /// CONFigure:CHANnel&lt;Ch&gt;:NAME '&lt;string&gt;'
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;','S21'
        /// DISPlay:WINDow&lt;Wnd&gt;:STATe ON
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Define channel name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Ch1"
        /// 
        /// Note:
        /// 
        /// Assigns a name to channel number &lt;Ch&gt;. Moreover it is not possible to assign the same name to two different channels.
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelAddTrace(int Window, int Window__Trace_, int Channel, string Channel_Name, string Trace_Name)
        {
            int pInvokeResult = PInvoke.ChannelAddTrace(this._handle, Window, Window__Trace_, Channel, Channel_Name, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates a new channel and a new trace, which is displayed in a new diagram area. The new channel settings (including a possible channel calibration) is preset to the default settings; the trace is created with the default trace settings.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;[:STATe] ON
        /// CONFigure:CHANnel&lt;Ch&gt;:NAME '&lt;string&gt;'
        /// CALCulate&lt;Ch&gt;:PARameter:SDEFine '&lt;string&gt;', 'S21'
        /// DISPlay:WINDow&lt;Wnd&gt;:STATe ON
        /// DISPlay:WINDow&lt;Wnd&gt;:TRACe&lt;WndTr&gt;:FEED '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Window__Trace_">
        /// Trace number used to distinguish the traces of the same diagram area &lt;Wnd&gt;. 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Define channel name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Ch1"
        /// 
        /// Note:
        /// 
        /// Assigns a name to channel number &lt;Ch&gt;. Moreover it is not possible to assign the same name to two different channels.
        /// 
        /// </param>
        /// <param name="Trace_Name">
        /// Define trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelAddTraceDiagramArea(int Window, int Window__Trace_, int Channel, string Channel_Name, string Trace_Name)
        {
            int pInvokeResult = PInvoke.ChannelAddTraceDiagramArea(this._handle, Window, Window__Trace_, Channel, Channel_Name, Trace_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes the current channel including all traces assigned to the channel and removes all display elements related to the channel from the diagram area.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;[:STATe] OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelDelete(int Channel)
        {
            int pInvokeResult = PInvoke.ChannelDelete(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the numbers and names of all channels in the current setup.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Catalog">
        /// Returns string with comma-separated list of channel numbers and names. If all channels have been deleted the response is an empty string ("").
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelList(System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.ChannelList(this._handle, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel &lt;ch&gt; name.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;:NAME?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Returns the channel name.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelGetChannelName(int Channel, System.Text.StringBuilder Channel_Name)
        {
            int pInvokeResult = PInvoke.ChannelGetChannelName(this._handle, Channel, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the channel number (numeric suffix) of a channel with known channel name. A channel name must be assigned before.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel:NAME:ID? '&lt;Ch_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel_Name">
        /// Sets the channel name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "Ch1"
        /// </param>
        /// <param name="Channel_Number">
        /// Returns the channel number (numeric suffix) of a channel with known channel name.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelGetChannelNumber(string Channel_Name, out int Channel_Number)
        {
            int pInvokeResult = PInvoke.ChannelGetChannelNumber(this._handle, Channel_Name, out Channel_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a channel &lt;Ch&gt; as the active channel. 
        /// 
        /// Remote-control command(s):
        /// INSTrument:NSELect &lt;Ch&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelSetActive(int Channel)
        {
            int pInvokeResult = PInvoke.ChannelSetActive(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a channel &lt;Ch&gt; as the active channel. 
        /// 
        /// Remote-control command(s):
        /// INSTrument:NSELect?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Returns channel number.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelGetActive(out int Channel)
        {
            int pInvokeResult = PInvoke.ChannelGetActive(this._handle, out Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function assigns a name to channel number. The channel must be created before. Moreover it is not possible to assign the same name to two different channels.
        /// 
        /// Remote-control command(s):
        /// CONFigure:CHANnel&lt;Ch&gt;:NAME '&lt;Ch_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Channel_Name">
        /// Assigns a name to channel number.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: "Chan1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ChannelRename(int Channel, string Channel_Name)
        {
            int pInvokeResult = PInvoke.ChannelRename(this._handle, Channel, Channel_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a connector type at a specified port &lt;Port&gt; and its gender.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:CONNection&lt;port_no&gt; N50FEMALE | N50MALE | N75FEMALE | N75MALE | PC7 | PC35FEMALE | PC35MALE | PC292FEMALE | PC292MALE | UFEMALE1 | UMALE1 | UFEMALE2 | UMALE2 | SMAFEMALE | SMAMALE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Connector">
        /// This control selects a connector type at a specified port &lt;Port&gt; and its gender.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTOR_N50FEMALE   (0) - N 50 Ohm (f)
        /// RSZVB_CONNECTOR_N50MALE     (1) - N 50 Ohm (m)
        /// RSZVB_CONNECTOR_N75FEMALE   (2) - N 75 Ohm (f)
        /// RSZVB_CONNECTOR_N75MALE     (3) - N 75 Ohm (m)
        /// RSZVB_CONNECTOR_PC7         (4) - PC 7
        /// RSZVB_CONNECTOR_PC35FEMALE  (5) - PC 3.5 (f)
        /// RSZVB_CONNECTOR_PC35MALE    (6) - PC 3.5 (m)
        /// RSZVB_CONNECTOR_PC292FEMALE (7) - 2.92 mm (f)
        /// RSZVB_CONNECTOR_PC292MALE   (8) - 2.92 mm (m)
        /// RSZVB_CONNECTOR_UFEMALE1    (9) - 2.4 mm (f)
        /// RSZVB_CONNECTOR_UMALE1      (10) - 2.4 mm (m)
        /// RSZVB_CONNECTOR_UFEMALE2    (11) - 1.85 mm (f)
        /// RSZVB_CONNECTOR_UMALE2      (12) - 1.85 mm (m)
        /// RSZVB_CONNECTOR_SMAFEMALE   (13) - 7-16 (f)
        /// RSZVB_CONNECTOR_SMAMALE     (14) - 7-16 (f)
        /// 
        /// Default Value: RSZVB_CONNECTOR_N50FEMALE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetConnector(int Channel, int Port, int Connector)
        {
            int pInvokeResult = PInvoke.SetConnector(this._handle, Channel, Port, Connector);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries a connector type at a specified port &lt;Port&gt; and its gender.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:CONNection&lt;port_no&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Connector">
        /// This control returns a connector type at a specified port &lt;Port&gt; and its gender.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTOR_N50FEMALE   (0) - N 50 Ohm (f)
        /// RSZVB_CONNECTOR_N50MALE     (1) - N 50 Ohm (m)
        /// RSZVB_CONNECTOR_N75FEMALE   (2) - N 75 Ohm (f)
        /// RSZVB_CONNECTOR_N75MALE     (3) - N 75 Ohm (m)
        /// RSZVB_CONNECTOR_PC7         (4) - PC 7
        /// RSZVB_CONNECTOR_PC35FEMALE  (5) - PC 3.5 (f)
        /// RSZVB_CONNECTOR_PC35MALE    (6) - PC 3.5 (m)
        /// RSZVB_CONNECTOR_PC292FEMALE (7) - 2.92 mm (f)
        /// RSZVB_CONNECTOR_PC292MALE   (8) - 2.92 mm (m)
        /// RSZVB_CONNECTOR_UFEMALE1    (9) - 2.4 mm (f)
        /// RSZVB_CONNECTOR_UMALE1      (10) - 2.4 mm (m)
        /// RSZVB_CONNECTOR_UFEMALE2    (11) - 1.85 mm (f)
        /// RSZVB_CONNECTOR_UMALE2      (12) - 1.85 mm (m)
        /// RSZVB_CONNECTOR_SMAFEMALE   (13) - 7-16 (f)
        /// RSZVB_CONNECTOR_SMAMALE     (14) - 7-16 (f)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetConnector(int Channel, int Port, out int Connector)
        {
            int pInvokeResult = PInvoke.GetConnector(this._handle, Channel, Port, out Connector);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function qualifies whether the connector types at the analyzer ports (but not their gender) are equal or independent.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:CONNection:PORTs ALL | SINGle
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Same_Connector_At_All_Ports">
        /// This control qualifies whether the connector types at the analyzer ports (but not their gender) are equal or independent.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSameConnectorTypeAtAllPorts(int Channel, bool Same_Connector_At_All_Ports)
        {
            int pInvokeResult = PInvoke.SetSameConnectorTypeAtAllPorts(this._handle, Channel, System.Convert.ToUInt16(Same_Connector_At_All_Ports));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether the connector types at the analyzer ports (but not their gender) are equal or independent.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:CONNection:PORTs?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Same_Connector_At_All_Ports">
        /// This control returns whether the connector types at the analyzer ports (but not their gender) are equal or independent.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSameConnectorTypeAtAllPorts(int Channel, out bool Same_Connector_At_All_Ports)
        {
            ushort Same_Connector_At_All_PortsAsUShort;
            int pInvokeResult = PInvoke.GetSameConnectorTypeAtAllPorts(this._handle, Channel, out Same_Connector_At_All_PortsAsUShort);
            Same_Connector_At_All_Ports = System.Convert.ToBoolean(Same_Connector_At_All_PortsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function qualifies whether the connector genders at the analyzer ports (but not their types) are equal or independent.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:CONNection:GENDers ALL | SINGle
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Same_Gender_At_All_Ports">
        /// This control qualifies whether the connector genders at the analyzer ports (but not their types) are equal or independent.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSameConnectorGenderAtAllPorts(int Channel, bool Same_Gender_At_All_Ports)
        {
            int pInvokeResult = PInvoke.SetSameConnectorGenderAtAllPorts(this._handle, Channel, System.Convert.ToUInt16(Same_Gender_At_All_Ports));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function quries whether the connector genders at the analyzer ports (but not their types) are equal or independent.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:CONNection:GENDers?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Same_Gender_At_All_Ports">
        /// This control returns whether the connector genders at the analyzer ports (but not their types) are equal or independent.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSameConnectorGenderAtAllPorts(int Channel, out bool Same_Gender_At_All_Ports)
        {
            ushort Same_Gender_At_All_PortsAsUShort;
            int pInvokeResult = PInvoke.GetSameConnectorGenderAtAllPorts(this._handle, Channel, out Same_Gender_At_All_PortsAsUShort);
            Same_Gender_At_All_Ports = System.Convert.ToBoolean(Same_Gender_At_All_PortsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a user-defined connector type at a specified port &lt;Port&gt; and its gender.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:SCONnection&lt;port_no&gt; '&lt;conn_name&gt;', MALE | FEMale
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Connector">
        /// This control selects a connector type at a specified port &lt;Port&gt; and gender.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Connector_Gender">
        /// This control selects the connector gender.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTOR_GENDER_MALE   (0) - Male
        /// RSZVB_CONNECTOR_GENDER_FEMALE (1) - Female
        /// 
        /// Default Value: RSZVB_CONNECTOR_GENDER_MALE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserConnector(int Channel, int Port, string Connector, int Connector_Gender)
        {
            int pInvokeResult = PInvoke.SetUserConnector(this._handle, Channel, Port, Connector, Connector_Gender);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function retuns a user-defined connector type at a specified port &lt;Port&gt; and its gender.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:SCONnection&lt;port_no&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port numbers of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Connector">
        /// This control returns a connector type at a specified port &lt;Port&gt; and gender.
        /// </param>
        /// <param name="Connector_Gender">
        /// This control returns the connector gender.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTOR_GENDER_MALE   (0) - Male
        /// RSZVB_CONNECTOR_GENDER_FEMALE (1) - Female
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserConnector(int Channel, int Port, System.Text.StringBuilder Connector, out int Connector_Gender)
        {
            int pInvokeResult = PInvoke.GetUserConnector(this._handle, Channel, Port, Connector, out Connector_Gender);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a one-port, two-port, three-port or four-port calibration type at arbitrary analyzer ports.
        /// 
        /// Note(s):
        /// 
        /// (1) For an n-port calibration type (n = 1 to 4), n port numbers must be specified. If more than n numbers are defined, the spare numbers (the last in the list) are ignored.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:METHod:DEFine '&lt;cal_name&gt;', REFL | RSHort | FOPort | FRTRans | OPTPort | TOSM | TOM | TRM | TRL | TNA, UOSM, FTRans, RTRans &lt;port_no&gt;[,&lt;port_no&gt;][,&lt;port_no&gt;][,&lt;port_no&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_Name">
        /// This control defines the name of the calibration (string parameter). The name serves as a reference to delete a particular set of system correction data.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Parameters">
        /// This control selects a calibration type.
        /// 
        /// Valid Values:
        /// RSZVB_CALTYPE_REFL (0) - One-port Normalization (reflection, open standard)
        /// RSZVB_CALTYPE_RSH  (1) - One-port Normalization (reflection, short standard)
        /// RSZVB_CALTYPE_FOP  (2) - Full One Port
        /// RSZVB_CALTYPE_FRTR (3) - Two-port Normalization
        /// RSZVB_CALTYPE_OPTP (4) - One Path Two Port
        /// RSZVB_CALTYPE_TOSM (5) - TOSM
        /// RSZVB_CALTYPE_TOM  (6) - TOM
        /// RSZVB_CALTYPE_TRM  (7) - TRM
        /// RSZVB_CALTYPE_TRL  (8) - TRL
        /// RSZVB_CALTYPE_TNA  (9) - TNA
        /// RSZVB_CALTYPE_UOSM (12) - TOSM With Unknown Through
        /// RSZVB_CALTYPE_FTR  (13) - Forward Transmission
        /// RSZVB_CALTYPE_RTR  (14) - Backward Transmission
        /// 
        /// Default Value: RSZVB_CALTYPE_REFL (0)
        /// </param>
        /// <param name="Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt;= 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// </param>
        /// <param name="Port_3">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// </param>
        /// <param name="Port_4">
        /// Port number.
        /// 
        /// Valid Range: &gt;= 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// </param>
        /// <returns>
        /// This control contains the status code returned by the function call.
        /// 
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///         0  No error (the call was successful).
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0002  Parameter 2 (Channel) out of range.
        /// BFFC0003  Parameter 3 (Function) out of range.
        /// BFFC0004  Parameter 4 (State) out of range.
        /// 
        /// BFFC0803  Error Interpreting the instrument's response.
        /// BFFC0901  Channel is not displayed.
        /// BFFC09F0  Instrument status error.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int SelectCalibrationType(int Channel, string Calibration_Name, int Parameters, int Port_1, int Port_2, int Port_3, int Port_4)
        {
            int pInvokeResult = PInvoke.SelectCalibrationType(this._handle, Channel, Calibration_Name, Parameters, Port_1, Port_2, Port_3, Port_4);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the current calibration type. Returns the calibration type and the port numbers valid for that calibration.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:METHod:DEFine?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_Type">
        /// This control returns the calibration type.
        /// 
        /// Returned Values:
        /// RSZVB_CALTYPE_REFL (0) - One-port Normalization (reflection, open standard)
        /// RSZVB_CALTYPE_RSH  (1) - One-port Normalization (reflection, short standard)
        /// RSZVB_CALTYPE_FOP  (2) - Full One Port
        /// RSZVB_CALTYPE_FRTR (3) - Two-port Normalization
        /// RSZVB_CALTYPE_OPTP (4) - One Path Two Port
        /// RSZVB_CALTYPE_TOSM (5) - TOSM
        /// RSZVB_CALTYPE_TOM  (6) - TOM
        /// RSZVB_CALTYPE_TRM  (7) - TRM
        /// RSZVB_CALTYPE_TRL  (8) - TRL
        /// RSZVB_CALTYPE_TNA  (9) - TNA
        /// RSZVB_CALTYPE_UOSM (12) - TOSM With Unknown Through
        /// RSZVB_CALTYPE_FTR  (13) - Forward Transmission
        /// RSZVB_CALTYPE_RTR  (14) - Backward Transmission
        /// 
        /// 
        /// </param>
        /// <param name="Port_1">
        /// Returns port number.
        /// 
        /// </param>
        /// <param name="Port_2">
        /// Returns port number.
        /// </param>
        /// <param name="Port_3">
        /// Returns port number.
        /// </param>
        /// <param name="Port_4">
        /// Returns port number.
        /// </param>
        /// <returns>
        /// This control contains the status code returned by the function call.
        /// 
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///         0  No error (the call was successful).
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0002  Parameter 2 (Channel) out of range.
        /// BFFC0003  Parameter 3 (Function) out of range.
        /// BFFC0004  Parameter 4 (State) out of range.
        /// 
        /// BFFC0803  Error Interpreting the instrument's response.
        /// BFFC0901  Channel is not displayed.
        /// BFFC09F0  Instrument status error.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int GetCalibrationType(int Channel, out int Calibration_Type, out int Port_1, out int Port_2, out int Port_3, out int Port_4)
        {
            int pInvokeResult = PInvoke.GetCalibrationType(this._handle, Channel, out Calibration_Type, out Port_1, out Port_2, out Port_3, out Port_4);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a calibration measurement in order to acquire measurement data for the selected standards. The
        /// standards are reflection or transmission standards and can be connected to arbitrary analyzer ports.
        /// 
        /// Note(s):
        /// 
        /// (1) OSHort: Available with firmware version 2.10 and higher.
        /// 
        /// (2) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// (3) LINE3 adn SLIDe: Available with firmware version 2.40 and higher.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect[:ACQuire]:SELected THRough | OPEN | SHORt | MATCh | NET | ATT | REFL | LINE | LINE2 | OSHort | LINE3 | SLIDe | OSHORT2 | OSHORT3,&lt;port_no&gt;[,&lt;port_no&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Standard">
        /// This control selects a standard from the selected calibration kit.
        /// 
        /// Valid Values:
        /// RSZVB_CALCOLLSTDGEN_THR    (0) - Through
        /// RSZVB_CALCOLLSTDGEN_OPEN   (1) - Open
        /// RSZVB_CALCOLLSTDGEN_SHORT  (2) - Short
        /// RSZVB_CALCOLLSTDGEN_MATCH  (3) - Match
        /// RSZVB_CALCOLLSTDGEN_NET    (4) - Symmetric Network
        /// RSZVB_CALCOLLSTDGEN_ATT    (5) - Attenuation
        /// RSZVB_CALCOLLSTDGEN_REFL   (6) - Reflect Line
        /// RSZVB_CALCOLLSTDGEN_LINE   (7) - Line 1
        /// RSZVB_CALCOLLSTDGEN_LINE_2 (8) - Line 2
        /// RSZVB_CALCOLLSTDGEN_OSH    (9) - Offset Short 1
        /// RSZVB_CALCOLLSTDGEN_LINE_3 (10) - Line 3
        /// RSZVB_CALCOLLSTDGEN_SLID   (11) - Sliding Match
        /// RSZVB_CALCOLLSTDGEN_OSH_2  (12) - Offset Short 2
        /// RSZVB_CALCOLLSTDGEN_OSH_3  (13) - Offset Short 3
        /// 
        /// Default Value: RSZVB_CALCOLLSTDGEN_THR (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Offset Short: Available with firmware version 2.10 and higher.
        /// 
        /// (2) Line 3 and Sliding Match: Available with firmware version 2.40 and higher.
        /// </param>
        /// <param name="Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) For reflection standards, this port number is not required and the value should be set to zero.
        /// </param>
        /// <returns>
        /// This control contains the status code returned by the function call.
        /// 
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///         0  No error (the call was successful).
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0002  Parameter 2 (Channel) out of range.
        /// BFFC0003  Parameter 3 (Function) out of range.
        /// BFFC0004  Parameter 4 (State) out of range.
        /// 
        /// BFFC0803  Error Interpreting the instrument's response.
        /// BFFC0901  Channel is not displayed.
        /// BFFC09F0  Instrument status error.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int StartCalibration(int Channel, int Standard, int Port_1, int Port_2)
        {
            int pInvokeResult = PInvoke.StartCalibration(this._handle, Channel, Standard, Port_1, Port_2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts a calibration measurement in order to acquire measurement data for the selected standards. The
        /// standards are reflection or transmission standards and can be connected to arbitrary analyzer ports.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// (2) This function is available with firmware version 2.40 and higher.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect[:ACQuire]:SELected UTHRough,&lt;port_no&gt;,&lt;port_no&gt;[,&lt;Dispersion&gt;,AUTO | &lt;delay | phase&gt;]
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Standard">
        /// This control selects a standard from the selected calibration kit.
        /// 
        /// Valid Values:
        /// RSZVB_CALCOLLSTDGEN_UTHR (0) - Unknown Through
        /// 
        /// Default Value: RSZVB_CALCOLLSTDGEN_UTHR (0)
        /// </param>
        /// <param name="Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Dispersion">
        /// This control selects if unknown through standard is non-dispersive or dispersive.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off: non-dispersive
        /// 
        /// (2) On: dispersive
        /// </param>
        /// <param name="Delay_Phase">
        /// This controle selects automatic or manual settings of delay time and phase.
        /// 
        /// Valid Values:
        /// RSZVB_UTHR_AUTO (0) - Auto
        /// RSZVB_UTHR_MAN  (1) - Manual
        /// 
        /// Default Value: RSZVB_UTHR_AUTO (0)
        /// 
        /// Note(s):
        /// 
        /// (1) If Auto is selected, then control Delay/Phase Value is ignored.
        /// </param>
        /// <param name="Delay_Phase_Value">
        /// This control sets the delay time or phase, depending on the Dispersion settings.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Note(s):
        /// 
        /// (1) This control is only available if Delay/Phase control is set to Manual.
        /// 
        /// (2) If the Dispersion is set to Off, then this control sets the Delay Time in ps units.
        /// 
        /// (3) If the Dispersion is set to On, then this control sets the phase at the start frequency of the sweep in deg units.
        /// </param>
        /// <returns>
        /// This control contains the status code returned by the function call.
        /// 
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///         0  No error (the call was successful).
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0002  Parameter 2 (Channel) out of range.
        /// BFFC0003  Parameter 3 (Function) out of range.
        /// BFFC0004  Parameter 4 (State) out of range.
        /// 
        /// BFFC0803  Error Interpreting the instrument's response.
        /// BFFC0901  Channel is not displayed.
        /// BFFC09F0  Instrument status error.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int StartCalibrationWithOptions(int Channel, int Standard, int Port_1, int Port_2, bool Dispersion, int Delay_Phase, double Delay_Phase_Value)
        {
            int pInvokeResult = PInvoke.StartCalibrationWithOptions(this._handle, Channel, Standard, Port_1, Port_2, System.Convert.ToUInt16(Dispersion), Delay_Phase, Delay_Phase_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function calculates the system error correction data from the acquired one or two-port measurement results (rszvb_StartCalibration), stores them and applies them to the calibrated channel. To avoid incompatibilities, older system error correction data is deleted unless it has been transferred into a cal pool (MMEMory:STORe:CORRection &lt;Ch&gt;, '&lt;file_name&gt;').
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:SAVE:SELected
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveCalibrationData(int Channel)
        {
            int pInvokeResult = PInvoke.SaveCalibrationData(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates a set of default system error correction data for the selected ports and calibration type. The default data set corresponds to a test setup which does not introduce any systematic errors.
        /// 
        /// Note(s):
        /// 
        /// (1) The main purpose of the default correction data set is to provide a dummy system error correction which you can replace with your own, external correction data. You may have acquired the external data in a previous session or even on an other instrument. If you want to use the external correction data on the analyzer, simply generate the default data set corresponding to your port configuration and calibration type and overwrite the default data
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:SAVE:SELected:DEFault
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GenerateDefaultCalibrationData(int Channel)
        {
            int pInvokeResult = PInvoke.GenerateDefaultCalibrationData(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes system error correction data generated and stored previously.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:DELete
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_Name">
        /// This control defines the name of the calibration (string parameter) defined together with calibration type. If nothing
        /// is specified the analyzer deletes the last system error correction stored by means of rszvb_SaveCalibrationData
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteCalibrationData(int Channel, string Calibration_Name)
        {
            int pInvokeResult = PInvoke.DeleteCalibrationData(this._handle, Channel, Calibration_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes all system error correction data generated and stored previously.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:DELete ALL
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteAllCalibrationData(int Channel)
        {
            int pInvokeResult = PInvoke.DeleteAllCalibrationData(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads system error correction data for a specific channel, calibration method, and port combination &lt;Port 1&gt;, &lt;Port 2&gt;.
        /// 
        /// Remote-control command(s):
        /// FORMat ASCII
        /// FORMat REAL,32
        /// SYSTem:COMMunicate:GPIB:SELF:RTERminator EOI
        /// [SENSe&lt;Ch&gt;:]CORRection:CDATa?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Error_Term_Parameters">
        /// This control sets the error terms parameters.
        /// 
        /// Valid Values:
        /// RSZVB_CAL_DATA_DIRECTIVITY (0) - Directivity
        /// RSZVB_CAL_DATA_SRCMATCH    (1) - Source Match
        /// RSZVB_CAL_DATA_REFLTRACK   (2) - Reflection Tracking
        /// RSZVB_CAL_DATA_ISOLATION   (3) - Isolation
        /// RSZVB_CAL_DATA_LOADMATCH   (4) - Load Match
        /// RSZVB_CAL_DATA_TRANSTRACK  (5) - Transmission Tracking
        /// RSZVB_CAL_DATA_G11         (6) - G11
        /// RSZVB_CAL_DATA_G12         (7) - G12
        /// RSZVB_CAL_DATA_G21         (8) - G21
        /// RSZVB_CAL_DATA_G22         (9) - G22
        /// RSZVB_CAL_DATA_H11         (10) - H11
        /// RSZVB_CAL_DATA_H12         (11) - H12
        /// RSZVB_CAL_DATA_H21         (12) - H21
        /// RSZVB_CAL_DATA_H22         (13) - H22
        /// 
        /// Default Value: RSZVB_CAL_DATA_DIRECTIVITY (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Directivity - Directivity at port &lt;Port 1&gt;
        /// 
        /// (2) Source Match - Source match at port &lt;Port 1&gt;
        /// 
        /// (3) Reflection Tracking - Reflection tracking at port &lt;Port 1&gt;
        /// 
        /// (4) Isolation - Isolation between port &lt;Port 1&gt; and &lt;Port 2&gt;
        /// 
        /// (5) Load Match - Load match at &lt;Port 2&gt;
        /// 
        /// (6) Transmission Tracking - Transmission tracking between port &lt;Port 1&gt; and &lt;Port 2&gt;
        /// 
        /// (7) G11 ... G22 -  G matrix elements
        /// 
        /// (8) H11 ... H22 -  H matrix elements
        /// </param>
        /// <param name="Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt;= 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibration_Data">
        /// This control returns the calibration data. For each sweep point (set by rszvb_SetSweepNumberOfPoints) real and imaginary part should be provided.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadCalibrationData(int Channel, int Error_Term_Parameters, int Port_1, int Port_2, double[] Calibration_Data)
        {
            int pInvokeResult = PInvoke.ReadCalibrationData(this._handle, Channel, Error_Term_Parameters, Port_1, Port_2, Calibration_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes system error correction data for a specific channel, calibration method, and port combination &lt;Port 1&gt;, &lt;Port 2&gt;.
        /// 
        /// Remote-control command(s):
        /// FORMat ASCII
        /// FORMat REAL,32
        /// SYSTem:COMMunicate:GPIB:SELF:RTERminator EOI
        /// [SENSe&lt;Ch&gt;:]CORRection:CDATa
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Error_Term_Parameters">
        /// This control sets the error terms parameters.
        /// 
        /// Valid Values:
        /// RSZVB_CAL_DATA_DIRECTIVITY (0) - Directivity
        /// RSZVB_CAL_DATA_SRCMATCH    (1) - Source Match
        /// RSZVB_CAL_DATA_REFLTRACK   (2) - Reflection Tracking
        /// RSZVB_CAL_DATA_ISOLATION   (3) - Isolation
        /// RSZVB_CAL_DATA_LOADMATCH   (4) - Load Match
        /// RSZVB_CAL_DATA_TRANSTRACK  (5) - Transmission Tracking
        /// RSZVB_CAL_DATA_G11         (6) - G11
        /// RSZVB_CAL_DATA_G12         (7) - G12
        /// RSZVB_CAL_DATA_G21         (8) - G21
        /// RSZVB_CAL_DATA_G22         (9) - G22
        /// RSZVB_CAL_DATA_H11         (10) - H11
        /// RSZVB_CAL_DATA_H12         (11) - H12
        /// RSZVB_CAL_DATA_H21         (12) - H21
        /// RSZVB_CAL_DATA_H22         (13) - H22
        /// 
        /// Default Value: RSZVB_CAL_DATA_DIRECTIVITY (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Directivity - Directivity at port &lt;Port 1&gt;
        /// 
        /// (2) Source Match - Source match at port &lt;Port 1&gt;
        /// 
        /// (3) Reflection Tracking - Reflection tracking at port &lt;Port 1&gt;
        /// 
        /// (4) Isolation - Isolation between port &lt;Port 1&gt; and &lt;Port 2&gt;
        /// 
        /// (5) Load Match - Load match at &lt;Port 2&gt;
        /// 
        /// (6) Transmission Tracking - Transmission tracking between port &lt;Port 1&gt; and &lt;Port 2&gt;
        /// 
        /// (7) G11 ... G22 -  G matrix elements
        /// 
        /// (8) H11 ... H22 -  H matrix elements
        /// </param>
        /// <param name="Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt;= 0
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibration_Data">
        /// This control defines the calibration data. For each sweep point (set by rszvb_SetSweepNumberOfPoints) real and imaginary part should be provided.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteCalibrationData(int Channel, int Error_Term_Parameters, int Port_1, int Port_2, double[] Calibration_Data)
        {
            int pInvokeResult = PInvoke.WriteCalibrationData(this._handle, Channel, Error_Term_Parameters, Port_1, Port_2, Calibration_Data);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the system error correction for channel &lt;Ch&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection[:STATe] ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Correction_State">
        /// This control enables (ON) or disables (OFF) the correction.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCorrectionState(int Channel, bool Correction_State)
        {
            int pInvokeResult = PInvoke.SetCorrectionState(this._handle, Channel, System.Convert.ToUInt16(Correction_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the system error correction for channel &lt;Ch&gt;.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Correction_State">
        /// This control returns the state of the correction.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCorrectionState(int Channel, out bool Correction_State)
        {
            ushort Correction_StateAsUShort;
            int pInvokeResult = PInvoke.GetCorrectionState(this._handle, Channel, out Correction_StateAsUShort);
            Correction_State = System.Convert.ToBoolean(Correction_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source for the source power calibration, starts and applies the source power calibration.
        /// 
        /// Note(s):
        /// 
        /// (1) The function cannot be used unless a power meter is connected via GPIB bus, USB or LAN interface and configured in the System - System Config - Configure External Power Meter
        /// 
        /// (2) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection[:ACQuire] PORT | GENerator | A1 | A2 | A3 | A4 | A5 | A6 | A7 | A8 | ESRC1 | ESRC2 | CONVerter[,&lt;port_number&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Source">
        /// This control toggle between the analyzer port and external generator.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_PORT  (0) - Port
        /// RSZVB_PWR_CAL_GEN   (1) - Generator
        /// RSZVB_PWR_CAL_A1    (2) - A1
        /// RSZVB_PWR_CAL_A2    (3) - A2
        /// RSZVB_PWR_CAL_A3    (4) - A3
        /// RSZVB_PWR_CAL_A4    (5) - A4
        /// RSZVB_PWR_CAL_A5    (6) - A5
        /// RSZVB_PWR_CAL_A6    (7) - A6
        /// RSZVB_PWR_CAL_A7    (8) - A7
        /// RSZVB_PWR_CAL_A8    (9) - A8
        /// RSZVB_PWR_CAL_ESRC1 (10) - ESRC1
        /// RSZVB_PWR_CAL_ESRC2 (11) - ESRC2
        /// RSZVB_PWR_CAL_CONV  (12) - Converter
        /// 
        /// Default Value: RSZVB_PWR_CAL_PORT (0)
        /// 
        /// Note(s):
        /// 
        /// (1) The port and generator numbers are specified by means of the &lt;port_number&gt; parameter.
        /// 
        /// (2) The parameters A1, A2, A3 and A4 are for direct analyzer port selection. The port number parameter is ignored. 
        /// 
        /// (3) The parameters A5, A6, A7 and A8 are for direct analyzer port selection. The port number parameter is ignored. These parameters are available only for RSZVT8.
        /// 
        /// (4) The parameters ESRC1 and ESRC2 are for direct external generator selection. The port number parameter is ignored. 
        /// 
        /// (5) Converter: Frequency converter with electronic attenuator (R&amp;S ZVA-ZxxxE) is the source.
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the analyzer port number of generator number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer/number of external generators
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AcquireSourcePowerCalibration(int Channel, int Source, int Port_Number)
        {
            int pInvokeResult = PInvoke.AcquireSourcePowerCalibration(this._handle, Channel, Source, Port_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a source power calibration for the source port &lt;pt&gt; using an external power meter no. 1 or 2.
        /// 
        /// Notes:
        /// 
        /// (1) The function cannot be used unless a power meter is connected via GPIB bus, USB or LAN interface and configured in the System - System Config - Configure External Power Meter
        /// 
        /// (2) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect[:ACQuire] ASENsor | BSENsor 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="External_Power_Meter">
        /// This control sets the external power meter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_ASENSOR (0) - No. 1
        /// RSZVB_PWR_CAL_BSENSOR (1) - No. 2
        /// 
        /// Default Value: RSZVB_PWR_CAL_ASENSOR (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int InitiateSourcePowerCalibration(int Channel, int Port_Number, int External_Power_Meter)
        {
            int pInvokeResult = PInvoke.InitiateSourcePowerCalibration(this._handle, Channel, Port_Number, External_Power_Meter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables the analyzer to create a set of default source power calibration data. The analyzer uses the reference channel power to acquire the default calibration data. No external power meter is required.  
        /// 
        /// Notes:
        /// 
        /// (1) The main purpose of the default calibration data set is to provide a dummy power calibration which you can replace with your own, external power calibration data. You may have acquired the external data in a previous session or even on an other instrument. If you want to use the external power calibration data on the analyzer, generate the default data set first and overwrite it with the external data.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:DEFault ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Dummy_Source_Power_Calibration">
        /// This control enables (ON) or disables (OFF) the dummy source power calibration for port number &lt;Pt&gt;. OFF means that a real source power calibration is performed, for which an external power meter must be connected to the analyzer. 
        ///  
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDummySourcePowerCalibrationState(bool Dummy_Source_Power_Calibration)
        {
            int pInvokeResult = PInvoke.SetDummySourcePowerCalibrationState(this._handle, System.Convert.ToUInt16(Dummy_Source_Power_Calibration));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether dummy or real source power calibration is selected
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:DEFault?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Dummy_Source_Power_Calibration">
        /// This control returns whether dummy (On) or real (Off) source power calibration is selected.
        ///  
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDummySourcePowerCalibrationState(out bool Dummy_Source_Power_Calibration)
        {
            ushort Dummy_Source_Power_CalibrationAsUShort;
            int pInvokeResult = PInvoke.GetDummySourcePowerCalibrationState(this._handle, out Dummy_Source_Power_CalibrationAsUShort);
            Dummy_Source_Power_Calibration = System.Convert.ToBoolean(Dummy_Source_Power_CalibrationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the source power calibration for channel &lt;Ch&gt; and for port number &lt;Pt&gt;.  
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless a source power calibration for the analyzer port has been performed (rszvb_InitiateSourcePowerCalibration). 
        /// 
        /// (2) To enable or disable a source power calibration for an external generator use SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:GENerator[:STATe].
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection[:STATe] ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_State">
        /// This control enables (ON) or disables (OFF) the source power calibration for port number.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSourcePowerCalibrationPortState(int Channel, int Port_Number, bool Port_State)
        {
            int pInvokeResult = PInvoke.SetSourcePowerCalibrationPortState(this._handle, Channel, Port_Number, System.Convert.ToUInt16(Port_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the source power calibration for channel &lt;Ch&gt; and for port number &lt;Pt&gt;.  
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless a source power calibration for the analyzer port has been performed (rszvb_InitiateSourcePowerCalibration). 
        /// 
        /// (2) To enable or disable a source power calibration for an external generator use SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:GENerator[:STATe].
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_State">
        /// This control returns the state of the source power calibration state for port number.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSourcePowerCalibrationPortState(int Channel, int Port_Number, out bool Port_State)
        {
            ushort Port_StateAsUShort;
            int pInvokeResult = PInvoke.GetSourcePowerCalibrationPortState(this._handle, Channel, Port_Number, out Port_StateAsUShort);
            Port_State = System.Convert.ToBoolean(Port_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the source power calibration for channel &lt;Ch&gt; and for an external generator number &lt;Pt&gt;.   
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless a source power calibration for the external generator has been performed (rszvb_AcquireSourcePowerCalibration). 
        /// 
        /// (2) To enable or disable a source power calibration for an analyzer port use (rszvb_SetSourcePowerCalibrationPortState).
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:GENerator[:STATe] ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_State">
        /// This control enables (ON) or disables (OFF) the source power calibration for an external generator.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSourcePowerCalibrationGeneratorState(int Channel, int Port_Number, bool Generator_State)
        {
            int pInvokeResult = PInvoke.SetSourcePowerCalibrationGeneratorState(this._handle, Channel, Port_Number, System.Convert.ToUInt16(Generator_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the source power calibration for channel &lt;Ch&gt; and for an external generator number &lt;Pt&gt;.   
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless a source power calibration for the external generator has been performed (rszvb_AcquireSourcePowerCalibration). 
        /// 
        /// (2) To enable or disable a source power calibration for an analyzer port use (rszvb_SetSourcePowerCalibrationPortState).
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:GENerator[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_State">
        /// This control returns the state of the source power calibration state for an external generator.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSourcePowerCalibrationGeneratorState(int Channel, int Port_Number, out bool Generator_State)
        {
            ushort Generator_StateAsUShort;
            int pInvokeResult = PInvoke.GetSourcePowerCalibrationGeneratorState(this._handle, Channel, Port_Number, out Generator_StateAsUShort);
            Generator_State = System.Convert.ToBoolean(Generator_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables a verification sweep that the analyzer performs after the source power calibration. The command is valid for all ports and external generators.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect[:ACQuire]:VERification[:STATe] ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Verification_Sweep">
        /// This control enables (ON) or disables (OFF) the verification sweep.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetVerificationSweepState(int Channel, bool Verification_Sweep)
        {
            int pInvokeResult = PInvoke.SetVerificationSweepState(this._handle, Channel, System.Convert.ToUInt16(Verification_Sweep));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the verification sweep state. The command is valid for all ports and external generators.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect[:ACQuire]:VERification[:STATe]? 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Verification_Sweep">
        /// This control returns the verification sweep state.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetVerificationSweepState(int Channel, out bool Verification_Sweep)
        {
            ushort Verification_SweepAsUShort;
            int pInvokeResult = PInvoke.GetVerificationSweepState(this._handle, Channel, out Verification_SweepAsUShort);
            Verification_Sweep = System.Convert.ToBoolean(Verification_SweepAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the result of the last verification sweep. 
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// (2) This function requires an enabled verification sweep - set with function rszvb_SetVerificationSweepState.
        /// 
        /// (3) If no verification sweep result is available, the function returns RSZVB_ERROR_INSTRUMENT_DATA_NOT_AVAILABLE.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection[:ACQuire]:VERification:RESult? 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_Passed">
        /// Calibration passed, i.e. the cal. power offset is below the tolerance (1), or failed (0). 
        /// 
        /// Valid Range: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <param name="Max_Offset">
        /// This control returns maximum power offset between the measured power at the reference plane and the Cal Power during the verification sweep in dB.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryVerificationSweepResults(out bool Calibration_Passed, out double Max_Offset)
        {
            ushort Calibration_PassedAsUShort;
            int pInvokeResult = PInvoke.QueryVerificationSweepResults(this._handle, out Calibration_PassedAsUShort, out Max_Offset);
            Calibration_Passed = System.Convert.ToBoolean(Calibration_PassedAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the source calibration (1st power calibration step for harmonic measurements), stores and applies the calibration data.
        ///  
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// (2) This function is available only on R&amp;S ZVA and ZVT instrument.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer:CORRection:HARMonic[:ACQuire] 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GeneratorPowerCalibrationHarmonic(int Channel)
        {
            int pInvokeResult = PInvoke.GeneratorPowerCalibrationHarmonic(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the source power calibration. 
        /// 
        /// Notes:
        /// 
        /// (1) It is not possible to disable flatness calibration and the reference receiver calibration simultaneously.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer:CORRection:COLLect:FLATness ON | OFF
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_State">
        /// This control enables (ON) or disables (OFF) the flatness calibration. With disabled flatness calibration, only one calibration sweep is performed in order to calibrate the reference receiver; the previous source calibration data is not overwritten. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSourcePowerCalibrationState(bool Calibration_State)
        {
            int pInvokeResult = PInvoke.SetSourcePowerCalibrationState(this._handle, System.Convert.ToUInt16(Calibration_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the source power calibration. 
        /// 
        /// 
        /// Notes:
        /// 
        /// (1) It is not possible to disable flatness calibration and the reference receiver calibration simultaneously. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer:CORRection:COLLect:FLATness?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_State">
        /// This control returns the state of the source power calibration. 
        /// 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSourcePowerCalibrationState(out bool Calibration_State)
        {
            ushort Calibration_StateAsUShort;
            int pInvokeResult = PInvoke.GetSourcePowerCalibrationState(this._handle, out Calibration_StateAsUShort);
            Calibration_State = System.Convert.ToBoolean(Calibration_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables calibration of the reference receiver together with the source power calibration.
        /// 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer:CORRection:COLLect:RRECeiver ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_State">
        /// This control enables (ON) or disables (OFF) reference receiver calibration.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReferenceReceiverCalibrationState(bool Calibration_State)
        {
            int pInvokeResult = PInvoke.SetReferenceReceiverCalibrationState(this._handle, System.Convert.ToUInt16(Calibration_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the reference receiver calibration.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer:CORRection:COLLect:RRECeiver?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_State">
        /// This control returns the state of the reference receiver calibration.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceReceiverCalibrationState(out bool Calibration_State)
        {
            ushort Calibration_StateAsUShort;
            int pInvokeResult = PInvoke.GetReferenceReceiverCalibrationState(this._handle, out Calibration_StateAsUShort);
            Calibration_State = System.Convert.ToBoolean(Calibration_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the source power calibration settings
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:NREadings &lt;readings&gt;
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect:AVERage:NTOLerance &lt;tolerance&gt;
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:OSOurces[:STATe] ON | OFF 
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]:OFFSet &lt;numeric_value&gt;, ONLY | CPADd
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:LEVel:OFFSet &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Number_Of_Readings">
        /// This control sets the number of readings.
        /// 
        /// Valid Values:
        /// 1 to 100
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Tolerance">
        /// This control sets the tolerance value.
        /// 
        /// Valid Values:
        /// 0.001 dB to 1000 dB
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Other_Sources">
        /// This control switches off all other sources during the calibration sweep for channel &lt;Ch&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// </param>
        /// <param name="Port_Power_Offset">
        /// This control sets the port-specific power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_Parameter">
        /// This control sets the offset parameter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_OFFSET_ONLY   (0) - Only
        /// RSZVB_PWR_CAL_OFFSET_CPADD  (1) - Add Channel Power 
        /// 
        /// Default Value: RSZVB_PWR_CAL_OFFSET_CPADD (1)
        /// </param>
        /// <param name="Calibration_Power_Offset">
        /// This control sets the calibration power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ModifySourcePowerCalibrationSettings(int Channel, int Port_Number, int Number_Of_Readings, double Tolerance, bool Other_Sources, double Port_Power_Offset, int Offset_Parameter, double Calibration_Power_Offset)
        {
            int pInvokeResult = PInvoke.ModifySourcePowerCalibrationSettings(this._handle, Channel, Port_Number, Number_Of_Readings, Tolerance, System.Convert.ToUInt16(Other_Sources), Port_Power_Offset, Offset_Parameter, Calibration_Power_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets a limit for the number of calibration sweeps in the source power calibration. The command is valid for all ports and external generators. Equivalent command: SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect:AVERage[:COUNt]. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:NREadings &lt;readings&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_Of_Readings">
        /// This control sets the number of readings.
        /// 
        /// Valid Values:
        /// 1 to 100
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNumberOfReadings(int Channel, int Number_Of_Readings)
        {
            int pInvokeResult = PInvoke.SetNumberOfReadings(this._handle, Channel, Number_Of_Readings);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a limit for the number of calibration sweeps in the source power calibration. The command is valid for all ports and external generators. Equivalent command: SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect:AVERage[:COUNt]?. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:NREadings?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Number_Of_Readings">
        /// This control returns the number of readings.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNumberOfReadings(int Channel, out int Number_Of_Readings)
        {
            int pInvokeResult = PInvoke.GetNumberOfReadings(this._handle, Channel, out Number_Of_Readings);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the maximum deviation of the measured power from the target power of the calibration. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect:AVERage:NTOLerance &lt;tolerance&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Tolerance">
        /// This control sets the tolerance value.
        /// 
        /// Valid Values:
        /// 0.001 dB to 1000 dB
        /// 
        /// Default Value: 1.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTolerance(int Channel, double Tolerance)
        {
            int pInvokeResult = PInvoke.SetTolerance(this._handle, Channel, Tolerance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the maximum deviation of the measured power from the target power of the calibration. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect:AVERage:NTOLerance?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Tolerance">
        /// This control returns the tolerance value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTolerance(int Channel, out double Tolerance)
        {
            int pInvokeResult = PInvoke.GetTolerance(this._handle, Channel, out Tolerance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches off all other sources during the calibration sweep for channel &lt;Ch&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:OSOurces[:STATe] ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Other_Sources">
        /// This control switches off all other sources during the calibration sweep for channel &lt;Ch&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetOtherSourcesState(int Channel, bool Other_Sources)
        {
            int pInvokeResult = PInvoke.SetOtherSourcesState(this._handle, Channel, System.Convert.ToUInt16(Other_Sources));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of all other sources during the calibration sweep for channel &lt;Ch&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:OSOurces[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Other_Sources">
        /// This control returns the state of all other sources during the calibration sweep for channel &lt;Ch&gt;.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetOtherSourcesState(int Channel, out bool Other_Sources)
        {
            ushort Other_SourcesAsUShort;
            int pInvokeResult = PInvoke.GetOtherSourcesState(this._handle, Channel, out Other_SourcesAsUShort);
            Other_Sources = System.Convert.ToBoolean(Other_SourcesAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a port-specific source power or a power offset relative to the channel power. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]:OFFSet &lt;numeric_value&gt;, ONLY | CPADd
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_Power_Offset">
        /// This control sets the port-specific power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Offset_Parameter">
        /// This control sets the offset parameter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_OFFSET_ONLY   (0) - Only
        /// RSZVB_PWR_CAL_OFFSET_CPADD  (1) - Add Channel Power 
        /// 
        /// Default Value: RSZVB_PWR_CAL_OFFSET_CPADD (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPortPowerOffset(int Channel, int Port_Number, double Port_Power_Offset, int Offset_Parameter)
        {
            int pInvokeResult = PInvoke.SetPortPowerOffset(this._handle, Channel, Port_Number, Port_Power_Offset, Offset_Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a port-specific source power or a power offset relative to the channel power. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]:OFFSet &lt;numeric_value&gt;, ONLY | CPADd
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_Power_Offset">
        /// This control gets the port-specific power offset.
        /// </param>
        /// <param name="Offset_Parameter">
        /// This control gets the offset parameter.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_OFFSET_ONLY   (0) - Only
        /// RSZVB_PWR_CAL_OFFSET_CPADD  (1) - Add Channel Power 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPortPowerOffset(int Channel, int Port_Number, out double Port_Power_Offset, out int Offset_Parameter)
        {
            int pInvokeResult = PInvoke.GetPortPowerOffset(this._handle, Channel, Port_Number, out Port_Power_Offset, out Offset_Parameter);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies a gain (positive values) or an attenuation (negative values) in the signal path between the source port and the calibrated reference plane. The value has no impact on the source power. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:LEVel:OFFSet &lt;numeric_value&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibration_Power_Offset">
        /// This control sets the calibration power offset.
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationPowerOffset(int Channel, int Port_Number, double Calibration_Power_Offset)
        {
            int pInvokeResult = PInvoke.SetCalibrationPowerOffset(this._handle, Channel, Port_Number, Calibration_Power_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a gain (positive values) or an attenuation (negative values) in the signal path between the source port and the calibrated reference plane.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:LEVel:OFFSet?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibration_Power_Offset">
        /// This control gets the calibration power offset.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationPowerOffset(int Channel, int Port_Number, out double Calibration_Power_Offset)
        {
            int pInvokeResult = PInvoke.GetCalibrationPowerOffset(this._handle, Channel, Port_Number, out Calibration_Power_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies a gain (positive values) or an attenuation (negative values) in the signal path between the external generator and the calibrated reference plane. The value has no impact on the generator power. 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with R&amp;S ZVA and ZVT instrument. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:GENerator&lt;Gen&gt;:LEVel:OFFSet &lt;offset&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Calibrated channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number. This suffix is ignored; the generator is selected via &lt;Gen&gt;. 
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the generator number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Cal_Power_Generator_Offset">
        /// This control sets the calibration power generator offset (Gain or attenuation value).
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationPowerGeneratorOffset(int Channel, int Port_Number, int Generator_Number, double Cal_Power_Generator_Offset)
        {
            int pInvokeResult = PInvoke.SetCalibrationPowerGeneratorOffset(this._handle, Channel, Port_Number, Generator_Number, Cal_Power_Generator_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a gain (positive values) or an attenuation (negative values) in the signal path between the external generator and the calibrated reference plane.
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only with R&amp;S ZVA and ZVT instrument. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:GENerator&lt;Gen&gt;:LEVel:OFFSet?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Calibrated channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number. This suffix is ignored; the generator is selected via &lt;Gen&gt;. 
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the generator number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Cal_Power_Generator_Offset">
        /// This control gets the calibration power generator offset (Gain or attenuation value).
        /// 
        /// Valid Values:
        /// -300 dB to +300 dB 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationPowerGeneratorOffset(int Channel, int Port_Number, int Generator_Number, out double Cal_Power_Generator_Offset)
        {
            int pInvokeResult = PInvoke.GetCalibrationPowerGeneratorOffset(this._handle, Channel, Port_Number, Generator_Number, out Cal_Power_Generator_Offset);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables a fast source power calibration, where the external power meter is used for the first calibration sweep only. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:FAST ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Fast_Source_Power_Calibration">
        /// This control enables or disables a fast source power calibration, where the external power meter is used for the first calibration sweep only. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReferenceReceiverAfterFirstCalSweep(bool Fast_Source_Power_Calibration)
        {
            int pInvokeResult = PInvoke.SetReferenceReceiverAfterFirstCalSweep(this._handle, System.Convert.ToUInt16(Fast_Source_Power_Calibration));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the fast source power calibration, where the external power meter is used for the first calibration sweep only. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:FAST?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Fast_Source_Power_Calibration">
        /// This control returns the state of the fast source power calibration, where the external power meter is used for the first calibration sweep only. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceReceiverAfterFirstCalSweep(out bool Fast_Source_Power_Calibration)
        {
            ushort Fast_Source_Power_CalibrationAsUShort;
            int pInvokeResult = PInvoke.GetReferenceReceiverAfterFirstCalSweep(this._handle, out Fast_Source_Power_CalibrationAsUShort);
            Fast_Source_Power_Calibration = System.Convert.ToBoolean(Fast_Source_Power_CalibrationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads source power correction data sets.  
        /// 
        /// Note(s):
        /// 
        /// (1) A power correction data set contains n real values. Each value corresponds to the ratio of the actual power at the reference plane (value provided by the used source) to the uncalibrated power in dB. 
        /// 
        /// (2) The number of values is equal to the number of sweep points.
        ///  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:DATA? '&lt;src_string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibrated_Wave">
        /// This control sets the identifier for the source of the calibrated wave.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) 'A&lt;n&gt;' or 'PORT&lt;n&gt;' denote correction data for the analyzer port no. &lt;n&gt;.
        /// 
        /// (2) 'ESRC&lt;n&gt;' or 'GEN&lt;n&gt;' denote correction data for the external generator no. &lt;n&gt;.
        /// </param>
        /// <param name="Number_Of_Values">
        /// This control returns the number of power correction values. 
        /// 
        /// Note:
        /// 
        /// You can use this parameter to pass the expected number of values to be read from the instrument. Data values will be read until either number of data values are consumed or instruments output buffer is empty.
        /// </param>
        /// <param name="Power_Correction_Values">
        /// This control returns the power correction values.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadSourcePowerCorrectionData(int Channel, int Port_Number, string Calibrated_Wave, out int Number_Of_Values, double[] Power_Correction_Values)
        {
            int pInvokeResult = PInvoke.ReadSourcePowerCorrectionData(this._handle, Channel, Port_Number, Calibrated_Wave, out Number_Of_Values, Power_Correction_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes source power correction data sets.  
        /// 
        /// Note(s):
        /// 
        /// (1) A power correction data set contains n real values. Each value corresponds to the ratio of the actual power at the reference plane (value provided by the used source) to the uncalibrated power in dB. 
        /// 
        /// (2) The number n is equal to the number of sweep points.
        /// 
        /// (3) Writing correction data fails if the number of transferred values is not equal to the number of sweep points.
        ///  
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:DATA '&lt;src_string&gt;', &lt;numeric_value&gt;...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibrated_Wave">
        /// This control sets the identifier for the source of the calibrated wave.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) 'A&lt;n&gt;' or 'PORT&lt;n&gt;' denote correction data for the analyzer port no. &lt;n&gt;.
        /// 
        /// (2) 'ESRC&lt;n&gt;' or 'GEN&lt;n&gt;' denote correction data for the external generator no. &lt;n&gt;.
        /// </param>
        /// <param name="Number_Of_Values">
        /// This control sets the number of power correction values.
        /// 
        /// Valid Values: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Correction_Values">
        /// This control sets the power correction values.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteSourcePowerCorrectionData(int Channel, int Port_Number, string Calibrated_Wave, int Number_Of_Values, double[] Power_Correction_Values)
        {
            int pInvokeResult = PInvoke.WriteSourcePowerCorrectionData(this._handle, Channel, Port_Number, Calibrated_Wave, Number_Of_Values, Power_Correction_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Specifies the convergence factor for a source power calibration. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect:CFACtor
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Convergence_Factor">
        /// Convergence factor
        /// 
        /// 
        /// Valid Range:
        ///  0 to 2
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSourcePowerCalibrationConvergenceFactor(double Convergence_Factor)
        {
            int pInvokeResult = PInvoke.SetSourcePowerCalibrationConvergenceFactor(this._handle, Convergence_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the convergence factor for a source power calibration. 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection:COLLect:CFACtor?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Convergence_Factor">
        /// Returns the convergence factor.
        /// 
        /// 
        /// Valid Range:
        /// 0 to 2
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSourcePowerCalibrationConvergenceFactor(out double Convergence_Factor)
        {
            int pInvokeResult = PInvoke.GetSourcePowerCalibrationConvergenceFactor(this._handle, out Convergence_Factor);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects the frequency range for the sensitivity correction of the power meter.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PMMO  ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency_Range">
        /// Selects the frequency range for the sensitivity correction of the power meter. 
        ///  
        /// Valid Values:
        /// VI_FALSE (0) - From Source To Be Calibrated
        /// VI_TRUE  (1) - From Power Meter Entry In Port Configuration
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDummySourcePowerCalibrationSensitivityCorrectionRange(int Channel, int Frequency_Range)
        {
            int pInvokeResult = PInvoke.SetDummySourcePowerCalibrationSensitivityCorrectionRange(this._handle, Channel, Frequency_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the frequency range for the sensitivity correction of the power meter.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]PMMO?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency_Range">
        /// Returns the frequency range for the sensitivity correction of the power meter. 
        ///  
        /// Valid Values:
        /// VI_FALSE (0) - From Source To Be Calibrated
        /// VI_TRUE  (1) - From Power Meter Entry In Port Configuration
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDummySourcePowerCalibrationSensitivityCorrectionRange(int Channel, out int Frequency_Range)
        {
            int pInvokeResult = PInvoke.GetDummySourcePowerCalibrationSensitivityCorrectionRange(this._handle, Channel, out Frequency_Range);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the wave quantity and the source for the receiver power calibration, starts the calibration sweep, and applies the receiver power correction.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;:ACQuire AWAVe | BWAVe | B1 | B2 | B3 | B4 | B5 | B6 | B7 | B8[,&lt;cal_port&gt;, PORT | GENerator, &lt;source_no&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// 
        /// </param>
        /// <param name="Wave">
        /// This control selects the wave.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_AWAVE (0) - A
        /// RSZVB_PWR_CAL_BWAVE (1) - B
        /// RSZVB_PWR_CAL_B1    (2) - B1
        /// RSZVB_PWR_CAL_B2    (3) - B2
        /// RSZVB_PWR_CAL_B3    (4) - B3
        /// RSZVB_PWR_CAL_B4    (5) - B4
        /// RSZVB_PWR_CAL_B5    (6) - B5
        /// RSZVB_PWR_CAL_B6    (7) - B6
        /// RSZVB_PWR_CAL_B7    (8) - B7
        /// RSZVB_PWR_CAL_B8    (9) - B8
        /// 
        /// Default Value: RSZVB_PWR_CAL_AWAVE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Parameters B1, B2, B3 and B4 are for direct wave and cal port setting for received waves b1 and b2. The parameters B1 and B2 are ZVR-compatible. No additional parameters need to be specified. The sources for B1 and B2 are Port 2 and Port 1, respectively.
        /// 
        /// (2) Parameters B5, B6, B7 and B8 are for direct wave and cal port setting. No additional parameters need to be specified. These parameters are available only for RSZVT8.
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source">
        /// This control toggle between the analyzer port and external generator.
        /// 
        /// Valid Values:
        /// RSZVB_PWR_CAL_PORT (0) - Port
        /// RSZVB_PWR_CAL_GEN  (1) - Generator
        /// 
        /// Default Value: RSZVB_PWR_CAL_PORT (0)
        /// </param>
        /// <param name="Source_Number">
        /// This control sets the Number of the port for the internal source or of the generator.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer/number of external generators 
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AcquireReceiverPowerCalibration(int Channel, int Wave, int Port_Number, int Source, int Source_Number)
        {
            int pInvokeResult = PInvoke.AcquireReceiverPowerCalibration(this._handle, Channel, Wave, Port_Number, Source, Source_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the receiver power calibration for channel &lt;Ch&gt; and for the reference waves An. 
        /// 
        /// Notes:
        /// 
        /// (1) The function is disabled unless the reference waves have been power calibrated (rszvb_AcquireReceiverPowerCalibration - AWAVe,...). 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;:AWAVe[:STATe] ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Receiver_Power_Calibration">
        /// This control enables (ON) or disables (OFF) the receiver power calibration for the reference waves An.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAWaveReceiverPowerCalibrationState(int Channel, int Port_Number, bool Receiver_Power_Calibration)
        {
            int pInvokeResult = PInvoke.SetAWaveReceiverPowerCalibrationState(this._handle, Channel, Port_Number, System.Convert.ToUInt16(Receiver_Power_Calibration));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the receiver power calibration for channel &lt;Ch&gt; and for the reference waves An.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;:AWAVe[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Receiver_Power_Calibration">
        /// This control returns the state of the receiver power calibration for the reference waves An.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAWaveReceiverPowerCalibrationState(int Channel, int Port_Number, out bool Receiver_Power_Calibration)
        {
            ushort Receiver_Power_CalibrationAsUShort;
            int pInvokeResult = PInvoke.GetAWaveReceiverPowerCalibrationState(this._handle, Channel, Port_Number, out Receiver_Power_CalibrationAsUShort);
            Receiver_Power_Calibration = System.Convert.ToBoolean(Receiver_Power_CalibrationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the receiver power calibration for channel &lt;Ch&gt; and for the received waves Bn. 
        /// 
        /// Notes:
        /// 
        /// (1) The function is disabled unless the reference waves have been power calibrated (rszvb_AcquireReceiverPowerCalibration - BWAVe,...). 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;[:STATe] ON | OFF 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Receiver_Power_Calibration">
        /// This control enables (ON) or disables (OFF) the receiver power calibration for the reference waves Bn.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetBWaveReceiverPowerCalibrationState(int Channel, int Port_Number, bool Receiver_Power_Calibration)
        {
            int pInvokeResult = PInvoke.SetBWaveReceiverPowerCalibrationState(this._handle, Channel, Port_Number, System.Convert.ToUInt16(Receiver_Power_Calibration));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the receiver power calibration for channel &lt;Ch&gt; and for the received waves Bn. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Receiver_Power_Calibration">
        /// This control returns the state of the receiver power calibration for the reference waves Bn.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetBWaveReceiverPowerCalibrationState(int Channel, int Port_Number, out bool Receiver_Power_Calibration)
        {
            ushort Receiver_Power_CalibrationAsUShort;
            int pInvokeResult = PInvoke.GetBWaveReceiverPowerCalibrationState(this._handle, Channel, Port_Number, out Receiver_Power_CalibrationAsUShort);
            Receiver_Power_Calibration = System.Convert.ToBoolean(Receiver_Power_CalibrationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads receiver power correction data sets.  
        /// 
        /// Note(s):
        /// 
        /// (1) A power correction data set contains n real values. Each value corresponds to the ratio of the actual power at the receiver input (value provided by the used source) to the uncalibrated power in dB. 
        /// 
        /// (2) The number n is equal to the number of sweep points.
        ///  
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;:DATA? '&lt;wave_string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibrated_Wave">
        /// This control identifier for the calibrated wave.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) 'A&lt;n&gt;' or 'AWAV&lt;n&gt;' denote correction data for the reference wave a&lt;n&gt;, where &lt;n&gt; corresponds to the port number.
        /// 
        /// (2) 'B&lt;n&gt;' or 'BWAV&lt;n&gt;' denote correction data for the reference wave b&lt;n&gt;.
        /// </param>
        /// <param name="Number_Of_Values">
        /// This control returns the number of power correction values.
        /// 
        /// Note:
        /// 
        /// You can use this parameter to pass the expected number of values to be read from the instrument. Data values will be read until either number of data values are consumed or instruments output buffer is empty.
        /// </param>
        /// <param name="Power_Correction_Values">
        /// This control returns the power correction values.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadReceiverPowerCorrectionData(int Channel, int Port_Number, string Calibrated_Wave, out int Number_Of_Values, double[] Power_Correction_Values)
        {
            int pInvokeResult = PInvoke.ReadReceiverPowerCorrectionData(this._handle, Channel, Port_Number, Calibrated_Wave, out Number_Of_Values, Power_Correction_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes receiver power correction data sets.  
        /// 
        /// Note(s):
        /// 
        /// (1) A power correction data set contains n real values. Each value corresponds to the ratio of the actual power at the receiver input (value provided by the used source) to the uncalibrated power in dB. 
        /// 
        /// (2) The number n is equal to the number of sweep points.
        ///  
        /// (3) Writing correction data fails if the number of transferred values is not equal to the number of sweep points.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;port_no&gt;:DATA '&lt;wave_string&gt;', &lt;numeric_value&gt;... 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Calibrated_Wave">
        /// This control identifier for the calibrated wave.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// 
        /// Note(s):
        /// 
        /// (1) 'A&lt;n&gt;' or 'AWAV&lt;n&gt;' denote correction data for the reference wave a&lt;n&gt;, where &lt;n&gt; corresponds to the port number.
        /// 
        /// (2) 'B&lt;n&gt;' or 'BWAV&lt;n&gt;' denote correction data for the reference wave b&lt;n&gt;.
        /// </param>
        /// <param name="Number_Of_Values">
        /// This control sets the number of power correction values.
        /// 
        /// Valid Values: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Correction_Values">
        /// This control sets the power correction values.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: none
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteReceiverPowerCorrectionData(int Channel, int Port_Number, string Calibrated_Wave, int Number_Of_Values, double[] Power_Correction_Values)
        {
            int pInvokeResult = PInvoke.WriteReceiverPowerCorrectionData(this._handle, Channel, Port_Number, Calibrated_Wave, Number_Of_Values, Power_Correction_Values);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts the receiver calibration (2nd power calibration step for harmonic measurements), stores and applies the calibration data.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// (2) This function is available only on R&amp;S ZVA and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer:HARMonic:ACQuire
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReceiverPowerCalibrationHarmonic(int Channel)
        {
            int pInvokeResult = PInvoke.ReceiverPowerCalibrationHarmonic(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the source power correction for channel &lt;Ch&gt; and for port number &lt;Pt&gt;.  
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless a source power calibration for the analyzer port has been performed (rszvb_InitiateSourcePowerCalibration). 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source_Power_Correction_State">
        /// This control enables (ON) or disables (OFF) the source power correction state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSourcePowerCorrectionState(int Channel, int Port_Number, bool Source_Power_Correction_State)
        {
            int pInvokeResult = PInvoke.SetSourcePowerCorrectionState(this._handle, Channel, Port_Number, System.Convert.ToUInt16(Source_Power_Correction_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the source power correction for channel &lt;Ch&gt; and for port number &lt;Pt&gt;.  
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless a source power calibration for the analyzer port has been performed (rszvb_InitiateSourcePowerCalibration). 
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;:CORRection[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Source_Power_Correction_State">
        /// This control returns the state of the source power correction state.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetSourcePowerCorrectionState(int Channel, int Port_Number, out bool Source_Power_Correction_State)
        {
            ushort Source_Power_Correction_StateAsUShort;
            int pInvokeResult = PInvoke.GetSourcePowerCorrectionState(this._handle, Channel, Port_Number, out Source_Power_Correction_StateAsUShort);
            Source_Power_Correction_State = System.Convert.ToBoolean(Source_Power_Correction_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the receiver power calibration for channel &lt;Ch&gt; and for the received waves bn.    
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless the received waves have been power calibrated (rszvb_AcquireReceiverPowerCalibration). 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;Pt&gt;:STATe ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Receiver_Power_Correction_State">
        /// This control enables (ON) or disables (OFF) the receiver power correction state.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReceiverPowerCorrectionState(int Channel, int Port_Number, bool Receiver_Power_Correction_State)
        {
            int pInvokeResult = PInvoke.SetReceiverPowerCorrectionState(this._handle, Channel, Port_Number, System.Convert.ToUInt16(Receiver_Power_Correction_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the receiver power calibration for channel &lt;Ch&gt; and for the received waves bn.    
        /// 
        /// Notes:
        /// 
        /// (1) The command is disabled unless the received waves have been power calibrated (rszvb_AcquireReceiverPowerCalibration). 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:POWer&lt;Pt&gt;:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_Number">
        /// This control sets the calibrated port number.
        /// 
        /// Valid Values:
        /// 1 to port number of the analyzer
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Receiver_Power_Correction_State">
        /// This control returns the state of the receiver power correction state.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReceiverPowerCorrectionState(int Channel, int Port_Number, out bool Receiver_Power_Correction_State)
        {
            ushort Receiver_Power_Correction_StateAsUShort;
            int pInvokeResult = PInvoke.GetReceiverPowerCorrectionState(this._handle, Channel, Port_Number, out Receiver_Power_Correction_StateAsUShort);
            Receiver_Power_Correction_State = System.Convert.ToBoolean(Receiver_Power_Correction_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function provides operations which allows to store system error correction data to the cal pool and to assign stored correction data to channels:
        /// 
        ///   Copy
        ///   Apply
        ///   Resolve Pool Link
        ///   Delete
        ///   Merge
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:CORRection &lt;Ch&gt;,'&lt;file_name&gt;'
        /// MMEMory:LOAD:CORRection &lt;Ch&gt;,'&lt;file_name&gt;'
        /// MMEMory:LOAD:CORRection:RESolve &lt;Ch&gt;,'&lt;file_name&gt;'
        /// MMEMory:DELete:CORRection '&lt;file_name&gt;'
        /// MMEMory:LOAD:CORRection:MERGe &lt;Channel&gt;, '&lt;file1&gt;.cal', '&lt;file2&gt;.cal', ...
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Operation_to_be_Performed">
        /// This control selects the type of operation to be performed.
        /// 
        /// Valid Values:
        /// RSZVB_CORR_MAN_COPY        (0) - Copy
        /// RSZVB_CORR_MAN_APPLY       (1) - Apply
        /// RSZVB_CORR_MAN_RESOLVE     (2) - Resolve Pool Link
        /// RSZVB_FILE_MAN_DELETE      (3) - Delete
        /// RSZVB_CORR_MAN_APPLY_ALL   (4) - Apply to All Channels
        /// RSZVB_CORR_MAN_RESOLVE_ALL (5) - Resolve Pool Link For All Channels
        /// RSZVB_CORR_MAN_MERGE       (6) - Merge
        /// 
        /// Default Value: RSZVB_CORR_MAN_COPY (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Copy:
        /// Copies the correction data of channel &lt;Channel&gt; to the cal pool, generating a new correction data file (cal group). The file has the extension *.calkit and is stored in the C:\Rohde&amp;Schwarz\NWA\Calibration\Data directory.
        /// 
        /// (2) Apply:
        /// Applies a system error correction data set stored in the cal pool (cal group file) to channel no. &lt;Ch&gt;.
        /// 
        /// (3) Resolve Pool Link:
        /// Resolves the link between channel &lt;Ch&gt; and the correction data set (cal group file) so that the channel uses its previous correction data. The command has no effect if there is no link between &lt;Ch&gt; and the specified file.
        /// 
        /// (4) Delete:
        /// Deletes a system error correction data set stored in the cal pool (cal group file).
        /// 
        /// (5) Apply to All Channels:
        /// Applies the selected data set to all channels.
        /// 
        /// (6) Resolve Pool Link For All Channels:
        /// Resolves the pool link for all channels.
        /// 
        /// (7) Merge:
        /// Merges (activates) several cal group files for channel no. &lt;channel&gt; so that the query SENSe1&lt;Ch&gt;:CORRection:COLLect:METHod:DEFine? returns a list of all merged calibration types (equivalent to the Calibration Pool list in the Calibration Manager dialog). The merged cal group 
        /// files can be stored to a common file.
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the file name for the file operation to be performed.
        /// 
        /// Valid Range: not tested
        /// 
        /// Default Value: "D:\\user\\data"
        /// 
        /// Note(s):
        /// 
        /// (1) Merge operation:
        /// String parameters with the names of the merged cal group files. Cal group files must have the extension *.cal. The file extensions must be specified as part of the string parameters.  
        /// In contrast the directory path must not be specified; the analyzer always uses the default path C:\Rohde&amp;Schwarz\NWA\Calibration\Data.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationManager(int Channel, int Operation_to_be_Performed, string File_Name)
        {
            int pInvokeResult = PInvoke.CalibrationManager(this._handle, Channel, Operation_to_be_Performed, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects and initiates a one-port, two-port, three-port or four-port automatic calibration at arbitrary analyzer and calibration unit ports.
        /// 
        /// Note(s):
        /// 
        /// (1) Port numbers of the analyzer:
        /// For an n-port automatic calibration (n = 1 to 4), n arbitrary (not necessarily consecutive) port numbers must be specified.
        /// 
        /// (2) Port numbers of the cal unit:
        /// For an n-port automatic calibration (n = 1 to 4), n arbitrary (not necessarily consecutive) port numbers must be specified. It is possible to combine arbitrary (not necessarily matching) pairs of analyzer and cal unit ports.
        ///  
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:PORTs '&lt;file_name&gt;',&lt;analyzer_port_no&gt;,&lt;cal_unit_port_no&gt;{,&lt;analyzer_port_no&gt;,&lt;cal_unit_port_no&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// Name and (possibly) directory of the cal kit file to be used for the automatic calibration: 
        /// 
        /// If nothing is specified (empty string ' '), the default cal kit file stored in the calibration unit is used. This file is also used in manual control.
        /// 
        /// A NWA cal kit file name *.calkit without path denotes a specific cal kit file stored in the Calibration Unit. 
        /// 
        /// A NWA cal kit file name *.calkit with path denotes a specific cal kit file stored in an arbitrary directory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Analyzer_Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_3">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_4">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_1">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_2">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_3">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_4">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationAuto(int Channel, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4, int Cal_Unit_Port_1, int Cal_Unit_Port_2, int Cal_Unit_Port_3, int Cal_Unit_Port_4)
        {
            int pInvokeResult = PInvoke.CalibrationAuto(this._handle, Channel, Calibration_Kit_Name, Analyzer_Port_1, Analyzer_Port_2, Analyzer_Port_3, Analyzer_Port_4, Cal_Unit_Port_1, Cal_Unit_Port_2, Cal_Unit_Port_3, Cal_Unit_Port_4);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects and initiates a one-port, two-port, three-port or four-port automatic calibration at arbitrary analyzer ports.
        /// 
        /// Note(s):
        /// 
        /// (1) If the test setup contains a high attenuation the analyzer may fail to detect the cal unit ports connected to each of its ports. In this case use the extended function rszvb_CalibrationAuto (command [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:PORTs)
        /// 
        ///  
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO '&lt;file_name&gt;',&lt;port_no&gt;{,&lt;port_no&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// Name and (possibly) directory of the cal kit file to be used for the automatic calibration: 
        /// 
        /// If nothing is specified (empty string ' '), the default cal kit file stored in the calibration unit is used. This file is also used in manual control.
        /// 
        /// A NWA cal kit file name *.calkit without path denotes a specific cal kit file stored in the Calibration Unit. 
        /// 
        /// A NWA cal kit file name *.calkit with path denotes a specific cal kit file stored in an arbitrary directory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Analyzer_Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_3">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_4">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationAutoSimplified(int Channel, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4)
        {
            int pInvokeResult = PInvoke.CalibrationAutoSimplified(this._handle, Channel, Calibration_Kit_Name, Analyzer_Port_1, Analyzer_Port_2, Analyzer_Port_3, Analyzer_Port_4);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects and initiates a one-port, two-port, three-port or four-port automatic calibration at arbitrary analyzer and calibration unit ports.
        /// 
        /// Note(s):
        /// 
        /// (1) Port numbers of the analyzer:
        /// For an n-port automatic calibration (n = 1 to 4), n arbitrary (not necessarily consecutive) port numbers must be specified.
        /// 
        /// (2) Port numbers of the cal unit:
        /// For an n-port automatic calibration (n = 1 to 4), n arbitrary (not necessarily consecutive) port numbers must be specified. It is possible to combine arbitrary (not necessarily matching) pairs of analyzer and cal unit ports.
        ///  
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:PORTs:TYPE &lt;cal_type&gt;,'&lt;file_name&gt;',&lt;analyzer_port_no&gt;,&lt;cal_unit_port_no&gt;{,&lt;analyzer_port_no&gt;,&lt;cal_unit_port_no&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parameters">
        /// This control selects a calibration type.
        /// 
        /// Valid Values:
        /// RSZVB_CALTYPE_FOP  (2)  - Full One Port
        /// RSZVB_CALTYPE_OPTP (4)  - One Path Two Port
        /// RSZVB_CALTYPE_FNP  (10) - Full N-port
        /// RSZVB_CALTYPE_SFTP (11) - Separate Full Two-Port 
        /// 
        /// Default Value: RSZVB_CALTYPE_FOP (2)
        /// 
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// Name and (possibly) directory of the cal kit file to be used for the automatic calibration: 
        /// 
        /// If nothing is specified (empty string ' '), the default cal kit file stored in the calibration unit is used. This file is also used in manual control.
        /// 
        /// A NWA cal kit file name *.calkit without path denotes a specific cal kit file stored in the Calibration Unit. 
        /// 
        /// A NWA cal kit file name *.calkit with path denotes a specific cal kit file stored in an arbitrary directory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Analyzer_Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_3">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_4">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_1">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_2">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_3">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_4">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationAutoType(int Channel, int Parameters, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4, int Cal_Unit_Port_1, int Cal_Unit_Port_2, int Cal_Unit_Port_3, int Cal_Unit_Port_4)
        {
            int pInvokeResult = PInvoke.CalibrationAutoType(this._handle, Channel, Parameters, Calibration_Kit_Name, Analyzer_Port_1, Analyzer_Port_2, Analyzer_Port_3, Analyzer_Port_4, Cal_Unit_Port_1, Cal_Unit_Port_2, Cal_Unit_Port_3, Cal_Unit_Port_4);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function Selects and initiates a one-port, two-port, three-port or four-port automatic calibration at arbitrary analyzer and cal unit ports. This command also selects the calibration type. 
        /// 
        /// Note(s):
        /// 
        /// (1) If the test setup contains a high attenuation the analyzer may fail to detect the cal unit ports connected to each of its ports. In this case use the extended function rszvb_CalibrationAutoType (command [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:PORTs:TYPE)
        /// 
        ///  
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:TYPE
        /// &lt;cal_type&gt;, '&lt;file_name&gt;',&lt;port_no&gt;{,&lt;port_no&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Parameters">
        /// This control selects a calibration type.
        /// 
        /// Valid Values:
        /// RSZVB_CALTYPE_FOP  (2)  - Full One Port
        /// RSZVB_CALTYPE_OPTP (4)  - One Path Two Port
        /// RSZVB_CALTYPE_FNP  (10) - Full N-port
        /// RSZVB_CALTYPE_SFTP (11) - Separate Full Two-Port 
        /// 
        /// Default Value: RSZVB_CALTYPE_FOP (2)
        /// 
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// Name and (possibly) directory of the cal kit file to be used for the automatic calibration: 
        /// 
        /// If nothing is specified (empty string ' '), the default cal kit file stored in the calibration unit is used. This file is also used in manual control.
        /// 
        /// A NWA cal kit file name *.calkit without path denotes a specific cal kit file stored in the Calibration Unit. 
        /// 
        /// A NWA cal kit file name *.calkit with path denotes a specific cal kit file stored in an arbitrary directory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Analyzer_Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_3">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_4">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationAutoTypeSimplified(int Channel, int Parameters, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4)
        {
            int pInvokeResult = PInvoke.CalibrationAutoTypeSimplified(this._handle, Channel, Parameters, Calibration_Kit_Name, Analyzer_Port_1, Analyzer_Port_2, Analyzer_Port_3, Analyzer_Port_4);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the assignment between the network analyzer ports and the ports of the connected automatic calibration unit. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:PORTs:CONNection?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port_1">
        /// Returns the port number of the cal unit that is connected to analyzer port number 1.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is zero, the analyzer port is not connected to any of the calibration unit ports.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_2">
        /// Returns the port number of the cal unit that is connected to analyzer port number 2.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is zero, the analyzer port is not connected to any of the calibration unit ports.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_3">
        /// Returns the port number of the cal unit that is connected to analyzer port number 3.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is zero, the analyzer port is not connected to any of the calibration unit ports.
        /// 
        /// 
        /// </param>
        /// <param name="Analyzer_Port_4">
        /// Returns the port number of the cal unit that is connected to analyzer port number 4.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is zero, the analyzer port is not connected to any of the calibration unit ports.
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationConnection(int Channel, out int Analyzer_Port_1, out int Analyzer_Port_2, out int Analyzer_Port_3, out int Analyzer_Port_4)
        {
            int pInvokeResult = PInvoke.GetCalibrationConnection(this._handle, Channel, out Analyzer_Port_1, out Analyzer_Port_2, out Analyzer_Port_3, out Analyzer_Port_4);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects and initiates a one-port, two-port, three-port or four-port automatic calibration at arbitrary analyzer and calibration unit ports.
        /// 
        /// Note(s):
        /// 
        /// (1) Port numbers of the analyzer:
        /// For an n-port automatic calibration (n = 1 to 4), n arbitrary (not necessarily consecutive) port numbers must be specified.
        /// 
        /// (2) Port numbers of the cal unit:
        /// For an n-port automatic calibration (n = 1 to 4), n arbitrary (not necessarily consecutive) port numbers must be specified. It is possible to combine arbitrary (not necessarily matching) pairs of analyzer and cal unit ports.
        ///  
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:PORTs '&lt;file_name&gt;',&lt;analyzer_port_no&gt;,&lt;cal_unit_port_no&gt;{,&lt;analyzer_port_no&gt;,&lt;cal_unit_port_no&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// Name and (possibly) directory of the cal kit file to be used for the automatic calibration: 
        /// 
        /// If nothing is specified (empty string ' '), the default cal kit file stored in the calibration unit is used. This file is also used in manual control.
        /// 
        /// A NWA cal kit file name *.calkit without path denotes a specific cal kit file stored in the Calibration Unit. 
        /// 
        /// A NWA cal kit file name *.calkit with path denotes a specific cal kit file stored in an arbitrary directory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Analyzer_Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Analyzer_Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_3">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Analyzer_Port_4">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_1">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_2">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_3">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Cal_Unit_Port_4">
        /// Port number of the cal unit.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// 
        /// </param>
        /// <param name="Timeout">
        /// This control sets the timeout value in milliseconds for Auto Calibration feature.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 50000ms
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationAutoEx(int Channel, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4, int Cal_Unit_Port_1, int Cal_Unit_Port_2, int Cal_Unit_Port_3, int Cal_Unit_Port_4, int Timeout)
        {
            int pInvokeResult = PInvoke.CalibrationAutoEx(this._handle, Channel, Calibration_Kit_Name, Analyzer_Port_1, Analyzer_Port_2, Analyzer_Port_3, Analyzer_Port_4, Cal_Unit_Port_1, Cal_Unit_Port_2, Cal_Unit_Port_3, Cal_Unit_Port_4, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates or deactivates the calibration mode where the raw measurement data of the standards is stored after the calibration is completed. The setting is valid for the current calibration, where it overwrites the global setting ([SENSe&lt;Ch&gt;:]CORRection:COLLect[:ACQuire]:RSAVe:DEFault). A new calibration deletes the calibration data acquired in previous calibrations.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect[:ACQuire]:RSAVe &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Keep_Meas_Data">
        /// This control keeps measurement data on or off.  
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationDataCurrentState(int Channel, bool Keep_Meas_Data)
        {
            int pInvokeResult = PInvoke.SetCalibrationDataCurrentState(this._handle, Channel, System.Convert.ToUInt16(Keep_Meas_Data));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the calibration mode.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect[:ACQuire]:RSAVe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Keep_Meas_Data">
        /// This control returns the state of the calibration mode.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationDataCurrentState(int Channel, out bool Keep_Meas_Data)
        {
            ushort Keep_Meas_DataAsUShort;
            int pInvokeResult = PInvoke.GetCalibrationDataCurrentState(this._handle, Channel, out Keep_Meas_DataAsUShort);
            Keep_Meas_Data = System.Convert.ToBoolean(Keep_Meas_DataAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function activates or deactivates the calibration mode where the raw measurement data of the standards is stored after the calibration is completed. The setting remains valid for all subsequent calibrations until it is changed explicitly. A new calibration deletes the calibration data acquired in previous calibrations.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect[:ACQuire]:RSAVe:DEFault &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Keep_Meas_Data">
        /// This control keeps measurement data on or off.  
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationDataDefaultState(int Channel, bool Keep_Meas_Data)
        {
            int pInvokeResult = PInvoke.SetCalibrationDataDefaultState(this._handle, Channel, System.Convert.ToUInt16(Keep_Meas_Data));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the calibration mode.
        /// 
        /// Note(s):
        /// 
        /// (1) For some measurements the default set timeout can be insufficient. To set higher timeout use function rszvb_setTimeOut.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect[:ACQuire]:RSAVe:DEFault?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Keep_Meas_Data">
        /// This control returns the state of the calibration mode.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationDataDefaultState(int Channel, out bool Keep_Meas_Data)
        {
            ushort Keep_Meas_DataAsUShort;
            int pInvokeResult = PInvoke.GetCalibrationDataDefaultState(this._handle, Channel, out Keep_Meas_DataAsUShort);
            Keep_Meas_Data = System.Convert.ToBoolean(Keep_Meas_DataAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function exports the calibration unit's characterization data as Touchstone files into the given directory.
        /// 
        /// Remote-control command(s):
        /// :MMEMory:AKAL:FACTory:CONVersion &lt;file_name&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// This control sets the file name
        /// 
        /// Valid Values:
        /// no range checking
        /// 
        /// Default Value:
        /// ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ExpCharDataTouchstoneFile(string File_Name)
        {
            int pInvokeResult = PInvoke.ExpCharDataTouchstoneFile(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the user-defined connector types.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CONNection  '&lt;conn_name&gt;', TEM | WGUide, GENDer | NGENder, &lt;perm_rel&gt;, &lt;imped&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Connector_Name">
        /// Name of the user-defined connectors.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Propagation_Mode">
        /// This control selects a propagation mode.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTION_MODE_TEM     (0) - Transverse electric
        /// RSZVB_CONNECTION_MODE_WGUIDE  (1) - Waveguide
        /// 
        /// Default Value: RSZVB_CONNECTION_MODE_TEM (0)
        /// </param>
        /// <param name="Connector_Type">
        /// This control selects a connector type.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTION_CONNECTOR_GENDER   (0) - Polar
        /// RSZVB_CONNECTION_CONNECTOR_NGENDER  (1) - Sexless
        /// 
        /// Default Value: RSZVB_CONNECTION_CONNECTOR_GENDER (0)
        /// </param>
        /// <param name="Relative_Permittivity">
        /// This control sets the relative permittivity.
        /// 
        /// Valid Range: 0.0000000001 to 1000
        /// 
        /// Default Value: 0.0 
        /// </param>
        /// <param name="Impedance">
        /// This control sets the reference impedance or cutoff frequency.
        /// 
        /// Valid Range: 
        ///      Ref. impedance:   1.0e-6 Ohms to 1000 MOhms
        ///      Cutoff frequency:       0 Hz to 1000 GHz
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// (1) For TEM type connectors: reference impedance in Ohms (without unit)
        /// 
        /// (2) For WGUide type connectors: cutoff frequency in Hz (without unit)
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationConnector(int Channel, string Connector_Name, int Propagation_Mode, int Connector_Type, double Relative_Permittivity, double Impedance)
        {
            int pInvokeResult = PInvoke.SetCalibrationConnector(this._handle, Channel, Connector_Name, Propagation_Mode, Connector_Type, Relative_Permittivity, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the user-defined connector types.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CONNection? '&lt;conn_name&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Connector_Name">
        /// Name of the user-defined connectors.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <param name="Propagation_Mode">
        /// This control returns a propagation mode.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTION_MODE_TEM     (0) - Transverse electric
        /// RSZVB_CONNECTION_MODE_WGUIDE  (1) - Waveguide
        /// </param>
        /// <param name="Connector_Type">
        /// This control returns a connector type.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTION_CONNECTOR_GENDER   (0) - Polar
        /// RSZVB_CONNECTION_CONNECTOR_NGENDER  (1) - Sexless
        /// </param>
        /// <param name="Relative_Permittivity">
        /// This control returns the relative permittivity.
        /// 
        /// Valid Range: 0.0000000001 to 1000
        ///  
        /// </param>
        /// <param name="Impedance">
        /// This control returns the reference impedance or cutoff frequency.
        /// 
        /// Valid Range: 
        ///      Ref. impedance:   1.0e-6 Ohms to 1000 MOhms
        ///      Cutoff frequency:       0 Hz to 1000 GHz
        /// 
        /// Notes:
        /// (1) For TEM type connectors: reference impedance in Ohms (without unit)
        /// 
        /// (2) For WGUide type connectors: cutoff frequency in Hz (without unit)
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationConnector(int Channel, string Connector_Name, out int Propagation_Mode, out int Connector_Type, out double Relative_Permittivity, out double Impedance)
        {
            int pInvokeResult = PInvoke.GetCalibrationConnector(this._handle, Channel, Connector_Name, out Propagation_Mode, out Connector_Type, out Relative_Permittivity, out Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a list of the connector types of all calibration kits in use.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CONNection:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Catalog">
        /// Response is a string parameter with comma-separated list of the connector types of all calibration kits in use. 
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationConnectorCatalog(System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.CalibrationConnectorCatalog(this._handle, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes a user-defined connector type named '&lt;conn_name&gt;'.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CONNection:DELete '&lt;conn_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Connector_Name">
        /// Name of the user-defined connectors.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteCalibrationConnector(int Channel, string Connector_Name)
        {
            int pInvokeResult = PInvoke.DeleteCalibrationConnector(this._handle, Channel, Connector_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries date and time of the channel's calibration.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:DATE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines the size of array passed to argument 'Calibration Kit Name'.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Calibration_Date">
        /// This control returns the name of calibration kit.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationDate(int Channel, int Buffer_Size, System.Text.StringBuilder Calibration_Date)
        {
            int pInvokeResult = PInvoke.GetCalibrationDate(this._handle, Channel, Buffer_Size, Calibration_Date);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries state of the channel's calibration.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:SSTate?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Calibration_State">
        /// This control returns the state of the channel's calibration.
        /// 
        /// Returned Values:
        /// RSZVB_CALSTATE_CAL    (0) - CAL
        /// RSZVB_CALSTATE_CAI    (1) - CAI
        /// RSZVB_CALSTATE_CA     (2) - CA?
        /// RSZVB_CALSTATE_CAV    (3) - CAV
        /// RSZVB_CALSTATE_CALOFF (4) - CAL OFF
        /// RSZVB_CALSTATE_NONE   (5) - None
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationState(int Channel, out int Calibration_State)
        {
            int pInvokeResult = PInvoke.GetCalibrationState(this._handle, Channel, out Calibration_State);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the parameters of the channel's calibration
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:DATA:PARameter?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Frequency_Start">
        /// This control returns Frequency Start value.
        /// </param>
        /// <param name="Frequency_Stop">
        /// This control returns Frequency Stop value.
        /// </param>
        /// <param name="Number_Of_Points">
        /// This control returns Number Of Points.
        /// </param>
        /// <param name="Internal_Signal_Source_Power">
        /// This control returns Initial Signal Source Power value.
        /// </param>
        /// <param name="Sweep_Type">
        /// This control returns Sweep Type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationDataParameters(int Channel, out double Frequency_Start, out double Frequency_Stop, out int Number_Of_Points, out double Internal_Signal_Source_Power, out int Sweep_Type)
        {
            int pInvokeResult = PInvoke.GetCalibrationDataParameters(this._handle, Channel, out Frequency_Start, out Frequency_Stop, out Number_Of_Points, out Internal_Signal_Source_Power, out Sweep_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the calibration unit with given address as active calibration unit.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:COMMunicate:RDEVice:AKAL:ADDRess
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_Unit">
        /// This control sets the active calibration unit.
        /// 
        /// Valid Values:
        /// no range checking
        /// 
        /// Default Value:
        /// ""
        /// 
        /// Note:
        /// Values are set as string like 'ZV-Z51::10001'
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetActiveCalibrationUnit(string Calibration_Unit)
        {
            int pInvokeResult = PInvoke.SetActiveCalibrationUnit(this._handle, Calibration_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns he type and address of the active calibration unit.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:COMMunicate:RDEVice:AKAL:ADDRess?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines the size of array passed to argument 'Calibration Kit Name'.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Calibration_Unit">
        /// This control returns the type and address of all calibration units connected to the VNA.
        /// 
        /// 
        /// Note:
        /// (1) At this time there are 3 different types of calibration units available:
        /// 
        ///     ZV-Z51            4-Port up to 8 GHz
        ///     ZV-Z52            4-Port up to 24 GHz
        ///     ZV-Z58            8-Port up to 8 GHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetActiveCalibrationUnit(int Buffer_Size, System.Text.StringBuilder Calibration_Unit)
        {
            int pInvokeResult = PInvoke.GetActiveCalibrationUnit(this._handle, Buffer_Size, Calibration_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the type and address of all calibration units connected to the VNA. 
        /// 
        /// Remote-control command(s):
        /// :SYSTem:COMMunicate:RDEVice:AKAL:ADDRess:ALL?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines the size of array passed to argument 'Calibration Kit Name'.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Calibration_Unit">
        /// This control returns the type and address of all calibration units connected to the VNA.
        /// 
        /// 
        /// Note:
        /// (1) At this time there are 3 different types of calibration units available:
        /// 
        ///     ZV-Z51            4-Port up to 8 GHz
        ///     ZV-Z52            4-Port up to 24 GHz
        ///     ZV-Z58            8-Port up to 8 GHz
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAllCalibrationUnits(int Buffer_Size, System.Text.StringBuilder Calibration_Unit)
        {
            int pInvokeResult = PInvoke.GetAllCalibrationUnits(this._handle, Buffer_Size, Calibration_Unit);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines calibration unit standard.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:COMMunicate:AKAL:CONNection THRough | OPEN | SHORt | MATCh,&lt;port_number&gt;{,&lt;port_number&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Standard">
        /// This control selects a calibration unit standard
        /// 
        /// Valid Values:
        /// RSZVB_CALUNIT_STD_THR  (0) - Through
        /// RSZVB_CALUNIT_STD_OPEN (1) - Open
        /// RSZVB_CALUNIT_STD_SHOR (2) - Short
        /// RSZVB_CALUNIT_STD_MATC (3) - Match
        /// 
        /// Default Value: RSZVB_CALUNIT_STD_THR (0)
        /// 
        /// Notes:
        /// (1) The following standards are available:
        ///    Through      Through Connection
        ///    Open         open
        ///    Short        short circuit
        ///    Match        broadband termination
        /// </param>
        /// <param name="Port_1">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port_2">
        /// Port number.
        /// 
        /// Valid Range: &gt;= 0
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) If the value is set to zero, the parameter is ignored.
        /// </param>
        /// <returns>
        /// This control contains the status code returned by the function call.
        /// 
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///         0  No error (the call was successful).
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0002  Parameter 2 (Channel) out of range.
        /// BFFC0003  Parameter 3 (Function) out of range.
        /// BFFC0004  Parameter 4 (State) out of range.
        /// 
        /// BFFC0803  Error Interpreting the instrument's response.
        /// BFFC0901  Channel is not displayed.
        /// BFFC09F0  Instrument status error.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureCalibrationUnitStandard(int Standard, int Port_1, int Port_2)
        {
            int pInvokeResult = PInvoke.ConfigureCalibrationUnitStandard(this._handle, Standard, Port_1, Port_2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the factory calibration for a particular channel. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:FACTory[:STATe] &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Factory_Calibration">
        /// This control enables or disables the factory calibration.  
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFactoryCalibrationState(int Channel, bool Factory_Calibration)
        {
            int pInvokeResult = PInvoke.SetFactoryCalibrationState(this._handle, Channel, System.Convert.ToUInt16(Factory_Calibration));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the factory calibration state for a particular channel. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:FACTory[:STATe]?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Factory_Calibration">
        /// This control returns the factory calibration state.  
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFactoryCalibrationState(int Channel, out bool Factory_Calibration)
        {
            ushort Factory_CalibrationAsUShort;
            int pInvokeResult = PInvoke.GetFactoryCalibrationState(this._handle, Channel, out Factory_CalibrationAsUShort);
            Factory_Calibration = System.Convert.ToBoolean(Factory_CalibrationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the calibration kit to be used for a specified connector type.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:&lt;conn_type&gt;:SELect '&lt;Ckit_Name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Connector">
        /// This control selects a connector type.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTOR_KIT_N50   (0) - N 50 Ohm
        /// RSZVB_CONNECTOR_KIT_N75   (1) - N 75 Ohm
        /// RSZVB_CONNECTOR_KIT_PC7   (2) - PC 7
        /// RSZVB_CONNECTOR_KIT_PC35  (3) - PC 3.5
        /// RSZVB_CONNECTOR_KIT_PC292 (4) - 2.92 mm
        /// RSZVB_CONNECTOR_KIT_USER1 (5) - User 1
        /// RSZVB_CONNECTOR_KIT_USER2 (6) - User 2
        /// RSZVB_CONNECTOR_KIT_SMA   (7) - SMA
        /// 
        /// Default Value: RSZVB_CONNECTOR_KIT_N50 (0)
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control defines the name of calibration kit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationKit(int Connector, string Calibration_Kit_Name)
        {
            int pInvokeResult = PInvoke.SetCalibrationKit(this._handle, Connector, Calibration_Kit_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the calibration kit to be used for a specified connector type.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:&lt;conn_type&gt;:SELect?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Connector">
        /// This control selects a connector type.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTOR_KIT_N50   (0) - N 50 Ohm
        /// RSZVB_CONNECTOR_KIT_N75   (1) - N 75 Ohm
        /// RSZVB_CONNECTOR_KIT_PC7   (2) - PC 7
        /// RSZVB_CONNECTOR_KIT_PC35  (3) - PC 3.5
        /// RSZVB_CONNECTOR_KIT_PC292 (4) - 2.92 mm
        /// RSZVB_CONNECTOR_KIT_USER1 (5) - User 1
        /// RSZVB_CONNECTOR_KIT_USER2 (6) - User 2
        /// RSZVB_CONNECTOR_KIT_SMA   (7) - SMA
        /// 
        /// Default Value: RSZVB_CONNECTOR_KIT_N50 (0)
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines the size of array passed to argument 'Calibration Kit Name'.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control returns the name of calibration kit.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationKit(int Connector, int Buffer_Size, System.Text.StringBuilder Calibration_Kit_Name)
        {
            int pInvokeResult = PInvoke.GetCalibrationKit(this._handle, Connector, Buffer_Size, Calibration_Kit_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the calibration kit to be used for a specified connector type.
        /// 
        /// Note(s):
        /// 
        /// (1) The function is suitable for connector types with arbitrary, user-defined names. For standard connector types you can use the command [SENSe&lt;Ch&gt;:]CORRection:CKIT:&lt;conn_type&gt;:SELect (function rszvb_SetCalibrationKit)
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:SELect '&lt;conn_name&gt;', '&lt;ckit_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Connector">
        /// This control sets a user-defined connector type.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control defines the name of calibration kit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationKitUserConnectorType(string Connector, string Calibration_Kit_Name)
        {
            int pInvokeResult = PInvoke.SetCalibrationKitUserConnectorType(this._handle, Connector, Calibration_Kit_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the calibration kit to be used for a specified connector type.
        /// 
        /// Note(s):
        /// 
        /// (1) The function is suitable for connector types with arbitrary, user-defined names. For standard connector types you can use the command [SENSe&lt;Ch&gt;:]CORRection:CKIT:&lt;conn_type&gt;:SELect? (function rszvb_GetCalibrationKit)
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:SELect? '&lt;conn_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Connector">
        /// This control sets a user-defined connector type.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines the size of array passed to argument 'Calibration Kit Name'.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control returns the name of calibration kit.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationKitUserConnectorType(string Connector, int Buffer_Size, System.Text.StringBuilder Calibration_Kit_Name)
        {
            int pInvokeResult = PInvoke.GetCalibrationKitUserConnectorType(this._handle, Connector, Buffer_Size, Calibration_Kit_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a list of all cal kits for a given connector type.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:CATalog? '&lt;Conn_Name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Connector_Name">
        /// This control sets the name of the connector type. Use function rszvb_CalibrationConnectorCatalog to query connector names.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Catalog">
        /// Response is a string parameter with comma-separated list of all cal kits for a given connector type. 
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationKitCatalog(string Connector_Name, System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.CalibrationKitCatalog(this._handle, Connector_Name, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads cal kit data from a specified ZVR cal kit file.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:INSTall '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control defines the name of calibration kit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ImportZVRCalibrationKit(string Calibration_Kit_Name)
        {
            int pInvokeResult = PInvoke.ImportZVRCalibrationKit(this._handle, Calibration_Kit_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the parameters of a calibration standard &lt;std_type&gt; for a specified connector type &lt;conn_type&gt;. A particular physical standard can be selected by specifying the name of the calibration kit and its serial number.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:&lt;conn_type&gt;:&lt;std_type&gt; '&lt;Ckit_Name&gt;','&lt;Std_No&gt;',&lt;Min_Freq&gt;,&lt;Max_Freq&gt;,&lt;El_Length&gt;,&lt;Loss&gt;,&lt;C0&gt; | &lt;L0&gt;,&lt;C1&gt; | &lt;L1&gt;,&lt;C2&gt; | &lt;L2&gt;,&lt;C3&gt; | &lt;L3&gt;, OPEN | SHORt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Connector">
        /// This control selects a connector type.
        /// 
        /// Valid Values:
        /// RSZVB_CONNECTOR_KIT_N50   (0) - N 50 Ohm
        /// RSZVB_CONNECTOR_KIT_N75   (1) - N 75 Ohm
        /// RSZVB_CONNECTOR_KIT_PC7   (2) - PC 7
        /// RSZVB_CONNECTOR_KIT_PC35  (3) - PC 3.5
        /// RSZVB_CONNECTOR_KIT_PC292 (4) - 2.92 mm
        /// RSZVB_CONNECTOR_KIT_USER1 (5) - User 1
        /// RSZVB_CONNECTOR_KIT_USER2 (6) - User 2
        /// RSZVB_CONNECTOR_KIT_SMA   (7) - SMA
        /// 
        /// Default Value: RSZVB_CONNECTOR_KIT_N50 (0)
        /// </param>
        /// <param name="Standard">
        /// This control selects a standard from the selected calibration kit.(N50, N75, SMA, PC7, PC3.5)
        /// 
        /// Valid Values:
        /// RSZVB_CALSTD_MMTH   (0) - Through (MM)
        /// RSZVB_CALSTD_FFTH   (1) - Through (FF)
        /// RSZVB_CALSTD_MFTH   (2) - Through (MF)
        /// RSZVB_CALSTD_MMLI   (3) - Line 1 (MM)
        /// RSZVB_CALSTD_FFLI   (4) - Line 1 (FF)
        /// RSZVB_CALSTD_MFLI   (5) - Line 1 (MF)
        /// RSZVB_CALSTD_OSH    (6) - Offset short (sexless)
        /// RSZVB_CALSTD_MOSH   (7) - Offset short 1 (M)
        /// RSZVB_CALSTD_FOSH   (8) - Offset short 1 (F)
        /// RSZVB_CALSTD_MMAT   (9) - Attenuation (MM)
        /// RSZVB_CALSTD_FFAT   (10) - Attenuation (FF)
        /// RSZVB_CALSTD_MFAT   (11) - Attenuation (MF)
        /// RSZVB_CALSTD_MMSN   (12) - Symm Network (MM)
        /// RSZVB_CALSTD_FFSN   (13) - Symm Network (FF)
        /// RSZVB_CALSTD_MFSN   (14) - Symm Network (MF)
        /// RSZVB_CALSTD_MOP    (15) - Open (M)
        /// RSZVB_CALSTD_FOP    (16) - Open (F)
        /// RSZVB_CALSTD_MSH    (17) - Short (M)
        /// RSZVB_CALSTD_FSH    (18) - Short (F)
        /// RSZVB_CALSTD_MREF   (19) - Reflect (M)
        /// RSZVB_CALSTD_FREF   (20) - Reflect (F)
        /// RSZVB_CALSTD_MMTC   (21) - Match (M)
        /// RSZVB_CALSTD_FMTC   (22) - Match (F)
        /// RSZVB_CALSTD_MSM    (23) - Sliding Match (M)
        /// RSZVB_CALSTD_FSM    (24) - Sliding Match (F)
        /// RSZVB_CALSTD_MMLI_2 (25) - Line 2 (MM)
        /// RSZVB_CALSTD_FFLI_2 (26) - Line 2 (FF)
        /// RSZVB_CALSTD_MFLI_2 (27) - Line 2 (MF)
        /// RSZVB_CALSTD_MMLI_3 (28) - Line 3 (MM)
        /// RSZVB_CALSTD_FFLI_3 (29) - Line 3 (FF)
        /// RSZVB_CALSTD_MFLI_3 (30) - Line 3 (MF)
        /// RSZVB_CALSTD_MOSH_2 (31) - Offset short 2 (M)
        /// RSZVB_CALSTD_FOSH_2 (32) - Offset short 2 (F)
        /// RSZVB_CALSTD_MOSH_3 (33) - Offset short 3 (M)
        /// RSZVB_CALSTD_FOSH_3 (34) - Offset short 3 (F)
        /// 
        /// Default Value: RSZVB_CALSTD_MMTH (0)
        /// 
        /// Notes:
        /// 
        /// 1) Two-port standards are either MM = connector/connector, 
        /// FF = socket/socket or MF = connector/socket, one port standard are either M = connector or F = socket.
        /// 
        /// 2) The following standards are available:
        ///    Through       Through Connection
        ///    Line 1        Line 1 for TRL-procedure
        ///    Offset Short  For user-defined connector types only
        ///    Attenuation   matched attenuator pad
        ///    SNetwork      reflection symmetric network
        ///    Open          open
        ///    Short         short circuit
        ///    Reflect       unknown one-port standard
        ///    Match         broadband termination
        ///    Sliding Match Sliding Match
        ///    Line 2        Line 2 for TRL-procedure
        ///    Line 3        Line 3 for TRL-procedure
        /// </param>
        /// <param name="Kit">
        /// This control specifies calibration kit name.
        /// 
        /// Valid Range: string up to 10 characters
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Serial_Number">
        /// This control specifies serial number of the standard.
        /// 
        /// Valid range: string up to 15 characters.
        /// 
        /// Default Value: ""
        /// 
        /// 
        /// </param>
        /// <param name="Min__Freq__Hz_">
        /// This control specifies min. frequency of the standard.
        /// 
        /// Valid Range: not checked
        /// </param>
        /// <param name="Max__Freq__Hz_">
        /// This control specifies max. frequency of the standard.
        /// 
        /// Valid Range: not checked
        /// </param>
        /// <param name="Length__mm_">
        /// This control specifies electrical length of the standard.
        /// 
        /// Valid Range: not checked
        /// 
        /// Notes:
        /// 
        /// (1) This control is not valid for Match and Attenuation standards.
        /// </param>
        /// <param name="Loss">
        /// This control specifies losses in dB/GHz.
        /// 
        /// Valid Range: not checked
        /// 
        /// Notes:
        /// 
        /// (1) This control is not valid for Match, Attenuation, Symm. Network and Reflect standards.
        /// </param>
        /// <param name="C0_L0">
        /// This control specifies constant parasitic capacitance/inductance.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) This control is only valid for Open, Short, Symm. Network and Reflect standards.
        /// </param>
        /// <param name="C1_L1">
        /// This control specifies polynomial coefficient 1 for parasitic capacitance/inductance.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) This control is only valid for Open, Short, Symm. Network and Reflect standards.
        /// </param>
        /// <param name="C2_L2">
        /// This control specifies polynomial coefficient 2 for parasitic capacitance/inductance.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) This control is only valid for Open, Short, Symm. Network and Reflect standards.
        /// </param>
        /// <param name="C3_L3">
        /// This control specifies polynomial coefficient 3 for parasitic capacitance/inductance.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: 0.0
        /// 
        /// Notes:
        /// 
        /// (1) This control is only valid for Open, Short, Symm. Network and Reflect standards.
        /// </param>
        /// <param name="Approximation">
        /// This control specifies approximate modeling of the standard.
        /// 
        /// Valid Values:
        /// RSZVB_OPEN  (0) - Open
        /// RSZVB_SHORT (1) - Short
        /// 
        /// Default Value: RSZVB_OPEN (0)
        /// 
        /// Notes:
        /// 
        /// (1) This control is only valid for Symm. Network and Reflect standards.
        /// </param>
        /// <returns>
        /// This control contains the status code returned by the function call.
        /// 
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///         0  No error (the call was successful).
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0002  Parameter 2 (Channel) out of range.
        /// BFFC0003  Parameter 3 (Function) out of range.
        /// BFFC0004  Parameter 4 (State) out of range.
        /// 
        /// BFFC0803  Error Interpreting the instrument's response.
        /// BFFC0901  Channel is not displayed.
        /// BFFC09F0  Instrument status error.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int ConfigureCalibrationStandard(int Connector, int Standard, string Kit, string Serial_Number, double Min__Freq__Hz_, double Max__Freq__Hz_, double Length__mm_, double Loss, double C0_L0, double C1_L1, double C2_L2, double C3_L3, int Approximation)
        {
            int pInvokeResult = PInvoke.ConfigureCalibrationStandard(this._handle, Connector, Standard, Kit, Serial_Number, Min__Freq__Hz_, Max__Freq__Hz_, Length__mm_, Loss, C0_L0, C1_L1, C2_L2, C3_L3, Approximation);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a list of all standards in a given calibration kit.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:STANdard:CATalog? '&lt;Ckit_Name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control sets the name of the cal kit. Use function rszvb_CalibrationKitCatalog to query cal kit names. 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Catalog">
        /// Response is a string parameter with comma-separated list of all standards in a given calibration kit. 
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int CalibrationStandardsCatalog(string Calibration_Kit_Name, System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.CalibrationStandardsCatalog(this._handle, Calibration_Kit_Name, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function characterizes the active calibration unit and saves the cal kit file on the calibration unit's internal     flash memory (relative path) or mass storage (absolute path) as a user cal kit. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:AUTO:CKIT '&lt;File_Name&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// This control defines relative or absolute file name.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveCalibrationKit(string File_Name)
        {
            int pInvokeResult = PInvoke.SaveCalibrationKit(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads cal kit data for a specific connector type, cal kit, and calibration standard from a specified Touchstone file, assigning a label for the cal data. A restriction on the port assignment may be defined in addition.
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:CKIT:SDATa '&lt;conn_name&gt;', '&lt;ckit_name&gt;', MMTHrough | MFTHrough | FFTHrough | MMLine | MMLINE1 | MMLINE2 | MMLINE3 | MFLine | MFLINE1 | MFLINE2 | MFLINE3 | FFLine | FFLINE1 | FFLINE2 | FFLINE3 | MMATten | MFATten | FFATten | MMSNetwork | MFSNetwork | FFSNetwork | MOPen | FOPen | MSHort | FSHort | MOSHort | MOSHORT1 | MOSHORT2 | MOSHORT3 | FOSHort | FOSHORT1 | FOSHORT2 | FOSHORT3 | MREFlect | FREFlect | MMTCh | FMTCh | MSMatch | FSMatch, '&lt;stdlabel_name&gt;', '&lt;file_name&gt;' [,&lt;port1_no&gt;][,&lt;port2_no&gt;]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Connector_Name">
        /// This control specifies the name of the connector type.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control specifies the name of a calibration kit available on the analyzer.
        /// 
        /// Valid range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// 
        /// </param>
        /// <param name="Standard">
        /// This control selects a calibration standard from a specified Touchstone file.
        /// 
        /// Valid Values:
        /// RSZVB_CALSTD_MMTH   (0) - Through (MM)
        /// RSZVB_CALSTD_FFTH   (1) - Through (FF)
        /// RSZVB_CALSTD_MFTH   (2) - Through (MF)
        /// RSZVB_CALSTD_MMLI   (3) - Line 1 (MM)
        /// RSZVB_CALSTD_FFLI   (4) - Line 1 (FF)
        /// RSZVB_CALSTD_MFLI   (5) - Line 1 (MF)
        /// RSZVB_CALSTD_MOSH   (7) - Offset short (M)
        /// RSZVB_CALSTD_FOSH   (8) - Offset short (F)
        /// RSZVB_CALSTD_MMAT   (9) - Attenuation (MM)
        /// RSZVB_CALSTD_FFAT   (10) - Attenuation (FF)
        /// RSZVB_CALSTD_MFAT   (11) - Attenuation (MF)
        /// RSZVB_CALSTD_MMSN   (12) - Symm Network (MM)
        /// RSZVB_CALSTD_FFSN   (13) - Symm Network (FF)
        /// RSZVB_CALSTD_MFSN   (14) - Symm Network (MF)
        /// RSZVB_CALSTD_MOP    (15) - Open (M)
        /// RSZVB_CALSTD_FOP    (16) - Open (F)
        /// RSZVB_CALSTD_MSH    (17) - Short (M)
        /// RSZVB_CALSTD_FSH    (18) - Short (F)
        /// RSZVB_CALSTD_MREF   (19) - Reflect (M)
        /// RSZVB_CALSTD_FREF   (20) - Reflect (F)
        /// RSZVB_CALSTD_MMTC   (21) - Match (M)
        /// RSZVB_CALSTD_FMTC   (22) - Match (F)
        /// RSZVB_CALSTD_MSM    (23) - Sliding Match (M)
        /// RSZVB_CALSTD_FSM    (24) - Sliding Match (F)
        /// RSZVB_CALSTD_MMLI_2 (25) - Line 2 (MM)
        /// RSZVB_CALSTD_FFLI_2 (26) - Line 2 (FF)
        /// RSZVB_CALSTD_MFLI_2 (27) - Line 2 (MF)
        /// RSZVB_CALSTD_MMLI_3 (28) - Line 3 (MM)
        /// RSZVB_CALSTD_FFLI_3 (29) - Line 3 (FF)
        /// RSZVB_CALSTD_MFLI_3 (30) - Line 3 (MF)
        /// RSZVB_CALSTD_MOSH_2 (31) - Offset short 2 (M)
        /// RSZVB_CALSTD_FOSH_2 (32) - Offset short 2 (F)
        /// RSZVB_CALSTD_MOSH_3 (33) - Offset short 3 (M)
        /// RSZVB_CALSTD_FOSH_3 (34) - Offset short 3 (F)
        /// 
        /// Default Value: RSZVB_CALSTD_MMTH (0)
        /// 
        /// Notes:
        /// 
        /// 1) Two-port standards are either MM = connector/connector, 
        /// FF = socket/socket or MF = connector/socket, one port standard are either M = connector or F = socket.
        /// 
        /// 2) The following standards are available:
        ///    Through        Through Connection
        ///    Line           Line for TRL-procedure
        ///    Offset Short   For user-defined connector types only
        ///    Attenuation    Matched attenuator pad
        ///    SNetwork       Reflection symmetric network
        ///    Open           Open
        ///    Short          Short circuit
        ///    Reflect        Unknown one-port standard
        ///    Match          Broadband termination
        ///    Sliding Match  Sliding load
        /// </param>
        /// <param name="Calibration_Kit_Label">
        /// This control a label for the cal kit data. An empty string means that no label is defined.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the Touchstone file to be loaded. A *.s1p file must be used for one-port standards, a *.s2p file for two-port standards. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?.
        /// 
        /// Valid range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// 
        /// </param>
        /// <param name="Port_Number_1">
        /// This control specifies the port assignment: One port number for one-port standards, two port number for two-port standards. If the port numbers are omitted, the cal kit data is valid for all ports.
        /// 
        /// Valid Range: 1 to number of instrument ports
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Port_Number_2">
        /// This control specifies the port assignment: One port number for one-port standards, two port number for two-port standards. If the port numbers are omitted, the cal kit data is valid for all ports.
        /// 
        /// Valid Range: 1 to number of instrument ports
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// This control contains the status code returned by the function call.
        /// 
        /// Status Codes:
        /// 
        /// Status    Description
        /// -------------------------------------------------
        ///         0  No error (the call was successful).
        /// 
        /// 3FFF0005  The specified termination character was read.
        /// 3FFF0006  The specified number of bytes was read.
        /// 
        /// BFFC0002  Parameter 2 (Channel) out of range.
        /// BFFC0003  Parameter 3 (Function) out of range.
        /// BFFC0004  Parameter 4 (State) out of range.
        /// 
        /// BFFC0803  Error Interpreting the instrument's response.
        /// BFFC0901  Channel is not displayed.
        /// BFFC09F0  Instrument status error.
        /// 
        /// BFFF0000  Miscellaneous or system error occurred.
        /// BFFF000E  Invalid session handle.
        /// BFFF0015  Timeout occurred before operation could complete.
        /// BFFF0034  Violation of raw write protocol occurred.
        /// BFFF0035  Violation of raw read protocol occurred.
        /// BFFF0036  Device reported an output protocol error.
        /// BFFF0037  Device reported an input protocol error.
        /// BFFF0038  Bus error occurred during transfer.
        /// BFFF003A  Invalid setup (attributes are not consistent).
        /// BFFF005F  No listeners condition was detected.
        /// BFFF0060  This interface is not the controller in charge.
        /// BFFF0067  Operation is not supported on this session.
        /// </returns>
        public int LoadCalibrationKit(string Connector_Name, string Calibration_Kit_Name, int Standard, string Calibration_Kit_Label, string File_Name, int Port_Number_1, int Port_Number_2)
        {
            int pInvokeResult = PInvoke.LoadCalibrationKit(this._handle, Connector_Name, Calibration_Kit_Name, Standard, Calibration_Kit_Label, File_Name, Port_Number_1, Port_Number_2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function assigns a label to an imported or user-defined calibration kit.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:LABel '&lt;ckit_name&gt;', '&lt;label&gt;' 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control defines the name of the imported or user-defined  calibration kit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Label">
        /// This control defines the label of the calibration kit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetCalibrationKitLabel(string Calibration_Kit_Name, string Label)
        {
            int pInvokeResult = PInvoke.SetCalibrationKitLabel(this._handle, Calibration_Kit_Name, Label);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a label of an imported or user-defined calibration kit.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:LABel? '&lt;ckit_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control defines the name of the imported or user-defined  calibration kit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Label">
        /// This control returns the label of the calibration kit.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetCalibrationKitLabel(string Calibration_Kit_Name, System.Text.StringBuilder Label)
        {
            int pInvokeResult = PInvoke.GetCalibrationKitLabel(this._handle, Calibration_Kit_Name, Label);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes an imported or user-defined cal kit.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:CKIT:DELete '&lt;ckit_name&gt;' 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Calibration_Kit_Name">
        /// This control defines the name of calibration kit.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteCalibrationKit(string Calibration_Kit_Name)
        {
            int pInvokeResult = PInvoke.DeleteCalibrationKit(this._handle, Calibration_Kit_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads cal kit data from a specified NWA cal kit file. 
        /// 
        /// Notes:
        /// (1) The loaded file must be a NWA-specific cal kit file with the extension *.calkit. ZVR cal kit files can be imported using the [SENSe&lt;Ch&gt;:]CORRection:CKIT:INSTall command. Agilent cal kit files can be imported manually and converted into *.calkit files.  
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:CKIT '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the cal kit file to be loaded. If no path is specified the analyzer searches the current directory, to be queried with MMEMory:CDIRectory?.  
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ImportKit(string File_Name)
        {
            int pInvokeResult = PInvoke.ImportKit(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the Directory for Additionally Available Cal Kits and Conn Types. All cal kit files in the special directory will be (re-)loaded automatically every time the NWA application is started.
        /// 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:CKIT:UDIRectory '&lt;directory&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Directory">
        /// String parameter to specify the directory path. The directory can be created separately (MMEMory:MDIRectory). An empty string means that no cal kit files will be loaded.  
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AdditionalDirectoryCalibrationKit(string Directory)
        {
            int pInvokeResult = PInvoke.AdditionalDirectoryCalibrationKit(this._handle, Directory);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores the data of a calibration kit to a specified file. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:CKIT '&lt;kit_name&gt;', '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Kit_Name">
        /// This control specifies the name of a user-defined calibration kit available on the analyzer. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?.  
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the cal kit file to be created. The file is a NWA-specific cal kit file with the extension *.calkit.  
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ExportKit(string Kit_Name, string File_Name)
        {
            int pInvokeResult = PInvoke.ExportKit(this._handle, Kit_Name, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the offset parameters for all test ports to zero.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:OFFSet&lt;port_no&gt;:STATe OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ResetOffsets(int Channel)
        {
            int pInvokeResult = PInvoke.ResetOffsets(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether any of the offset parameters are different from zero.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:OFFSet&lt;port_no&gt;:STATe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Offsets">
        /// This control returns whether any of the offset parameters are different from zero.
        /// 
        /// Valid Values:
        /// 0 - all length offsets are zero
        /// 1 - at least one length offset is different from zero
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryResetOffsets(int Channel, out int Offsets)
        {
            int pInvokeResult = PInvoke.QueryResetOffsets(this._handle, Channel, out Offsets);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the offset parameter for test port &lt;Port&gt; as an electrical length.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:ELENgth
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Electrical_Length">
        /// This control defines the offset parameter for test port &lt;Port&gt; as an electrical length.
        /// 
        /// Valid Range: -3.4028234664E+038 m to +3.4028234664E+038 m
        /// 
        /// Default Value: 0.0 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetElectricalLength(int Channel, int Port, double Electrical_Length)
        {
            int pInvokeResult = PInvoke.SetElectricalLength(this._handle, Channel, Port, Electrical_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the offset parameter for test port &lt;Port&gt; as an electrical length.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:ELENgth?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Electrical_Length">
        /// This control returns the offset parameter for test port &lt;Port&gt; as an electrical length.
        /// 
        /// Valid Range: -3.4028234664E+038 m to +3.4028234664E+038 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetElectricalLength(int Channel, int Port, out double Electrical_Length)
        {
            int pInvokeResult = PInvoke.GetElectricalLength(this._handle, Channel, Port, out Electrical_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures parameters of mechanical length.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:DISTance
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:DIELectric
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mechanical_Length">
        /// This control defines the offset parameter for test port &lt;Port&gt; as a mechanical length.
        /// 
        /// Valid Range: -3.402823466E+038 m to +3.4028234664E+038
        /// 
        /// Default Value: 0.0 m
        /// </param>
        /// <param name="Permittivity">
        /// This control defines the permittivity for the offset correction at test port &lt;Port&gt;.
        /// 
        /// Valid Range: 1 to +3.4028234664E+038
        /// 
        /// Default Value: 1.00062 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureMechanicalLength(int Channel, int Port, double Mechanical_Length, double Permittivity)
        {
            int pInvokeResult = PInvoke.ConfigureMechanicalLength(this._handle, Channel, Port, Mechanical_Length, Permittivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the offset parameter for test port &lt;Port&gt; as a mechanical length.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:DISTance
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mechanical_Length">
        /// This control defines the offset parameter for test port &lt;Port&gt; as a mechanical length.
        /// 
        /// Valid Range: -3.402823466E+038 m to +3.4028234664E+038
        /// 
        /// Default Value: 0.0 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMechanicalLength(int Channel, int Port, double Mechanical_Length)
        {
            int pInvokeResult = PInvoke.SetMechanicalLength(this._handle, Channel, Port, Mechanical_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the offset parameter for test port &lt;Port&gt; as a mechanical length.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:DISTance?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Mechanical_Length">
        /// This control returns the offset parameter for test port &lt;Port&gt; as a mechanical length.
        /// 
        /// Valid Range: -3.402823466E+038 m to +3.4028234664E+038
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMechanicalLength(int Channel, int Port, out double Mechanical_Length)
        {
            int pInvokeResult = PInvoke.GetMechanicalLength(this._handle, Channel, Port, out Mechanical_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the permittivity for the offset correction at test port &lt;Port&gt;.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:DIELectric
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Permittivity">
        /// This control defines the permittivity for the offset correction at test port &lt;Port&gt;.
        /// 
        /// Valid Range: 1 to +3.4028234664E+038
        /// 
        /// Default Value: 1.00062 m
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPermittivity(int Channel, int Port, double Permittivity)
        {
            int pInvokeResult = PInvoke.SetPermittivity(this._handle, Channel, Port, Permittivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the permittivity for the offset correction at test port &lt;Port&gt;.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:DIELectric?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Permittivity">
        /// This control returns the permittivity for the offset correction at test port &lt;Port&gt;.
        /// 
        /// Valid Range: 1 to +3.4028234664E+038
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPermittivity(int Channel, int Port, out double Permittivity)
        {
            int pInvokeResult = PInvoke.GetPermittivity(this._handle, Channel, Port, out Permittivity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures parameters of One-way Loss.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt; &lt;DC_loss&gt;
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:OFFSet &lt;ref_loss&gt;
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:FREQuency &lt;ref_frequency&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Loss_At_DC">
        /// This control defines the frequency-independent part (DC value) of the offset loss.
        /// 
        /// Valid Range: -200 dB to +200 dB 
        /// 
        /// Default Value: 0.0 dB
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 0.001 dB. 
        /// </param>
        /// <param name="Loss_At_Frequency">
        /// This control defines the offset loss at the reference frequency.
        /// 
        /// Valid Range: -200 dB to +200 dB 
        /// 
        /// Default Value: 0.0 dB
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 0.001 dB. 
        /// </param>
        /// <param name="Loss_Reference_Frequency">
        /// This control defines the reference frequency.
        /// 
        /// Valid Range: not checked - Frequency range of the analyzer model [Hz].  
        /// 
        /// Default Value: 1.0e+9 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 1 MHz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureLoss(int Channel, int Port, double Loss_At_DC, double Loss_At_Frequency, double Loss_Reference_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureLoss(this._handle, Channel, Port, Loss_At_DC, Loss_At_Frequency, Loss_Reference_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the frequency-independent part (DC value) of the offset loss.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt; &lt;DC_loss&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Loss_At_DC">
        /// This control defines the frequency-independent part (DC value) of the offset loss.
        /// 
        /// Valid Range: -200 dB to +200 dB 
        /// 
        /// Default Value: 0.0 dB
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 0.001 dB. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLossAtDC(int Channel, int Port, double Loss_At_DC)
        {
            int pInvokeResult = PInvoke.SetLossAtDC(this._handle, Channel, Port, Loss_At_DC);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency-independent part (DC value) of the offset loss.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Loss_At_DC">
        /// This control returns the frequency-independent part (DC value) of the offset loss.
        /// 
        /// Valid Range: -200 dB to +200 dB 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLossAtDC(int Channel, int Port, out double Loss_At_DC)
        {
            int pInvokeResult = PInvoke.GetLossAtDC(this._handle, Channel, Port, out Loss_At_DC);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the offset loss at the reference frequency ([SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:FREQuency).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:OFFSet &lt;ref_loss&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Loss_At_Frequency">
        /// This control defines the offset loss at the reference frequency.
        /// 
        /// Valid Range: -200 dB to +200 dB 
        /// 
        /// Default Value: 0.0 dB
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 0.001 dB. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLossAtFrequency(int Channel, int Port, double Loss_At_Frequency)
        {
            int pInvokeResult = PInvoke.SetLossAtFrequency(this._handle, Channel, Port, Loss_At_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the offset loss at the reference frequency ([SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:FREQuency).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:OFFSet?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Loss_At_Frequency">
        /// This control returns the offset loss at the reference frequency.
        /// 
        /// Valid Range: -200 dB to +200 dB
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLossAtFrequency(int Channel, int Port, out double Loss_At_Frequency)
        {
            int pInvokeResult = PInvoke.GetLossAtFrequency(this._handle, Channel, Port, out Loss_At_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the reference frequency for the frequency-dependent part of the offset loss ([SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:OFFSet).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:FREQuency &lt;ref_frequency&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Loss_Reference_Frequency">
        /// This control defines the reference frequency.
        /// 
        /// Valid Range: not checked - Frequency range of the analyzer model [Hz].  
        /// 
        /// Default Value: 1.0e+9 Hz
        /// 
        /// Note(s):
        /// 
        /// (1) The increment (UP/DOWN) is 1 MHz.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetLossReferenceFrequency(int Channel, int Port, double Loss_Reference_Frequency)
        {
            int pInvokeResult = PInvoke.SetLossReferenceFrequency(this._handle, Channel, Port, Loss_Reference_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the reference frequency for the frequency-dependent part of the offset loss ([SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:OFFSet).
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:FREQuency?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Loss_Reference_Frequency">
        /// This control returns the reference frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetLossReferenceFrequency(int Channel, int Port, out double Loss_Reference_Frequency)
        {
            int pInvokeResult = PInvoke.GetLossReferenceFrequency(this._handle, Channel, Port, out Loss_Reference_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the offset parameter for test port &lt;Port&gt; as a delay time.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;[:TIME]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delay">
        /// This control defines the offset parameter for test port &lt;Port&gt; as a delay time.
        /// 
        /// Valid Range: -3.4028234664E+038 s to +3.4028234664E+038 s
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDelay(int Channel, int Port, double Delay)
        {
            int pInvokeResult = PInvoke.SetDelay(this._handle, Channel, Port, Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the offset parameter for test port &lt;Port&gt; as a delay time.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;[:TIME]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Delay">
        /// This control returns the offset parameter for test port &lt;Port&gt; as a delay time.
        /// 
        /// Valid Range: -3.4028234664E+038 s to +3.4028234664E+038 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDelay(int Channel, int Port, out double Delay)
        {
            int pInvokeResult = PInvoke.GetDelay(this._handle, Channel, Port, out Delay);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns whether a direct fixture compensation has been carried out at port no. &lt;port_no&gt;. A direct fixture compensation resets the offset parameters to zero, the analyzer uses calculated transmission factors instead.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:OFFSet&lt;port_no&gt;:DFComp[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number.
        /// 
        /// Valid Range:
        /// &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Direct_Fixture_Compensation">
        /// This control returns direct fixture compensation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - no direct fixture compensation data used
        /// VI_TRUE  (1) - direct fixture compensation data used
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryDirectFixtureCompensation(int Channel, int Port, out bool Direct_Fixture_Compensation)
        {
            ushort Direct_Fixture_CompensationAsUShort;
            int pInvokeResult = PInvoke.QueryDirectFixtureCompensation(this._handle, Channel, Port, out Direct_Fixture_CompensationAsUShort);
            Direct_Fixture_Compensation = System.Convert.ToBoolean(Direct_Fixture_CompensationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the offset parameter for the active test port such that the residual delay of the active trace is minimized across the entire sweep range.
        /// 
        /// Note(s):
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:EDELay&lt;port_no&gt;:AUTO ONCE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AutoLength(int Channel, int Port)
        {
            int pInvokeResult = PInvoke.AutoLength(this._handle, Channel, Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function determines all offset parameters such that the residual group delay of the active trace (defined as the negative derivative of the phase response) is minimized and the measured loss is minimized as far as possible across the entire sweep range.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:LOSS&lt;port_no&gt;:AUTO ONCE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number of the offset-corrected channel.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number of the analyzer.
        /// 
        /// Valid Range: &gt; 0 
        /// 
        /// Default Value: 1
        /// 
        /// Note(s):
        /// 
        /// (1) This numeric suffix is ignored; the active port is determined by the active trace.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AutoLengthAndLoss(int Channel, int Port)
        {
            int pInvokeResult = PInvoke.AutoLengthAndLoss(this._handle, Channel, Port);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Starts a fixture compensation sweep in order to acquire measurement data for a test fixture that has its inner conductor terminated with the selected standards. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:FIXTure[:ACQuire] OPEN | SHORT,
        /// &lt;port_no&gt;{,&lt;port_no&gt;}
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Standard_Type">
        /// This control specifies type of circuit.
        /// 
        /// Valid Values:
        /// RSZVB_OPEN  (0) - Open
        /// RSZVB_SHORT (1) - Short
        /// 
        /// Default Value: RSZVB_OPEN (0)
        /// 
        /// </param>
        /// <param name="Array_Size">
        /// This control sets the array size of the Ports control array.
        /// 
        /// Valid Values:
        /// 1 to 4
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Ports">
        /// Port numbers of the analyzer. For an n-port fixture compensation (n = 1 to 4), n arbitrary (not necessarily consecutive) port numbers must be specified. 
        /// 
        /// Valid Range:
        /// array of 1, 2, 3 or 4 values
        /// 
        /// Default Value: none
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AcquireFixtureCompensationSweep(int Channel, int Standard_Type, int Array_Size, int[] Ports)
        {
            int pInvokeResult = PInvoke.AcquireFixtureCompensationSweep(this._handle, Channel, Standard_Type, Array_Size, Ports);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Prepares the analyzer for fixture compensation comprising a single or a series of fixture compensation sweeps. Previous compensation data is deleted.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:FIXTure:STARt
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StartFixtureCompensationSweep(int Channel)
        {
            int pInvokeResult = PInvoke.StartFixtureCompensationSweep(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Completes a fixture compensation, storing and applying the acquired data.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:FIXTure:SAVE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveFixtureCompensationData(int Channel)
        {
            int pInvokeResult = PInvoke.SaveFixtureCompensationData(this._handle, Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures Auto Length and Loss.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:FIXTure:LMParameter:LOSS[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Auto_Length_and_Loss">
        /// This control specifies an Auto Length or an Auto Length and Loss calculation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) -  On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// Note(s):
        /// 
        /// (1) On: Auto length and loss
        /// 
        /// (2) Off: Auto length, no loss
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFixtureCompensationAutoLengthAndLossCalculation(bool Auto_Length_and_Loss)
        {
            int pInvokeResult = PInvoke.SetFixtureCompensationAutoLengthAndLossCalculation(this._handle, System.Convert.ToUInt16(Auto_Length_and_Loss));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Gets state of Auto Length or an Auto Length and Loss calculation. 
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:FIXTure:LMParameter:LOSS[:STATe]?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Auto_Length_and_Loss">
        /// State of Auto Length or an Auto Length and Loss calculation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) On: Auto Length and Loss
        /// 
        /// (2) Off: Auto Length, no loss
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFixtureCompensationAutoLengthAndLossCalculation(out bool Auto_Length_and_Loss)
        {
            ushort Auto_Length_and_LossAsUShort;
            int pInvokeResult = PInvoke.GetFixtureCompensationAutoLengthAndLossCalculation(this._handle, out Auto_Length_and_LossAsUShort);
            Auto_Length_and_Loss = System.Convert.ToBoolean(Auto_Length_and_LossAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures direct compensation.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:FIXTure:LMParameter[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Direct_Compensation">
        /// This control specifies an Auto Length (and Loss) calculation or a Direct Compensation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// Note(s):
        /// 
        /// (1) On: Direct Compensation
        /// 
        /// (2) Off: Auto length and loss/no loss
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFixtureCompensationDirectCompensation(bool Direct_Compensation)
        {
            int pInvokeResult = PInvoke.SetFixtureCompensationDirectCompensation(this._handle, System.Convert.ToUInt16(Direct_Compensation));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns a Direct Compensation.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]CORRection:COLLect:FIXTure:LMParameter[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Direct_Compensation">
        /// This control returns a Direct Compensation.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE  (1)
        /// 
        /// Note(s):
        /// 
        /// (1) On: Direct Compensation
        /// 
        /// (2) Off: Auto length and loss/no loss
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFixtureCompensationDirectCompensation(out bool Direct_Compensation)
        {
            ushort Direct_CompensationAsUShort;
            int pInvokeResult = PInvoke.GetFixtureCompensationDirectCompensation(this._handle, out Direct_CompensationAsUShort);
            Direct_Compensation = System.Convert.ToBoolean(Direct_CompensationAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates a new diagram area, identified by its area number &lt;Wnd&gt;.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:STATe ON
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DiagramAreaAdd(int Window)
        {
            int pInvokeResult = PInvoke.DiagramAreaAdd(this._handle, Window);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function deletes a diagram area, identified by its area number &lt;Wnd&gt;.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:STATe OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DiagramAreaDelete(int Window)
        {
            int pInvokeResult = PInvoke.DiagramAreaDelete(this._handle, Window);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function maximizes all diagram areas in the active setup or restores the previous display configuration.
        /// 
        /// Note(s):
        /// 
        /// Number of the diagram area to become the active diagram area. DISPlay:WINDow&lt;Wnd&gt;:MAXimize acts on all diagrams of the current setup, however, the digram no. &lt;Wnd&gt; is displayed on top of the others.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:MAXimize &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Diagram_Area">
        /// Maximizes all diagram areas in the active setup or restores the previous display configuration.
        /// 
        /// Valid Values:
        /// RSZVB_RESTORE  (0) - Restore
        /// RSZVB_MAXIMIZE (1) - Maximize
        /// 
        /// Default Value: RSZVB_MAXIMIZE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DiagramAreaMaximize(int Window, int Diagram_Area)
        {
            int pInvokeResult = PInvoke.DiagramAreaMaximize(this._handle, Window, Diagram_Area);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a title for diagram area &lt;Wnd&gt;.
        /// 
        /// Title provides an input field for the title string. The title may comprise a practically unlimited number of characters and is centered in a line below the top of the diagram area.
        /// 
        /// Remote-control command(s):
        /// DISPlay:WINDow&lt;Wnd&gt;:TITLe[:STATe] &lt;Boolean&gt;
        /// DISPlay:WINDow&lt;Wnd&gt;:TITLe:DATA '&lt;string&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Title">
        /// Displays or hides the title for area number &lt;Wnd&gt;.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <param name="Title_String">
        /// String variable for the title. The length of the title is practically unlimited but should be kept short enough to be displayed in the diagrams.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DiagramAreaTitle(int Window, bool Title, string Title_String)
        {
            int pInvokeResult = PInvoke.DiagramAreaTitle(this._handle, Window, System.Convert.ToUInt16(Title), Title_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines a name for diagram area &lt;Wnd&gt;.
        /// 
        /// Note:
        /// 
        /// (1) The name appears in the list of diagram areas, to be queried by DISPlay[:WINDow&lt;Wnd&gt;]:CATalog?.
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow&lt;Wnd&gt;]:NAME '&lt;string&gt;' 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Area_Name">
        /// String variable for the name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DiagramAreaName(int Window, string Area_Name)
        {
            int pInvokeResult = PInvoke.DiagramAreaName(this._handle, Window, Area_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the numbers and names of all diagram areas in the current setup. 
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow&lt;Wnd&gt;]:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Catalog">
        /// Returns string with comma-separated list of trace numbers and names. If all traces have been deleted the response is an empty string ("").
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DiagramAreaCatalog(int Window, System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.DiagramAreaCatalog(this._handle, Window, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the numbers and names of all traces in diagram area no. &lt;Wnd&gt;. 
        /// 
        /// Remote-control command(s):
        /// DISPlay[:WINDow&lt;Wnd&gt;]:TRACe&lt;WndTr&gt;:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Window">
        /// Number of the diagram area.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Catalog">
        /// Returns string with comma-separated list of trace numbers and names. If all traces have been deleted the response is an empty string ("").
        /// 
        /// The buffer must be of type ViChar and have at least as many bytes as indicated in the 'Buffer Size' parameter.
        /// 
        /// If the current value of the attribute, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you specify 0 for the 'Buffer Size' parameter, you can pass VI_NULL for this parameter.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// Pass the number of bytes in the ViChar array you specify for the 'Catalog' parameter.  
        /// 
        /// If the data, including the terminating NUL byte, contains more bytes that you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the 'Catalog' buffer parameter.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceDiagramAreaCatalog(int Window, System.Text.StringBuilder Catalog, int Buffer_Size)
        {
            int pInvokeResult = PInvoke.TraceDiagramAreaCatalog(this._handle, Window, Catalog, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the color scheme for all diagram areas in the active setup.
        /// 
        /// Remote-control command(s):
        /// SYSTem:DISPlay:COLor DBACkground | LBACkground | BWLStyles | BWSolid
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Color_Scheme">
        /// Selects the color scheme for all diagram areas in the active setup.
        /// 
        /// Valid Values:
        /// RSZVB_DBACKGROUND (0) - Dark Background
        /// RSZVB_LBACKGROUND (1) - Light Background
        /// RSZVB_BW_LSTYLES  (2) - B&amp;W Line Styles
        /// RSZVB_BW_SOLID    (3) - B&amp;W Solid
        /// 
        /// Default Value: RSZVB_DBACKGROUND (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetColorScheme(int Color_Scheme)
        {
            int pInvokeResult = PInvoke.SetColorScheme(this._handle, Color_Scheme);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns color scheme used for all diagram areas in the active setup.
        /// 
        /// Remote-control command(s):
        /// SYSTem:DISPlay:COLor?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Color_Scheme">
        /// Returns the color scheme used for all diagram areas in the active setup.
        /// 
        /// Valid Values:
        /// RSZVB_DBACKGROUND (0) - Dark Background
        /// RSZVB_LBACKGROUND (1) - Light Background
        /// RSZVB_BW_LSTYLES  (2) - B&amp;W Line Styles
        /// RSZVB_BW_SOLID    (3) - B&amp;W Solid
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetColorScheme(out int Color_Scheme)
        {
            int pInvokeResult = PInvoke.GetColorScheme(this._handle, out Color_Scheme);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores a color scheme to a specified NWA color scheme file.
        /// 
        /// Remote-control command(s):
        /// MMEMory:STORe:CMAP '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the cal kit file to be created. If no path is specified the analyzer uses the current directory, to be queried with MMEMory:CDIRectory?. The default extension (manual control) for color scheme files is *.ColorScheme, although other extensions are allowed.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SaveColorScheme(string File_Name)
        {
            int pInvokeResult = PInvoke.SaveColorScheme(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function loads a color scheme from a specified NWA color scheme file. 
        /// 
        /// Remote-control command(s):
        /// MMEMory:LOAD:CMAP '&lt;file_name&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="File_Name">
        /// This control specifies the name and directory of the cal kit file to be loaded. The default extension (manual control) for color scheme files is *.ColorScheme, although other extensions are allowed.
        /// 
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int LoadColorScheme(string File_Name)
        {
            int pInvokeResult = PInvoke.LoadColorScheme(this._handle, File_Name);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function shows or hides all frequency stimulus values in the diagrams.
        /// 
        /// Remote-control command(s):
        /// DISPlay:ANNotation:FREQuency[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Frequency_Info">
        /// Show or hide stimulus values.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyInfo(bool Frequency_Info)
        {
            int pInvokeResult = PInvoke.SetFrequencyInfo(this._handle, System.Convert.ToUInt16(Frequency_Info));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether all frequency stimulus values in the diagrams are displayed or not.
        /// 
        /// Remote-control command(s):
        /// DISPlay:ANNotation:FREQuency[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Frequency_Info">
        /// Returns whether all frequency stimulus values in the diagrams are displayed or not.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyInfo(out bool Frequency_Info)
        {
            ushort Frequency_InfoAsUShort;
            int pInvokeResult = PInvoke.GetFrequencyInfo(this._handle, out Frequency_InfoAsUShort);
            Frequency_Info = System.Convert.ToBoolean(Frequency_InfoAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the size of the fonts in the diagram on a relative scale. 
        /// 
        /// Remote-control command(s):
        /// DISPlay:RFSize
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Font_Size">
        /// Defines the size of the fonts in the diagram on a relative scale. 
        /// 
        /// Valid Values:
        /// 80 to 170 %
        /// 
        /// Default Value: 100 %
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFontSize(int Font_Size)
        {
            int pInvokeResult = PInvoke.SetFontSize(this._handle, Font_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the size of the fonts in the diagram on a relative scale. 
        /// 
        /// Remote-control command(s):
        /// DISPlay:RFSize?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Font_Size">
        /// Returns the size of the fonts in the diagram on a relative scale. 
        /// 
        /// Valid Values:
        /// 80 to 170 %
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFontSize(out int Font_Size)
        {
            int pInvokeResult = PInvoke.GetFontSize(this._handle, out Font_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function shows or hides the channel list below the diagrams
        /// 
        /// Remote-control command(s):
        /// DISPlay:ANNotation:CHANnel[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel_Info">
        /// Shows or hides the channel list below the diagrams.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetChannelInfo(bool Channel_Info)
        {
            int pInvokeResult = PInvoke.SetChannelInfo(this._handle, System.Convert.ToUInt16(Channel_Info));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether the channel list below the diagrams
        /// 
        /// Remote-control command(s):
        /// DISPlay:ANNotation:CHANnel[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel_Info">
        /// Returns whether the channel list below the diagrams.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetChannelInfo(out bool Channel_Info)
        {
            ushort Channel_InfoAsUShort;
            int pInvokeResult = PInvoke.GetChannelInfo(this._handle, out Channel_InfoAsUShort);
            Channel_Info = System.Convert.ToBoolean(Channel_InfoAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function displays all markers with the same color or display each marker with the color of the associated trace. The colors of all display elements are defined via DISPlay:CMAP&lt;Element&gt;:RGB &lt;red&gt;, &lt;green&gt;, &lt;blue&gt;,.... 
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;Element&gt;:MARKer[:STATe] &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Same_Color">
        /// This control sets the markers color.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// (1) ON - All markers have the same color, to be defined via DISPlay:CMAP6:RGB &lt;red&gt;, &lt;green&gt;, &lt;blue&gt;. The marker color is independent of the trace colors.
        /// 
        /// (2) OFF - Each marker has the color of the associated trace.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetMarkerColorState(bool Same_Color)
        {
            int pInvokeResult = PInvoke.SetMarkerColorState(this._handle, System.Convert.ToUInt16(Same_Color));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the markers color state - whether all displayed markers have the same color or each marker has the color of the associated trace.
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;Element&gt;:MARKer[:STATe]?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Same_Color">
        /// This control returns the state of the markers color.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Notes:
        /// (1) ON - All markers have the same color, the marker color is independent of the trace colors.
        /// 
        /// (2) OFF - Each marker has the color of the associated trace.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetMarkerColorState(out bool Same_Color)
        {
            ushort Same_ColorAsUShort;
            int pInvokeResult = PInvoke.GetMarkerColorState(this._handle, out Same_ColorAsUShort);
            Same_Color = System.Convert.ToBoolean(Same_ColorAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the color of all display elements based on the Red/Green/Blue color model.
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;Element&gt;:RGB &lt;red&gt;, &lt;green&gt;, &lt;blue&gt; [,&lt;trace_style&gt;, &lt;trace_width&gt;]
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Element">
        /// Selects the display elements.
        /// 
        /// Valid Values:
        /// RSZVB_ELEMENT_BACKGROUND      (1)  - Background
        /// RSZVB_ELEMENT_TEXT            (2)  - Text
        /// RSZVB_ELEMENT_SELTEXT         (3)  - Selected Text
        /// RSZVB_ELEMENT_GRID            (4)  - Grid
        /// RSZVB_ELEMENT_REFLINE         (5)  - Reference Line
        /// RSZVB_ELEMENT_ALLMAKERS       (6)  - Same Color for all Markers 
        /// RSZVB_ELEMENT_HLINE           (7)  - Horizontal Line / 
        ///                                      Vertical Range Lines
        /// RSZVB_ELEMENT_DTITLE          (8)  - Diagram Title
        /// RSZVB_ELEMENT_LIMITFAILTRACE  (9)  - Limit Fail Trace Color
        /// RSZVB_ELEMENT_LIMITLINEOFF    (10) - Limit Line Type Off
        /// RSZVB_ELEMENT_LIMITLINEUPPER  (11) - Limit Line Type Upper
        /// RSZVB_ELEMENT_LIMITLINELOWER  (12) - Limit Line Type Lower
        /// RSZVB_ELEMENT_TRACE1          (13) - Trace 1
        /// RSZVB_ELEMENT_TRACE2          (14) - Trace 2
        /// RSZVB_ELEMENT_TRACE3          (15) - Trace 3
        /// RSZVB_ELEMENT_TRACE4          (16) - Trace 4
        /// RSZVB_ELEMENT_TRACE5          (17) - Trace 5
        /// RSZVB_ELEMENT_TRACE6          (18) - Trace 6
        /// RSZVB_ELEMENT_TRACE7          (19) - Trace 7
        /// RSZVB_ELEMENT_TRACE8          (20) - Trace 8
        /// RSZVB_ELEMENT_TRACE9          (21) - Trace 9
        /// RSZVB_ELEMENT_TRACE10         (22) - Trace 10
        /// RSZVB_ELEMENT_TRACE11         (23) - Trace 11
        /// RSZVB_ELEMENT_TRACE12         (24) - Trace 12
        /// RSZVB_ELEMENT_TRACE13         (25) - Trace 13
        /// RSZVB_ELEMENT_TRACE14         (26) - Trace 14
        /// RSZVB_ELEMENT_TRACE15         (27) - Trace 15
        /// RSZVB_ELEMENT_TRACE16         (28) - Trace 16
        /// 
        /// Default Value: 
        /// RSZVB_ELEMENT_BACKGROUND      (1)
        ///  
        /// </param>
        /// <param name="Red">
        /// Sets the red color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Green">
        /// Sets the green color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Blue">
        /// Sets the blue color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Trace_Style">
        /// Selects the trace style.
        /// 
        /// Valid Values:
        /// RSZVB_TRACE_STYLE_SOLID     (0) - Solid
        /// RSZVB_TRACE_STYLE_DASHED    (1) - Dashed
        /// RSZVB_TRACE_STYLE_DOTTED    (2) - Dotted
        /// RSZVB_TRACE_STYLE_DDOTTED   (3) - DDotted
        /// RSZVB_TRACE_STYLE_DDDOTTED  (4) - DDDotted
        /// 
        /// Default Value: 
        /// RSZVB_TRACE_STYLE_SOLID      (0)
        /// 
        /// Notes:
        /// (1) only for traces (&lt;Element&gt; &gt; 12)
        /// 
        /// 
        /// </param>
        /// <param name="Trace_Width">
        /// Selects the trace width.
        /// 
        /// Valid Range: 1 to 20
        /// 
        /// Default Value: 1
        /// 
        /// Notes:
        /// (1) Only for traces (&lt;Element&gt; &gt; 12).
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRGBColor(int Element, double Red, double Green, double Blue, int Trace_Style, int Trace_Width)
        {
            int pInvokeResult = PInvoke.SetRGBColor(this._handle, Element, Red, Green, Blue, Trace_Style, Trace_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns color of all display elements based on the Red/Green/Blue color model.  
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;Element&gt;:RGB?
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Element">
        /// Selects the display elements.
        /// 
        /// Valid Values:
        /// RSZVB_ELEMENT_BACKGROUND      (1)  - Background
        /// RSZVB_ELEMENT_TEXT            (2)  - Text
        /// RSZVB_ELEMENT_SELTEXT         (3)  - Selected Text
        /// RSZVB_ELEMENT_GRID            (4)  - Grid
        /// RSZVB_ELEMENT_REFLINE         (5)  - Reference Line
        /// RSZVB_ELEMENT_ALLMAKERS       (6)  - Same Color for all Markers 
        /// RSZVB_ELEMENT_HLINE           (7)  - Horizontal Line / 
        ///                                      Vertical Range Lines
        /// RSZVB_ELEMENT_DTITLE          (8)  - Diagram Title
        /// RSZVB_ELEMENT_LIMITFAILTRACE  (9)  - Limit Fail Trace Color
        /// RSZVB_ELEMENT_LIMITLINEOFF    (10) - Limit Line Type Off
        /// RSZVB_ELEMENT_LIMITLINEUPPER  (11) - Limit Line Type Upper
        /// RSZVB_ELEMENT_LIMITLINELOWER  (12) - Limit Line Type Lower
        /// RSZVB_ELEMENT_TRACE1          (13) - Trace 1
        /// RSZVB_ELEMENT_TRACE2          (14) - Trace 2
        /// RSZVB_ELEMENT_TRACE3          (15) - Trace 3
        /// RSZVB_ELEMENT_TRACE4          (16) - Trace 4
        /// RSZVB_ELEMENT_TRACE5          (17) - Trace 5
        /// RSZVB_ELEMENT_TRACE6          (18) - Trace 6
        /// RSZVB_ELEMENT_TRACE7          (19) - Trace 7
        /// RSZVB_ELEMENT_TRACE8          (20) - Trace 8
        /// RSZVB_ELEMENT_TRACE9          (21) - Trace 9
        /// RSZVB_ELEMENT_TRACE10         (22) - Trace 10
        /// RSZVB_ELEMENT_TRACE11         (23) - Trace 11
        /// RSZVB_ELEMENT_TRACE12         (24) - Trace 12
        /// RSZVB_ELEMENT_TRACE13         (25) - Trace 13
        /// RSZVB_ELEMENT_TRACE14         (26) - Trace 14
        /// RSZVB_ELEMENT_TRACE15         (27) - Trace 15
        /// RSZVB_ELEMENT_TRACE16         (28) - Trace 16
        /// 
        /// Default Value: 
        /// RSZVB_ELEMENT_BACKGROUND      (1)
        /// 
        ///  
        /// </param>
        /// <param name="Red">
        /// Returns the red color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Green">
        /// Returns the green color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Blue">
        /// Returns the blue color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Trace_Style">
        /// Selects the trace style.
        /// 
        /// Valid Values:
        /// RSZVB_TRACE_STYLE_SOLID     (0) - Solid
        /// RSZVB_TRACE_STYLE_DASHED    (1) - Dashed
        /// RSZVB_TRACE_STYLE_DOTTED    (2) - Dotted
        /// RSZVB_TRACE_STYLE_DDOTTED   (3) - DDotted
        /// RSZVB_TRACE_STYLE_DDDOTTED  (4) - DDDotted
        /// 
        /// Default Value: 
        /// RSZVB_TRACE_STYLE_SOLID      (0)
        /// 
        /// Notes:
        /// (1) only for traces (&lt;Element&gt; &gt; 12)
        /// 
        /// 
        /// </param>
        /// <param name="Trace_Width">
        /// Selects the trace width.
        /// 
        /// Valid Range: 1 to 20
        /// 
        /// Default Value: 1
        /// 
        /// Notes:
        /// (1) Only for traces (&lt;Element&gt; &gt; 12).
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRGBColor(int Element, out double Red, out double Green, out double Blue, out int Trace_Style, out int Trace_Width)
        {
            int pInvokeResult = PInvoke.GetRGBColor(this._handle, Element, out Red, out Green, out Blue, out Trace_Style, out Trace_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the trace color schemes in different diagram areas.
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;Element&gt;:TRACe:COLor[:STATe] &lt;Boolean&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Color">
        /// This control defines the trace color schemes in different diagram areas.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Notes:
        /// (1) OFF - Independent color scheme in new diagram area. Moved traces change their color. 
        /// 
        /// (2) ON - Color scheme in new diagram area continues the previous color scheme. Moved traces keep their color.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetTraceColorState(bool Trace_Color)
        {
            int pInvokeResult = PInvoke.SetTraceColorState(this._handle, System.Convert.ToUInt16(Trace_Color));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the trace color schemes in different diagram areas.
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;Element&gt;:TRACe:COLor[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Color">
        /// This control returns the trace color schemes in different diagram areas.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Notes:
        /// (1) OFF - Independent color scheme in new diagram area. Moved traces change their color. 
        /// 
        /// (2) ON - Color scheme in new diagram area continues the previous color scheme. Moved traces keep their color.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetTraceColorState(out bool Trace_Color)
        {
            ushort Trace_ColorAsUShort;
            int pInvokeResult = PInvoke.GetTraceColorState(this._handle, out Trace_ColorAsUShort);
            Trace_Color = System.Convert.ToBoolean(Trace_ColorAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function defines the color of selected trace based on the Red/Green/Blue color model.
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;13..28&gt;:RGB &lt;red&gt;, &lt;green&gt;, &lt;blue&gt; ,&lt;trace_style&gt;, &lt;trace_width&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Red">
        /// Sets the red color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Green">
        /// Sets the green color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Blue">
        /// Sets the blue color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Default Value: 0
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Trace_Style">
        /// Selects the trace style.
        /// 
        /// Valid Values:
        /// RSZVB_TRACE_STYLE_SOLID     (0) - Solid
        /// RSZVB_TRACE_STYLE_DASHED    (1) - Dashed
        /// RSZVB_TRACE_STYLE_DOTTED    (2) - Dotted
        /// RSZVB_TRACE_STYLE_DDOTTED   (3) - DDotted
        /// RSZVB_TRACE_STYLE_DDDOTTED  (4) - DDDotted
        /// 
        /// Default Value: 
        /// RSZVB_TRACE_STYLE_SOLID      (0)
        /// 
        /// </param>
        /// <param name="Trace_Width">
        /// Selects the trace width.
        /// 
        /// Valid Range: 1 to 20
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceSetRGBColor(string Trace_Name, double Red, double Green, double Blue, int Trace_Style, int Trace_Width)
        {
            int pInvokeResult = PInvoke.TraceSetRGBColor(this._handle, Trace_Name, Red, Green, Blue, Trace_Style, Trace_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the color of selected trace based on the Red/Green/Blue color model.
        /// 
        /// Remote-control command(s):
        /// DISPlay:CMAP&lt;13..28&gt;:RGB?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Trace_Name">
        /// Trace name.
        /// 
        /// Valid Range: not checked
        /// 
        /// Default Value: "Trc1"
        /// 
        /// </param>
        /// <param name="Red">
        /// Gets the red color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Green">
        /// Gets the green color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Blue">
        /// Gets the blue color.
        /// 
        /// Valid Range: 0 to 1
        /// 
        /// Notes:
        /// (1) 0 (zero intensity, corresponding to a 0 in the 24-bit color model)
        /// 
        /// (2) 1 (full intensity, corresponding to 255 in the 24-bit color model)
        /// </param>
        /// <param name="Trace_Style">
        /// Returns the trace style.
        /// 
        /// Valid Values:
        /// RSZVB_TRACE_STYLE_SOLID     (0) - Solid
        /// RSZVB_TRACE_STYLE_DASHED    (1) - Dashed
        /// RSZVB_TRACE_STYLE_DOTTED    (2) - Dotted
        /// RSZVB_TRACE_STYLE_DDOTTED   (3) - DDotted
        /// RSZVB_TRACE_STYLE_DDDOTTED  (4) - DDDotted
        /// 
        /// </param>
        /// <param name="Trace_Width">
        /// Returns the trace width.
        /// 
        /// Valid Range: 1 to 20
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int TraceGetRGBColor(string Trace_Name, out double Red, out double Green, out double Blue, out int Trace_Style, out int Trace_Width)
        {
            int pInvokeResult = PInvoke.TraceGetRGBColor(this._handle, Trace_Name, out Red, out Green, out Blue, out Trace_Style, out Trace_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enables or disables the limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]LLIMit[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_State">
        /// Enables or disables the limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerPortLimitState(int Channel, int Port, bool Limit_State)
        {
            int pInvokeResult = PInvoke.SetPowerPortLimitState(this._handle, Channel, Port, System.Convert.ToUInt16(Limit_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the state of the limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]LLIMit[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_State">
        /// Returns the limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerPortLimitState(int Channel, int Port, out bool Limit_State)
        {
            ushort Limit_StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerPortLimitState(this._handle, Channel, Port, out Limit_StateAsUShort);
            Limit_State = System.Convert.ToBoolean(Limit_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines a limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]LLIMit:VALue
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Value">
        /// Defines a limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Valid Values: 
        /// -40 dBm to +10 dBm
        /// 
        /// Default Value: 0.0 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerPortLimitValue(int Channel, int Port, double Limit_Value)
        {
            int pInvokeResult = PInvoke.SetPowerPortLimitValue(this._handle, Channel, Port, Limit_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries a limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]LLIMit:VALue?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Limit_Value">
        /// Returns a limit for the source power at port no. &lt;Pt&gt;.
        /// 
        /// Valid Values: 
        /// -40 dBm to +10 dBm
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerPortLimitValue(int Channel, int Port, out double Limit_Value)
        {
            int pInvokeResult = PInvoke.GetPowerPortLimitValue(this._handle, Channel, Port, out Limit_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Optimizes the automatic level control (ALC) for test setups where the additional connectors of option R&amp;S ZVA-B16 are used. If the optimization is enabled, the ALC is limited to +1 dB so that the active port power limits cannot be exceeded by more than 1 dB.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]LLIMit:DGRaccess
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="DRG_Access_State">
        /// Enables or disables ALC optimization.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On 
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerPortLimitDirectGeneratorAndReceiverState(int Channel, int Port, bool DRG_Access_State)
        {
            int pInvokeResult = PInvoke.SetPowerPortLimitDirectGeneratorAndReceiverState(this._handle, Channel, Port, System.Convert.ToUInt16(DRG_Access_State));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the state of the ALC optimization.
        /// 
        /// Remote-control command(s):
        /// SOURce&lt;Ch&gt;:POWer&lt;Pt&gt;[:LEVel][:IMMediate]LLIMit:DGRaccess?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel">
        /// Channel number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Port">
        /// Port number.
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="DRG_Access_State">
        /// Returns the state of the ALC optimization.
        /// 
        /// Valid Values: 
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerPortLimitDirectGeneratorAndReceiverState(int Channel, int Port, out bool DRG_Access_State)
        {
            ushort DRG_Access_StateAsUShort;
            int pInvokeResult = PInvoke.GetPowerPortLimitDirectGeneratorAndReceiverState(this._handle, Channel, Port, out DRG_Access_StateAsUShort);
            DRG_Access_State = System.Convert.ToBoolean(DRG_Access_StateAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies whether a preset (SYSTem:PRESet; *RST) affects the active setup only or all open setups.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRESet:SCOPe ALL | SINGle
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Preset_Scope">
        /// This control specifies whether a preset (SYSTem:PRESet; *RST) affects the active setup only or all open setups.
        /// 
        /// Valid Values:
        /// RSZVB_PRESET_SINGLE (0) - Active Setup
        /// RSZVB_PRESET_ALL    (1) - Instrument
        /// 
        /// Default Value: RSZVB_PRESET_ALL (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Active Setup - The settings of the active setup are reset; the name of the active setup and the parameters of all other setups remain unchanged.
        /// 
        /// (2) Instrument - All open setups are deleted and the setup Set1 is created with default trace and channel settings.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPresets(int Preset_Scope)
        {
            int pInvokeResult = PInvoke.SetPresets(this._handle, Preset_Scope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries whether a preset (SYSTem:PRESet; *RST) affects the active setup only or all open setups.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRESet:SCOPe?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Preset_Scope">
        /// This control returns whether a preset (SYSTem:PRESet; *RST) affects the active setup only or all open setups.
        /// 
        /// Valid Values:
        /// RSZVB_PRESET_SINGLE (0) - Active Setup
        /// RSZVB_PRESET_ALL    (1) - Instrument
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPresets(out int Preset_Scope)
        {
            int pInvokeResult = PInvoke.GetPresets(this._handle, out Preset_Scope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects a factory preset or a user-defined preset.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRESet:USER[:STATe] ON | OFF
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="User_Defined_Preset">
        /// This control selects a factory preset or a user-defined preset.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Off - User-defined preset switched off (factory preset is used.
        /// 
        /// (2) On - User-defined preset switched on .
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserDefinedPresetState(bool User_Defined_Preset)
        {
            int pInvokeResult = PInvoke.SetUserDefinedPresetState(this._handle, System.Convert.ToUInt16(User_Defined_Preset));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns a state of the user-defined preset.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRESet:USER[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="User_Defined_Preset">
        /// This control returns a state of the user-defined preset.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Note(s):
        /// 
        /// (1) Off - User-defined preset switched off (factory preset is used.
        /// 
        /// (2) On - User-defined preset switched on .
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserDefinedPresetState(out bool User_Defined_Preset)
        {
            ushort User_Defined_PresetAsUShort;
            int pInvokeResult = PInvoke.GetUserDefinedPresetState(this._handle, out User_Defined_PresetAsUShort);
            User_Defined_Preset = System.Convert.ToBoolean(User_Defined_PresetAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the name of a setup file (.nwa) to be used for a user-defined preset.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRESet:USER:NAME '&lt;Setup_file&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="User_Defined_Preset_File">
        /// This control specifies the name and directory of the setup file to be loaded. The default extension (manual control) for setup files is *.nwa, although other extensions are allowed. If no path is specified the analyzer searches the default directory.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetUserDefinedPresetFile(string User_Defined_Preset_File)
        {
            int pInvokeResult = PInvoke.SetUserDefinedPresetFile(this._handle, User_Defined_Preset_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the name of a setup file (.nwa) used for a user-defined preset.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRESet:USER:NAME?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the control User Defined Preset.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="User_Defined_Preset_File">
        /// This control returns the name of the user defined setup file.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetUserDefinedPresetFile(int Buffer_Size, System.Text.StringBuilder User_Defined_Preset_File)
        {
            int pInvokeResult = PInvoke.GetUserDefinedPresetFile(this._handle, Buffer_Size, User_Defined_Preset_File);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the display on or off while the analyzer is in the remote state. This function has no effect while the analyzer is in the Local operating state.
        /// 
        /// Note(s):
        /// 
        /// Switching off the display speeds up the measurement. This function may have an impact on the update of trace and channel settings; see SYSTem:SETTings:UPDate.
        /// 
        /// Remote-control command(s):
        /// SYSTem:DISPlay:UPDate OFF | ON | ONCE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Display_Update">
        /// Switches the display update while the analyzer is in the remote state.
        /// 
        /// Valid Values:
        /// RSZVB_DISP_UPDATE_OFF  (0) - Off
        /// RSZVB_DISP_UPDATE_ON   (1) - On
        /// RSZVB_DISP_UPDATE_ONCE (2) - Once
        /// 
        /// Default Value: RSZVB_DISP_UPDATE_OFF (0)
        /// 
        /// Notes:
        /// 
        /// (1) Off, On:
        /// Switch the display on or off. If the display is switched on, the analyzer shows the diagrams and traces like in manual control.
        /// 
        /// (2) Once:
        /// Switch the display on and show the current trace. This parameter can be used for occasional checks of the measurement results or settings. The measurement is continued, however, the measurement results are not updated. Compared to the ON setting, ONCE does not slow down the measurement speed.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDisplayUpdate(int Display_Update)
        {
            int pInvokeResult = PInvoke.SetDisplayUpdate(this._handle, Display_Update);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns if the display update while the analyzer is in the remote state is enabled or disabled.
        /// 
        /// Remote-control command(s):
        /// SYSTem:DISPlay:UPDate?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Display_Update">
        /// Returns if the display update while the analyzer is in the remote state is enabled or disabled.
        /// 
        /// Valid Values:
        /// RSZVB_DISP_UPDATE_OFF  (0) - Off
        /// RSZVB_DISP_UPDATE_ON   (1) - On
        /// RSZVB_DISP_UPDATE_ONCE (2) - Once
        /// 
        /// Notes:
        /// 
        /// (1) Off, On:
        /// Switch the display on or off. If the display is switched on, the analyzer shows the diagrams and traces like in manual control.
        /// 
        /// (2) Once:
        /// Switch the display on and show the current trace. This parameter can be used for occasional checks of the measurement results or settings. The measurement is continued, however, the measurement results are not updated. Compared to the ON setting, ONCE does not slow down the measurement speed.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDisplayUpdate(out int Display_Update)
        {
            int pInvokeResult = PInvoke.GetDisplayUpdate(this._handle, out Display_Update);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates an immediate update of the channel or trace settings.
        /// 
        /// This function has an effect if the analyzer operates in single sweep mode (INITiate&lt;Ch&gt;:CONTinuous OFF) and if the display update is switched off (SYSTem:DISPlay:UPDate OFF). In this scenario, a change of the channel or trace settings is usually not taken into account immediately. The analyzer waits until the end of the current sweep sequence and changes all settings made during the last sweep period when the next single sweep sequence is initiated. Several settings can be made en bloc, which generally saves time.
        /// 
        /// SYSTem:SETtings:UPDate ONCE causes the analyzer to apply the settings at once without waiting for the end of the current single sweep sequence. This function has no effect in continuous sweep mode or if the display update is switched on.
        /// 
        /// Note(s):
        /// 
        /// The settings are also updated when the continuous sweep mode is activated (INITiate&lt;Ch&gt;:CONTinuous ON).
        /// 
        /// Remote-control command(s):
        /// SYSTem:SETTings:UPDate ONCE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ImmediateSettingsUpdate()
        {
            int pInvokeResult = PInvoke.ImmediateSettingsUpdate(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the minimum and maximum frequency of the network analyzer.
        /// 
        /// Remote-control command(s):
        /// SYSTem:FREQuency? MINimum | MAXimum
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Minimum_Frequency">
        /// Minimum frequency of network analyzer.
        /// </param>
        /// <param name="Maximum_Frequency">
        /// Maximum frequency of network analyzer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryFrequencyRange(out double Minimum_Frequency, out double Maximum_Frequency)
        {
            int pInvokeResult = PInvoke.QueryFrequencyRange(this._handle, out Minimum_Frequency, out Maximum_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the local lockout.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:KLOCk ON | OFF    
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Lockout">
        /// This parameter sets the local lockout.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off (Default Value)
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SystemKeylock(bool Lockout)
        {
            int pInvokeResult = PInvoke.SystemKeylock(this._handle, System.Convert.ToUInt16(Lockout));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the Remote Language for the analyzer.
        /// 
        /// Remote-control command(s):
        /// SYSTem:LANGuage 'SCPI' | 'PNA' | 'HP8510' | 'HP8720' | 'HP8753'    
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Language">
        /// This parameter selects the command set.
        /// 
        /// Valid Values:
        /// RSZVB_LANG_SCPI   (0) - SCPI
        /// RSZVB_LANG_PNA    (1) - PNA
        /// RSZVB_LANG_HP8510 (2) - HP8510
        /// RSZVB_LANG_HP8720 (3) - HP8720
        /// RSZVB_LANG_HP8753 (4) - HP8753
        /// 
        /// Default Value: RSZVB_LANG_SCPI   (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetRemoteLanguage(int Language)
        {
            int pInvokeResult = PInvoke.SetRemoteLanguage(this._handle, Language);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Remote Language for the analyzer.
        /// 
        /// Remote-control command(s):
        /// SYSTem:LANGuage?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Language">
        /// This parameter returns the command set.
        /// 
        /// Valid Values:
        /// RSZVB_LANG_SCPI   (0) - SCPI
        /// RSZVB_LANG_PNA    (1) - PNA
        /// RSZVB_LANG_HP8510 (2) - HP8510
        /// RSZVB_LANG_HP8720 (3) - HP8720
        /// RSZVB_LANG_HP8753 (4) - HP8753
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetRemoteLanguage(out int Language)
        {
            int pInvokeResult = PInvoke.GetRemoteLanguage(this._handle, out Language);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures an external generator and adds it to the list of available generators.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:GENerator&lt;gen_no&gt;:DEFine
        /// '&lt;gen_name&gt;', '&lt;driver&gt;', '&lt;interface&gt;', '&lt;address&gt;'[, &lt;fast_sweep&gt;, &lt;10_MHz_Ref&gt;]  
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Name">
        /// This control sets the name of the external generator. An empty string means that no particular name is assigned to the generator.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Generator_Type">
        /// This control sets the generator type. The generator type is identical with the name of the generator driver file (*.gen) stored in the resources\extdev subdirectory of the analyzer's program directory. 
        /// 
        /// Alternative: The '&lt;gen_name&gt;' string may contain the generator driver file name with its complete path, e.g. 'C:\Program Files\Rohde&amp;Schwarz\Network Analyzer\resources\extdev\sme02.gen'. 
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Interface_Type">
        /// This control sets the interface type: 'GPIB0', 'VXI-11',... 
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Interface_Address">
        /// This control sets the interface address, depending on the interface type
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Fast_Sweep_Mode">
        /// This control enables or disables the fast sweep mode. 
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// 
        /// </param>
        /// <param name="_10_MHz_Reference_Frequency">
        /// This control sets the analyzer to internal (OFF) or external (ON) reference frequency.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureExternalGenerator(int Generator_Number, string Generator_Name, string Generator_Type, string Interface_Type, string Interface_Address, bool Fast_Sweep_Mode, bool _10_MHz_Reference_Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureExternalGenerator(this._handle, Generator_Number, Generator_Name, Generator_Type, Interface_Type, Interface_Address, System.Convert.ToUInt16(Fast_Sweep_Mode), System.Convert.ToUInt16(_10_MHz_Reference_Frequency));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries an external generator.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:GENerator&lt;gen_no&gt;:DEFine?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Generator_Number">
        /// This control sets the number of the configured generator. Generators must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Generator_Name">
        /// This control returns the name of the external generator. An empty string means that no particular name is assigned to the generator.
        /// </param>
        /// <param name="Generator_Type">
        /// This control returns the generator type. The generator type is identical with the name of the generator driver file (*.gen) stored in the resources\extdev subdirectory of the analyzer's program directory. 
        /// 
        /// Alternative: The '&lt;gen_name&gt;' string may contain the generator driver file name with its complete path, e.g. 'C:\Program Files\Rohde&amp;Schwarz\Network Analyzer\resources\extdev\sme02.gen'. 
        /// 
        /// </param>
        /// <param name="Interface_Type">
        /// This control returns the interface type. 
        /// 
        /// </param>
        /// <param name="Interface_Address">
        /// This control returns the interface address, depending on the interface type
        /// </param>
        /// <param name="Fast_Sweep_Mode">
        /// This control returns the fast sweep mode. 
        /// 
        /// </param>
        /// <param name="_10_MHz_Reference_Frequency">
        /// This control returns the analyzer to internal (OFF) or external (ON) reference frequency.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExternalGenerator(int Generator_Number, System.Text.StringBuilder Generator_Name, System.Text.StringBuilder Generator_Type, System.Text.StringBuilder Interface_Type, System.Text.StringBuilder Interface_Address, out bool Fast_Sweep_Mode, out bool _10_MHz_Reference_Frequency)
        {
            ushort Fast_Sweep_ModeAsUShort;
            ushort _10_MHz_Reference_FrequencyAsUShort;
            int pInvokeResult = PInvoke.QueryExternalGenerator(this._handle, Generator_Number, Generator_Name, Generator_Type, Interface_Type, Interface_Address, out Fast_Sweep_ModeAsUShort, out _10_MHz_Reference_FrequencyAsUShort);
            Fast_Sweep_Mode = System.Convert.ToBoolean(Fast_Sweep_ModeAsUShort);
            _10_MHz_Reference_Frequency = System.Convert.ToBoolean(_10_MHz_Reference_FrequencyAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the number of configured external generators.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:GENerator&lt;gen_no&gt;:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Generator_Count">
        /// Number of generators
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExternalGeneratorCount(out int Generator_Count)
        {
            int pInvokeResult = PInvoke.QueryExternalGeneratorCount(this._handle, out Generator_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the numbers of all configured external generators.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:GENerator&lt;gen_no&gt;:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Array_Size">
        /// This control sets the array size of the Generator Numbers control array.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1000
        /// </param>
        /// <param name="Generator_Numbers">
        /// String parameter with a comma-separated list of generator numbers.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExternalGeneratorNumbers(int Array_Size, System.Text.StringBuilder Generator_Numbers)
        {
            int pInvokeResult = PInvoke.QueryExternalGeneratorNumbers(this._handle, Array_Size, Generator_Numbers);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the configuration table for external generators.
        /// 
        /// Notes:
        /// 
        /// (1) Generator number is ignored, the command clears all entries in the configuration table. 
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:GENerator&lt;gen_no&gt;:DELete
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteExternalGenerator()
        {
            int pInvokeResult = PInvoke.DeleteExternalGenerator(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures an external power meter and adds it to the list of available power meters.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:DEFine
        /// '&lt;pmeter_name&gt;', '&lt;driver&gt;', '&lt;interface&gt;', '&lt;address&gt;'   
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Power_Meter_Number">
        /// This control sets the number of the configured power meter. Power meters must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Meter_Name">
        /// This control sets the name of the external power meter. An empty string means that no particular name is assigned to the power meter.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Power_Meter_Type">
        /// This control sets the power meter type. The power meter type is identical with the name of the power meter driver file (*.pwm) stored in the resources\extdev subdirectory of the analyzer's program directory. 
        /// 
        /// Alternative: The '&lt;pmter_name&gt;' string may contain the power meter driver file name with its complete path, e.g. 'C:\Program Files\Rohde&amp;Schwarz\Network Analyzer\resources\extdev\nrvd.pwm'.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Interface_Type">
        /// This control sets the interface type: 'USB' (for the supported USB devices)
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <param name="Interface_Address">
        /// This control sets the interface address, depending on the interface type
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureExternalPowerMeter(int Power_Meter_Number, string Power_Meter_Name, string Power_Meter_Type, string Interface_Type, string Interface_Address)
        {
            int pInvokeResult = PInvoke.ConfigureExternalPowerMeter(this._handle, Power_Meter_Number, Power_Meter_Name, Power_Meter_Type, Interface_Type, Interface_Address);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries an external power meter.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:DEFine?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Power_Meter_Number">
        /// This control sets the number of the configured power meter. Power meters must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Power_Meter_Name">
        /// This control returns the name of the external power meter. An empty string means that no particular name is assigned to the power meter.
        /// </param>
        /// <param name="Power_Meter_Type">
        /// This control returns the power meter type. The power meter type is identical with the name of the power meter driver file (*.pwm) stored in the resources\extdev subdirectory of the analyzer's program directory. 
        /// 
        /// Alternative: The '&lt;pmter_name&gt;' string may contain the power meter driver file name with its complete path, e.g. 'C:\Program Files\Rohde&amp;Schwarz\Network Analyzer\resources\extdev\nrvd.pwm'.
        /// </param>
        /// <param name="Interface_Type">
        /// This control returns the interface type.
        /// </param>
        /// <param name="Interface_Address">
        /// This control returns the interface address, depending on the interface type.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExternalPowerMeter(int Power_Meter_Number, System.Text.StringBuilder Power_Meter_Name, System.Text.StringBuilder Power_Meter_Type, System.Text.StringBuilder Interface_Type, System.Text.StringBuilder Interface_Address)
        {
            int pInvokeResult = PInvoke.QueryExternalPowerMeter(this._handle, Power_Meter_Number, Power_Meter_Name, Power_Meter_Type, Interface_Type, Interface_Address);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the number of configured external power meters.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:COUNt?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Power_Meter_Count">
        /// Number of power meters.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExternalPowerMeterCount(out int Power_Meter_Count)
        {
            int pInvokeResult = PInvoke.QueryExternalPowerMeterCount(this._handle, out Power_Meter_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the numbers of all configured external power meters.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:CATalog?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines size of buffer in 'Power Meter Number' argument.
        /// 
        /// Valid Values:
        /// not checked
        /// 
        /// Default Value: 1024
        /// </param>
        /// <param name="Power_Meter_Number">
        /// String parameter with a comma-separated list of power meter numbers
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExternalPowerMeterNumbers(int Buffer_Size, System.Text.StringBuilder Power_Meter_Number)
        {
            int pInvokeResult = PInvoke.QueryExternalPowerMeterNumbers(this._handle, Buffer_Size, Power_Meter_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function starts auto zeroing of the external power meter. 
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:AZERo
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Power_Meter_Number">
        /// This control sets the number of the configured power meter. Power meters must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AutoZeroingExternalPowerMeter(int Power_Meter_Number)
        {
            int pInvokeResult = PInvoke.AutoZeroingExternalPowerMeter(this._handle, Power_Meter_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables Auto Config NRP-Zxx. 
        /// 
        /// Note:
        /// 
        /// (1) If the function is enabled, the analyzer automatically configures the first power meter detected at one of the USB ports as Pmtr 1. 
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:CONFigure:AUTO[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Power_Meter_Number">
        /// This control sets the number of the configured power meter. Power meters must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Auto_Config">
        /// Enables or disables Auto Config NRP-Zxx. 
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_TRUE   (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAutoConfigNRPZxx(int Power_Meter_Number, bool Auto_Config)
        {
            int pInvokeResult = PInvoke.SetAutoConfigNRPZxx(this._handle, Power_Meter_Number, System.Convert.ToUInt16(Auto_Config));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the Auto Config NRP-Zxx state. 
        /// 
        /// Note:
        /// 
        /// (1) If the function is enabled, the analyzer automatically configures the first power meter detected at one of the USB ports as Pmtr 1. 
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:CONFigure:AUTO[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Power_Meter_Number">
        /// This control sets the number of the configured power meter. Power meters must be numbered in ascending order, starting with 1. If a number is re-used, the previous generator configuration is overwritten. 
        /// 
        /// Generators can be assigned several times so that the number of configured generators is practically unlimited. 
        /// 
        /// 
        /// Valid Range: &gt; 0
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="Auto_Config">
        /// Returns the Auto Config NRP-Zxx state. 
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAutoConfigNRPZxx(int Power_Meter_Number, out bool Auto_Config)
        {
            ushort Auto_ConfigAsUShort;
            int pInvokeResult = PInvoke.GetAutoConfigNRPZxx(this._handle, Power_Meter_Number, out Auto_ConfigAsUShort);
            Auto_Config = System.Convert.ToBoolean(Auto_ConfigAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the configuration table for external power meters.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:PMETer&lt;pmeter_no&gt;:DELete
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int DeleteExternalPowerMeter()
        {
            int pInvokeResult = PInvoke.DeleteExternalPowerMeter(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches alarm sounds on or off.
        /// 
        /// Remote-control command(s):
        /// SYSTem:SOUNd:ALARm[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Alarm_Sounds">
        /// Switches alarm sounds on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_TRUE   (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetAlarmSoundsState(bool Alarm_Sounds)
        {
            int pInvokeResult = PInvoke.SetAlarmSoundsState(this._handle, System.Convert.ToUInt16(Alarm_Sounds));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns alarm sounds state.
        /// 
        /// Remote-control command(s):
        /// SYSTem:SOUNd:ALARm[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Alarm_Sounds">
        /// Returns alarm sounds state.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetAlarmSoundsState(out bool Alarm_Sounds)
        {
            ushort Alarm_SoundsAsUShort;
            int pInvokeResult = PInvoke.GetAlarmSoundsState(this._handle, out Alarm_SoundsAsUShort);
            Alarm_Sounds = System.Convert.ToBoolean(Alarm_SoundsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches status sounds on or off.
        /// 
        /// Remote-control command(s):
        /// SYSTem:SOUNd:STATus[:STATe] &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Status_Sounds">
        /// Switches status sounds on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_TRUE   (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetStatusSoundsState(bool Status_Sounds)
        {
            int pInvokeResult = PInvoke.SetStatusSoundsState(this._handle, System.Convert.ToUInt16(Status_Sounds));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns status sounds state.
        /// 
        /// Remote-control command(s):
        /// SYSTem:SOUNd:STATus[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Status_Sounds">
        /// Returns status sounds state.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetStatusSoundsState(out bool Status_Sounds)
        {
            ushort Status_SoundsAsUShort;
            int pInvokeResult = PInvoke.GetStatusSoundsState(this._handle, out Status_SoundsAsUShort);
            Status_Sounds = System.Convert.ToBoolean(Status_SoundsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function controls whether binary data is transferred in normal or swapped byte order.
        /// 
        /// Remote-control command(s):
        /// FORMat:BORDer NORMal | SWAPped 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Data_Transfer">
        /// Controls whether binary data is transferred in normal or swapped byte order.
        /// 
        /// Valid Values:
        /// RSZVB_FORMAT_BORDER_SWAP  (0) - Swapped
        /// RSZVB_FORMAT_BORDER_NORM  (1) - Normal
        /// 
        /// Default Value: RSZVB_FORMAT_BORDER_SWAP   (0)
        /// 
        /// Note(s):
        /// 
        /// (1) SWAPped - The least significant bit is transferred first (little endian) 
        /// 
        /// (2) NORMal - The most significant bit is transferred first (big endian) 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetDataTransfer(int Data_Transfer)
        {
            int pInvokeResult = PInvoke.SetDataTransfer(this._handle, Data_Transfer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether binary data is transferred in normal or swapped byte order.
        /// 
        /// Remote-control command(s):
        /// FORMat:BORDer?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Data_Transfer">
        /// Returns whether binary data is transferred in normal or swapped byte order.
        /// 
        /// Valid Values:
        /// RSZVB_FORMAT_BORDER_SWAP  (0) - Swapped
        /// RSZVB_FORMAT_BORDER_NORM  (1) - Normal
        /// 
        /// Note(s):
        /// 
        /// (1) SWAPped - The least significant bit is transferred first (little endian) 
        /// 
        /// (2) NORMal - The most significant bit is transferred first (big endian) 
        /// 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetDataTransfer(out int Data_Transfer)
        {
            int pInvokeResult = PInvoke.GetDataTransfer(this._handle, out Data_Transfer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches the display of a tooltip for remote command errors on or off. The tooltip appears at the bottom of the remote screen and of the manual screen; it is not displayed for SCPI errors no. -113, Undefined header.
        /// 
        /// Remote-control command(s):
        /// SYSTem:ERRor:DISPlay &lt;Boolean&gt;
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Error_Display">
        /// Switches the display of a tooltip for remote command errors on or off.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// 
        /// Default Value: VI_FALSE   (0)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetErrorDisplayState(bool Error_Display)
        {
            int pInvokeResult = PInvoke.SetErrorDisplayState(this._handle, System.Convert.ToUInt16(Error_Display));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the display of a tooltip for remote command errors. 
        /// 
        /// Remote-control command(s):
        /// SYSTem:ERRor:DISPlay?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Error_Display">
        /// Returns the display of a tooltip for remote command errors.
        /// 
        /// Valid Values:
        /// VI_FALSE  (0) - Off
        /// VI_TRUE   (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetErrorDisplayState(out bool Error_Display)
        {
            ushort Error_DisplayAsUShort;
            int pInvokeResult = PInvoke.GetErrorDisplayState(this._handle, out Error_DisplayAsUShort);
            Error_Display = System.Convert.ToBoolean(Error_DisplayAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the frequency converter type for enhanced frequency-converting measurements (with option ZVA-K8, Enhanced Frequency Conversion). 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;Ch&gt;:FREQuency:CONVersion:DEVice:NAME '&lt;Converter Type&gt;'
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Converter_Type">
        /// Selects the frequency converter.
        /// 
        /// Valid Values: not checked
        /// "ZVA-Z110" - Frequency converter R&amp;S ZVA-110
        /// "ZVA-Z220" - Frequency converter R&amp;S ZVA-220
        /// "ZVA-Z325" - Frequency converter R&amp;S ZVA-325
        /// " "        - No frequency converter selected 
        /// 
        /// 
        /// Default Value: "ZVA-Z110"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyConversionType(string Converter_Type)
        {
            int pInvokeResult = PInvoke.SetFrequencyConversionType(this._handle, Converter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the frequency converter type for enhanced frequency-converting measurements (with option ZVA-K8, Enhanced Frequency Conversion). 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;Ch&gt;:FREQuency:CONVersion:DEVice:NAME?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines the size of array passed to argument 'Converter Type'.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Converter_Type">
        /// Returns the frequency converter.
        /// 
        /// Valid Values: not checked
        /// "ZVA-Z110" - Frequency converter R&amp;S ZVA-110
        /// "ZVA-Z220" - Frequency converter R&amp;S ZVA-220
        /// "ZVA-Z325" - Frequency converter R&amp;S ZVA-325
        /// " "        - No frequency converter selected 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyConversionType(int Buffer_Size, System.Text.StringBuilder Converter_Type)
        {
            int pInvokeResult = PInvoke.GetFrequencyConversionType(this._handle, Buffer_Size, Converter_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the test setup (internal or external sources) for the frequency converter measurement (with option ZVA-K8, Enhanced Frequency Conversion). 
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;Ch&gt;:FREQuency:CONVersion:DEVice:MODE RILI | RILE
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Conversion_Source">
        /// Selects the test setup (internal or external sources) for the frequency converter measurement.
        /// 
        /// Valid Values:
        /// RSZVB_FREQ_CONVERSION_RILI (0) - Meas. at Source Frequency
        /// RSZVB_FREQ_CONVERSION_RILE (1) - Meas. at Receiver Frequency 
        /// 
        /// Default Value: RSZVB_FREQ_CONVERSION_RILI (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFrequencyConversionSource(int Conversion_Source)
        {
            int pInvokeResult = PInvoke.SetFrequencyConversionSource(this._handle, Conversion_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the test setup (internal or external sources) for the frequency converter measurement (with option ZVA-K8, Enhanced Frequency Conversion). 
        /// 
        /// 
        /// Note(s):
        /// 
        /// (1) This function is available only on R&amp;S ZVA and ZVT instrument.
        /// 
        /// Remote-control command(s):
        /// SENSe&lt;Ch&gt;:FREQuency:CONVersion:DEVice:MODE?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Conversion_Source">
        /// returns the test setup (internal or external sources) for the frequency converter measurement.
        /// 
        /// Valid Values:
        /// RSZVB_FREQ_CONVERSION_RILI (0) - Meas. at Source Frequency
        /// RSZVB_FREQ_CONVERSION_RILE (1) - Meas. at Receiver Frequency 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFrequencyConversionSource(out int Conversion_Source)
        {
            int pInvokeResult = PInvoke.GetFrequencyConversionSource(this._handle, out Conversion_Source);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables Fast Multiport Correction.
        /// 
        /// Remote-control command(s):
        /// SYSTem:CORRection:FMPort[:STATe]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Fast_Multiport_Correction">
        /// Enables or disables Fast Multiport Correction.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE   (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetFastMultiportCorrection(bool Fast_Multiport_Correction)
        {
            int pInvokeResult = PInvoke.SetFastMultiportCorrection(this._handle, System.Convert.ToUInt16(Fast_Multiport_Correction));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the state of the Fast Multiport Correction.
        /// 
        /// Remote-control command(s):
        /// SYSTem:CORRection:FMPort[:STATe]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Fast_Multiport_Correction">
        /// Returns the state of the Fast Multiport Correction.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetFastMultiportCorrection(out bool Fast_Multiport_Correction)
        {
            ushort Fast_Multiport_CorrectionAsUShort;
            int pInvokeResult = PInvoke.GetFastMultiportCorrection(this._handle, out Fast_Multiport_CorrectionAsUShort);
            Fast_Multiport_Correction = System.Convert.ToBoolean(Fast_Multiport_CorrectionAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Defines power coefficients for frequency converters R&amp;S ZVA-ZxxxE.  
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:DEVice:PCOefficient&lt;Port&gt; &lt;C0&gt;, &lt;C1&gt;, &lt;C2&gt;, &lt;C3&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Port">
        /// Test port number of the analyzer
        /// 
        /// Valid Range:
        ///  &gt; 1
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Coeficient">
        /// Array of 4 power coefficients.
        /// 
        /// Valid Values:
        ///  -500 to 500
        /// 
        /// Note(s):
        /// 
        /// (1) Order of elements in array:
        /// &lt;C0&gt; - C0
        /// &lt;C1&gt; - C1
        /// &lt;C2&gt; - C2
        /// &lt;C3&gt; - C3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerCoeficients(int Port, double[] Coeficient)
        {
            int pInvokeResult = PInvoke.SetPowerCoeficients(this._handle, Port, Coeficient);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns power coefficients for frequency converters R&amp;S ZVA-ZxxxE
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:DEVice:PCOefficient&lt;Port&gt;?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Port">
        /// Test port number of the analyzer
        /// 
        /// Valid Range:
        ///  &gt; 1
        /// 
        /// Default Value: 1
        /// </param>
        /// <param name="Coeficients">
        /// Returned array of power coefficients for frequency converters R&amp;S ZVA-ZxxxE.
        /// 
        /// Note(s):
        /// (1) Order of item in the array
        /// &lt;C0&gt; - C0
        /// &lt;C1&gt; - C1
        /// &lt;C2&gt; - C2
        /// &lt;C3&gt; - C3
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerCoeficients(int Port, double[] Coeficients)
        {
            int pInvokeResult = PInvoke.GetPowerCoeficients(this._handle, Port, Coeficients);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Enables or disables default power coefficients for frequency converters R&amp;S ZVA-ZxxxE.  
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:DEVice:PCOefficient&lt;Port&gt;:DEFault
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Default_Coeficients">
        /// This control enables or disables default power coefficients for frequency converters R&amp;S ZVA-ZxxxE. 
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_FALSE (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetPowerCoeficientsDefault(bool Default_Coeficients)
        {
            int pInvokeResult = PInvoke.SetPowerCoeficientsDefault(this._handle, System.Convert.ToUInt16(Default_Coeficients));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the state of the default power coefficients for frequency converters R&amp;S ZVA-ZxxxE.  
        /// 
        /// Notes:
        /// 
        /// (1) This command is available for frequency converters with electronic attenuators R&amp;S ZVA-ZxxxE.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]FREQuency:CONVersion:DEVice:PCOefficient&lt;Port&gt;:DEFault?&gt;
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Default_Coeficients">
        /// This control returns the state of the default power coefficients for frequency converters R&amp;S ZVA-ZxxxE. 
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPowerCoeficientsDefault(out bool Default_Coeficients)
        {
            ushort Default_CoeficientsAsUShort;
            int pInvokeResult = PInvoke.GetPowerCoeficientsDefault(this._handle, out Default_CoeficientsAsUShort);
            Default_Coeficients = System.Convert.ToBoolean(Default_CoeficientsAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the device ID of a connected extension unit ZVAXxx.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:EUNit:IDN?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the control Device ID.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Device_ID">
        /// Manufacturer, type of the extension unit, 10-digit order number, serial number, see example below. If no extension unit is connected, an execution error is generated. 
        /// 
        /// A possible device response is: 
        /// 
        /// Rohde&amp;Schwarz,ZVAX24,1311250902100001
        /// 
        /// where 1311.2509.02 is the order number of the extension unit R&amp;S ZVAX24, 100001 is the serial number of the connected unit
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExtensionUnitDeviceID(int Buffer_Size, System.Text.StringBuilder Device_ID)
        {
            int pInvokeResult = PInvoke.QueryExtensionUnitDeviceID(this._handle, Buffer_Size, Device_ID);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the hardware options of a connected extension unit ZVAXxx.
        /// 
        /// Remote-control command(s):
        /// SYSTem:COMMunicate:RDEVice:EUNit:OPT?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Buffer_Size">
        /// This control sets the buffer size for the control Device ID.
        /// 
        /// Valid Values: &gt;0
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Options">
        /// Comma-separated list of options.
        /// 
        /// A possible device response is:
        /// 
        /// ZVAX-B211, ZVAX-B252, ZVAX-B273
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int QueryExtensionUnitHardwareOptions(int Buffer_Size, System.Text.StringBuilder Options)
        {
            int pInvokeResult = PInvoke.QueryExtensionUnitHardwareOptions(this._handle, Buffer_Size, Options);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Selects the priority of the running NWA application.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRIority NORMal | ANORmal | HIGH
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Priority">
        /// Selects the priority of the running NWA application.
        /// 
        /// Valid Values:
        /// RSZVB_PRIORITY_NORMAL       (0) - Normal
        /// RSZVB_PRIORITY_ABOVE_NORMAL (1) - Above Normal
        /// RSZVB_PRIORITY_HIGH         (2) - High
        /// 
        /// Default Value: RSZVB_PRIORITY_NORMAL (0)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetNWAApplicationPriority(int Priority)
        {
            int pInvokeResult = PInvoke.SetNWAApplicationPriority(this._handle, Priority);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Queries the priority of the running NWA application.
        /// 
        /// Remote-control command(s):
        /// SYSTem:PRIority?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Priority">
        /// Returns the priority of the running NWA application.
        /// 
        /// Valid Values:
        /// RSZVB_PRIORITY_NORMAL       (0) - Normal
        /// RSZVB_PRIORITY_ABOVE_NORMAL (1) - Above Normal
        /// RSZVB_PRIORITY_HIGH         (2) - High
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNWAApplicationPriority(out int Priority)
        {
            int pInvokeResult = PInvoke.GetNWAApplicationPriority(this._handle, out Priority);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Switches the analyzer to the standby state.
        /// 
        /// Remote-control command(s):
        /// SYSTem:SHUTdown
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SystemShutdown()
        {
            int pInvokeResult = PInvoke.SystemShutdown(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function assigns the label to the soft key 1...8. The label may contain the '\n'- character to form multiline labels.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:USER:FKEY 0
        /// :SYSTem:USER:FKEY &lt;1...8&gt;,'&lt;Label&gt;'
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Key_Number">
        /// Sets the softkey number.
        /// 
        /// Valid Values:
        /// 0
        /// 1 to 8
        /// 
        /// Default Value:
        /// 1
        /// 
        /// Note:
        /// (1) 0 removes the user programmable softkeys and displays the standard buttons 'Go to Local' and 'Display On/Off'. Use the programmable softkeys in conjunction with :SYSTem:KLOCk ON as a total user lockout function. The user programmable softkeys are only displayed if the VNA is in remote mode. 
        /// </param>
        /// <param name="Label">
        /// Sets the key label
        /// 
        /// Valid Values:
        /// any string
        /// 
        /// Default Value:
        /// ""
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetSoftKeyLabel(int Key_Number, string Label)
        {
            int pInvokeResult = PInvoke.SetSoftKeyLabel(this._handle, Key_Number, Label);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the number and label of the softkey pressed most recently. If no softkey was pressed, the string 0,'' is returned.
        /// 
        /// Remote-control command(s):
        /// :SYSTem:USER:FKEY?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Key_Number">
        /// Returns the softkey number.
        /// 
        /// </param>
        /// <param name="Buffer_Size">
        /// This control defines the size of array passed to argument 'Label'.
        /// 
        /// Valid Values: not checked
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Label">
        /// Returns the key label
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetPressedSoftKey(out int Key_Number, int Buffer_Size, System.Text.StringBuilder Label)
        {
            int pInvokeResult = PInvoke.GetPressedSoftKey(this._handle, out Key_Number, Buffer_Size, Label);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets a channel-dependent four-bit decimal value to control four independent output signals at the USER CONTROL connector (applied to pins 8, 9, 10, 11). The output signals are 3.3 V TTL signals which can be used to differentiate between up to 16 independent analyzer states. This function itself does not change the analyzer state.
        /// 
        /// Remote-control command(s):
        /// CONTrol:AUXiliary:C[:DATA]
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel_Bits">
        /// This control sets a channel-dependent four-bit decimal value to control four independent output signals at the USER CONTROL connector (applied to pins 8, 9, 10, 11).
        /// 
        /// Valid Range: 0 to 15
        /// 
        /// Default Value: 0
        /// 
        /// Note(s):
        /// 
        /// (1) The transferred values correspond to the following states of the USER CONTROL connector:
        /// 0 - no signal at any of the four pins 8, 9, 10, 11
        /// 1 - output signal at pin 8
        /// 2 - output signal at pin 9
        /// 3 - output signal at pin 8 and 9 
        /// ...
        /// 15 - output signal at pin 8, 9, 10 and 11 
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetChannelBits(int Channel_Bits)
        {
            int pInvokeResult = PInvoke.SetChannelBits(this._handle, Channel_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries a channel-dependent four-bit decimal value to control four independent output signals at the USER CONTROL connector (applied to pins 8, 9, 10, 11). The output signals are 3.3 V TTL signals which can be used to differentiate between up to 16 independent analyzer states. This function itself does not change the analyzer state.
        /// 
        /// Remote-control command(s):
        /// CONTrol:AUXiliary:C[:DATA]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Channel_Bits">
        /// This control returns a channel-dependent four-bit decimal value to control four independent output signals at the USER CONTROL connector (applied to pins 8, 9, 10, 11).
        /// 
        /// Valid Range: 0 to 15
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetChannelBits(out int Channel_Bits)
        {
            int pInvokeResult = PInvoke.GetChannelBits(this._handle, out Channel_Bits);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function selects the source of the reference oscillator signal.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]ROSCillator[:SOURce] INTernal | EXTernal
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Reference">
        /// This control selects the source of the reference oscillator signal.
        /// 
        /// Valid Values:
        /// RSZVB_INT (0) - Internal
        /// RSZVB_EXT (1) - External
        /// 
        /// Default Value: RSZVB_INT (0)
        /// 
        /// Note(s):
        /// 
        /// (1) Internal - Select internal 10 MHz reference oscillator.
        /// 
        /// (2) External - Select external reference clock.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReference(int Reference)
        {
            int pInvokeResult = PInvoke.SetReference(this._handle, Reference);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the source of the reference oscillator signal.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]ROSCillator[:SOURce]?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Reference">
        /// This control returns the source of the reference oscillator signal.
        /// 
        /// Valid Values:
        /// RSZVB_INT (0) - Internal
        /// RSZVB_EXT (1) - External
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReference(out int Reference)
        {
            int pInvokeResult = PInvoke.GetReference(this._handle, out Reference);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function specifies the frequency of the external reference oscillator.
        /// 
        /// Note(s):
        /// 
        /// (1) The frequency must be 10 MHz.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]ROSCillator:EXTernal:FREQuency 10000000.0
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SetReferenceFrequency()
        {
            int pInvokeResult = PInvoke.SetReferenceFrequency(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries  the frequency of the external reference oscillator.
        /// 
        /// Note(s):
        /// 
        /// (1) The frequency must be 10 MHz.
        /// 
        /// Remote-control command(s):
        /// [SENSe&lt;Ch&gt;:]ROSCillator:EXTernal:FREQuency?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Reference_Frequency">
        /// This control queries  the frequency of the external reference oscillator.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetReferenceFrequency(out double Reference_Frequency)
        {
            int pInvokeResult = PInvoke.GetReferenceFrequency(this._handle, out Reference_Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the Enable, NTransition, and PTransition bits     of status questionable and operating registers.
        /// 
        /// Note:
        /// 
        /// (1) For detailed description of Status Reporting System see also operating manual.
        /// 
        /// Remote-control command(s):
        /// STATus:PRESet
        /// STATus:QUEStionable:ENABle
        /// STATus:QUEStionable:LIMit&lt;1|2&gt;:ENABle
        /// STATus:QUEStionable:INTegrity:ENABle
        /// STATus:QUEStionable:INTegrity:HARDware:ENABle
        /// STATus:QUEStionable:PTRansition
        /// STATus:QUEStionable:LIMit&lt;1|2&gt;:PTRansition
        /// STATus:QUEStionable:INTegrity:PTRansition
        /// STATus:QUEStionable:INTegrity:HARDware:PTRansition
        /// STATus:QUEStionable:NTRansition
        /// STATus:QUEStionable:LIMit&lt;1|2&gt;:NTRansition
        /// STATus:QUEStionable:INTegrity:NTRansition
        /// STATus:QUEStionable:INTegrity:HARDware:NTRansition
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Register_Operation">
        /// Specifies the operation to perform.
        /// 
        /// Valid Range:
        /// 0 - Preset Registers (Default Value)
        /// 1 - Set Questionable Register
        /// 2 - Set Operation Register
        /// 
        /// Notes:
        /// 
        /// (1) Preset Registers:
        /// This command resets the edge detectors and ENABle parts of all registers to a defined value. All PTRansition parts are set to FFFFh, i.e., all transitions from 0 to 1 are detected. All NTRansition parts are set to 0, i.e., a transition from 1 to 0 in a CONDition bit is not detected. The ENABle part of the STATus:OPERation and STATus:QUEStionable registers are set to 0, i.e., all events in these registers are not passed on.
        /// 
        /// </param>
        /// <param name="Questionable_Register">
        /// This control selects the registers that will be configured. 
        /// 
        /// Valid Range:
        /// 0 - Main(Default Value)
        /// 1 - Limit Screen A
        /// 2 - Limit Screen B
        /// 3 - Integrity
        /// 4 - Integrity Hardware
        /// </param>
        /// <param name="Enable">
        /// This control sets the enable bits of the status register.  
        /// 
        /// Valid range: 0 to 65535
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// 
        /// (1) The ENABle register selectively enables the individual events of the associated EVENt section for the sum bit in the status byte.
        /// 
        /// </param>
        /// <param name="PTransition">
        /// This control sets the PTransition bits (edge detectors) of the status register.  
        /// 
        /// Valid range: 0 to 65535
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <param name="NTransition">
        /// This control sets the NTransition bits (edge detectors) of the status register.  
        /// 
        /// Valid range: 0 to 65535
        /// 
        /// Default Value: 0
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int setStatusRegister(int Register_Operation, int Questionable_Register, int Enable, int PTransition, int NTransition)
        {
            int pInvokeResult = PInvoke.setStatusRegister(this._handle, Register_Operation, Questionable_Register, Enable, PTransition, NTransition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function contains the commands for the querying status reporting system.
        /// 
        /// Note:
        /// 
        /// For detailed description of Status Reporting System see also operating manual.
        /// 
        /// Remote-control command(s):
        /// STATus:OPERation:EVENt?
        /// STATus:OPERation:CONDition?
        /// STATus:QUEStionable:EVENt?
        /// STATus:QUEStionable:CONDition?
        /// STATus:QUEStionable:LIMit&lt;1|2&gt;:EVENt?
        /// STATus:QUEStionable:LIMit&lt;1|2&gt;:CONDition?
        /// STATus:QUEStionable:INTegrity:EVENt?
        /// STATus:QUEStionable:INTegrity:CONDition? 
        /// STATus:QUEStionable:INTegrity:HARDware:EVENt?
        /// STATus:QUEStionable:INTegrity:HARDware:CONDition?
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Status_Registers_Query">
        /// This control selects the registers to be queried.
        /// 
        /// Valid Range:
        /// 0 - Operation Event (Default Value)
        /// 1 - Operation Condition
        /// 2 - Main Event
        /// 3 - Main Condition
        /// 4 - Limit Event Screen A
        /// 5 - Limit Condition Screen A
        /// 6 - Limit Event Screen B
        /// 7 - Limit Condition Screen B
        /// 8 - Integrity Event
        /// 9 - Integrity Condition
        /// 10 - Integrity Hardware Event
        /// 11 - Integrity Hardware Condition
        /// 
        /// Notes:
        /// 
        /// (1) Operation Event:
        /// This command queries the contents of the EVENt section of the STATus:OPERation register.
        /// 
        /// (2) Operation Condition:
        /// This command queries the CONDition section of the STATus:OPERation register.
        /// 
        /// (3) Main Event:
        /// This command queries the contents of the EVENt section of the STATus:QUEStionable register.
        /// 
        /// (4) Main Condition:
        /// This command queries the CONDition section of the STATus:QUEStionable register.
        /// 
        /// (5) Limit Event Screen A(B):
        /// This command queries the contents of the EVENt section of the STATus:QUEStionable:LIMit register.
        /// 
        /// (6) Limit Condition Screen A(B):
        /// This command queries the contents of the CONDition section of the STATus:QUEStionable:LIMit register.
        /// 
        /// (7) Integrity Event:
        /// This command returns the contents of the EVENt part of the QUEStionable:INTegrity register. Reading an EVENt register clears it. 
        /// 
        /// (8) Integrity Condition:
        /// This command returns the contents of the CONDition part of the QUEStionable:INTegrity register. Reading the CONDition registers is nondestructive. 
        /// 
        /// (9) Integrity Hardware Event:
        /// This command returns the contents of the EVENt part of the QUEStionable:INTegrity:HARDware register. Reading an EVENt register clears it. 
        /// 
        /// (10) Integrity Hardware Condition:
        /// This command returns the contents of the CONDition part of the QUEStionable:INTegrity:HARDware register. Reading the CONDition registers is nondestructive. 
        /// </param>
        /// <param name="Register_Value">
        /// Returns content of selected register.
        /// 
        /// Note:
        /// 
        /// For detailed description of Status Reporting System see also operating manual.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int getStatusRegister(int Status_Registers_Query, out int Register_Value)
        {
            int pInvokeResult = PInvoke.getStatusRegister(this._handle, Status_Registers_Query, out Register_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Sets a minimum timeout value for driver I/O transactions in milliseconds. The timeout period may vary on computer platforms.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Timeout">
        /// Sets the I/O timeout for all functions in the driver. It is specified in milliseconds.
        /// 
        /// Valid Range: &gt; 0 ms
        /// 
        /// Default Value: 10000 ms
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int setTimeOut(int Timeout)
        {
            int pInvokeResult = PInvoke.setTimeOut(this._handle, Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the timeout value for driver I/O transactions in milliseconds.
        /// 
        /// The timeout period may vary on computer platforms.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Timeout">
        /// Returns the timeout value for driver I/O transactions in milliseconds.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int getTimeOut(out int Timeout)
        {
            int pInvokeResult = PInvoke.getTimeOut(this._handle, out Timeout);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches state checking of the instrument (reading of the Standard Event Register and checking it for error) status subsystem. Driver functions are using state checking which is by default enabled.
        /// 
        /// Note:
        /// 
        /// (1) In debug mode enable state checking.
        /// 
        /// (2) For better bus throughput and instruments performance disable state checking.
        /// 
        /// (3) When state checking is disabled driver does not check if correct instrument model or option is used with each of the functions. This might cause unexpected behaviour of the instrument.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="State_Checking">
        /// This control switches instrument state checking On or Off.
        /// 
        /// Valid Values:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On (Default Value)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int errorCheckState(bool State_Checking)
        {
            int pInvokeResult = PInvoke.errorCheckState(this._handle, System.Convert.ToUInt16(State_Checking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches option checking of the instrument.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Option_Checking">
        /// This control switches instrument and option checking On or Off.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On (Default Value)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmu_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFC0002  Parameter 2 (State Checking) out of range.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int setCheckOption(bool Option_Checking)
        {
            int pInvokeResult = PInvoke.setCheckOption(this._handle, System.Convert.ToUInt16(Option_Checking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function switches range checking of the instrument.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Range_Checking">
        /// This control switches range checking On or Off.
        /// 
        /// Valid Range:
        /// VI_FALSE (0) - Off
        /// VI_TRUE  (1) - On
        /// 
        /// Default Value: VI_TRUE (1)
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rssmu_error_message function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// BFFC0002  Parameter 2 (State Checking) out of range.
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int setCheckRange(bool Range_Checking)
        {
            int pInvokeResult = PInvoke.setCheckRange(this._handle, System.Convert.ToUInt16(Range_Checking));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes commands and queries to the instrument to modify parameters and query device settings.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Write_Buffer">
        /// The user can use this control to send common commands and queries to the instrument. This control can also be used to write any valid command to the instrument.
        /// 
        /// Default Value:  "*RST"
        /// 
        /// Notes:
        /// 
        /// (1) The command or query to be sent to the instrument may be a literal enclosed in double quotes i.e. "*RST" or may be contained in a variable of type string.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int writeInstrData(string Write_Buffer)
        {
            int pInvokeResult = PInvoke.writeInstrData(this._handle, Write_Buffer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads data from the instrument's output buffer and returns it to the specified variable in memory.
        /// 
        /// Notes:
        /// 
        /// (1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        /// 
        /// (2) If valid data is not available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled this function will hang indefinitely and it may be necessary to reboot the computer to break out.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Number_Bytes_To_Read">
        /// The number of bytes specified by this control should be greater than or equal to the number of bytes which are to be read from the instrument. If the actual number of bytes to be read is greater than the number this control specifies then multiple reads will be required to empty the instrument's output buffer.
        /// 
        /// If the instrument's output buffer is not emptied the instrument may return invalid data when future reads are performed.
        /// 
        /// Default Value:  50 (See NOTE 2)
        /// 
        /// Notes:
        /// 
        /// (1) If NO DATA is available at the instrument's output buffer when this function is called the instrument will hang up and the function will not return until it times out.  If the time-out is disabled, this function will hang indefinitely and it may be necessary to reboot the computer.
        /// 
        /// (2) If the number of bytes expected is greater than 50 the value of this control may be increased. If the actual number of bytes read is larger than the declared size of the read buffer a run-time error will be generated.
        /// 
        /// </param>
        /// <param name="Read_Buffer">
        /// The incoming data from the instrument is placed into this variable.
        /// 
        /// Notes:
        /// 
        /// (1) Because the instrument may return both numeric and text data in response to queries this function returns the data in string format.
        /// 
        /// (2) This function does not overwrite any old data left in the string variable from the last time the function was called. String data in LabWindows/CVI is terminated with an ASCII null(0x0) and string manipulation functions will only recognize data before the ASCII null.
        /// 
        /// (3) The declared size of the string variable must be greater than the actual number of bytes read from the instrument if it is not a run-time error will be generated.
        /// 
        /// </param>
        /// <param name="NumBytes_Read">
        /// This variable contains the actual number of bytes read from the instrument. This is the value which is returned by the read function.
        /// 
        /// Notes:
        /// 
        /// (1) If the actual number of bytes read is less than the number of bytes specified in the Number Bytes To Read control then the output buffer has probably been emptied. If the read function fails and the number of bytes read is 0, the most probable cause for the failure is there was no data available at the instrument's output buffer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int readInstrData(int Number_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int NumBytes_Read)
        {
            int pInvokeResult = PInvoke.readInstrData(this._handle, Number_Bytes_To_Read, Read_Buffer, out NumBytes_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument to a known state and sends initialization commands to the instrument that set any necessary programmatic variables to the state necessary for the operation of the instrument driver.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function runs the instrument's self test routine and returns the test result(s).
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Self_Test_Result">
        /// This control contains the value returned from the instrument self test. Zero means success. For any other code, see the device's operator's manual.
        /// 
        /// </param>
        /// <param name="Self_Test_Message">
        /// This control contains the string returned from the self test. See the device's operation manual for an explanation of the string's contents.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads an error code from the instrument's error queue.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Error_Code">
        /// This control returns the error code read from the instrument's error queue.
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// This control returns the error message string read from the instrument's error message queue.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the revision numbers of the instrument driver and instrument firmware, and tells the user with which  instrument firmware this revision of the driver is compatible.
        /// 
        /// </summary>
        /// <param name="Instrument_Handle">
        /// This control accepts the Instrument Handle returned by the Initialize function to select the desired instrument driver session.
        /// 
        /// Default Value:  None
        /// </param>
        /// <param name="Instrument_Driver_Revision">
        /// This control returns the Instrument Driver Software Revision.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <param name="Firmware_Revision">
        /// This control returns the Instrument Firmware Revision.
        /// 
        /// Notes:
        /// 
        /// (1) The array must contain at least 256 elements ViChar[256].
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred. To obtain a text description of the status code, call the rszvb_error_message function.
        /// 
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different include files that contain the defined constants for the particular status codes:
        /// 
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        /// 
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = System.IntPtr.Zero;
            }
            this._disposed = true;
        }

        private class PInvoke
        {

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ApplicationExample", CallingConvention = CallingConvention.StdCall)]
            public static extern int ApplicationExample(System.IntPtr Instrument_Handle, int Channel, double Start_Frequency, double Stop_Frequency, double Power, out int No_of_Values, [In, Out] double[] Stimulus_Data, [In, Out] double[] Response_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WindowNew", CallingConvention = CallingConvention.StdCall)]
            public static extern int WindowNew(System.IntPtr Instrument_Handle, string Setup_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WindowSelect", CallingConvention = CallingConvention.StdCall)]
            public static extern int WindowSelect(System.IntPtr Instrument_Handle, string Setup_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WindowClose", CallingConvention = CallingConvention.StdCall)]
            public static extern int WindowClose(System.IntPtr Instrument_Handle, string Setup_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WindowList", CallingConvention = CallingConvention.StdCall)]
            public static extern int WindowList(System.IntPtr Instrument_Handle, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_Print", CallingConvention = CallingConvention.StdCall)]
            public static extern int Print(System.IntPtr Instrument_Handle, string Printer_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_PrinttoFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int PrinttoFile(System.IntPtr Instrument_Handle, string File_Name, int File_Format, int Diagram_Area, ushort Logo, ushort Date_and_Time, ushort Marker_List);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_PrintSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int PrintSetup(System.IntPtr Instrument_Handle, int Diagram_Area, ushort Logo, ushort Date_and_Time, ushort Marker_List, int Page_Orientation, double Left_Margin, double Right_Margin, double Top_Margin, double Bottom_Margin);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_FileManager", CallingConvention = CallingConvention.StdCall)]
            public static extern int FileManager(System.IntPtr Instrument_Handle, int Operation_to_be_Performed, string Source, string Destination);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCurrentDirectory", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCurrentDirectory(System.IntPtr Instrument_Handle, System.Text.StringBuilder Current_Directory);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_FileCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int FileCatalog(System.IntPtr Instrument_Handle, string Directory, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetupSave", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetupSave(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetupRecall", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetupRecall(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_readToFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int readToFile(System.IntPtr Instrument_Handle, string Source, string Destination);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_writeFromFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int writeFromFile(System.IntPtr Instrument_Handle, string Source, string Destination);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectPowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectPowerMeter(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Power_Meter, int Out_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectSParameters", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectSParameters(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Port, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectMoreSParameters", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectMoreSParameters(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectRatios", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectRatios(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Ratios);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectMoreRatios", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectMoreRatios(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Source_Port, int Numerator_Type, int Numerator_Port_Number, int Denominator_Type, int Denominator_Port_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectMoreRatiosWithDetector", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectMoreRatiosWithDetector(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Source_Port, int Numerator_Type, int Numerator_Port_Number, int Denominator_Type, int Denominator_Port_Number, int Detector, double Observation_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectWaveQuantities", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectWaveQuantities(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Wave_Quantities);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectMoreWaveQuantities", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectMoreWaveQuantities(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Wave_Quantity_Type, int Wave_Quantity_Port_Number, int Source_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectMoreWaveQuantitiesWithDetector", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectMoreWaveQuantitiesWithDetector(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Wave_Quantity_Type, int Wave_Quantity_Port_Number, int Source_Port, int Detector, double Observation_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectImpedances", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectImpedances(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Port, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectMoreImpedances", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectMoreImpedances(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectAdmitances", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectAdmitances(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Port, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectMoreAdmitances", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectMoreAdmitances(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectZParameters", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectZParameters(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectYParameters", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectYParameters(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int Out_Mode, int Out_Port, int In_Mode, int In_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectStabilityFactors", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectStabilityFactors(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int DUT_Out, int DUT_In, int Stability_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectDCMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectDCMeasurement(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int DC_Meas);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectPAEMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectPAEMeasurement(System.IntPtr Instrument_Handle, int Channel, string Trace_Name, int DUT_Out, int DUT_In);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefinePAEMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefinePAEMeasurement(System.IntPtr Instrument_Handle, int Channel__Trace_, int Test_Model, double Constant_c, double Constant_k);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceFormat(System.IntPtr Instrument_Handle, int Channel__Trace_, int Format);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceFormat(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Format);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetApertureGroupDelaySteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetApertureGroupDelaySteps(System.IntPtr Instrument_Handle, int Channel__Trace_, int Steps);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetApertureGroupDelaySteps", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetApertureGroupDelaySteps(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Steps);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceAutoscale", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceAutoscale(System.IntPtr Instrument_Handle, int Window, int Window__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceAutoscaleByName", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceAutoscaleByName(System.IntPtr Instrument_Handle, int Window, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceBottom", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceBottom(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, double Bottom);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceBottom", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceBottom(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, out double Bottom);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceScaleDivisions", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceScaleDivisions(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, double Scale_Divisions);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceScaleDivisionsByName", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceScaleDivisionsByName(System.IntPtr Instrument_Handle, int Window, double Scale_Divisions, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceScaleDivisions", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceScaleDivisions(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, out double Scale_Divisions);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceRefValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceRefValue(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, double Reference_Level);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceRefValueByName", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceRefValueByName(System.IntPtr Instrument_Handle, int Window, double Reference_Level, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceRefValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceRefValue(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, out double Reference_Level);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceRefPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceRefPosition(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, double Reference_Position);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceRefPositionByName", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceRefPositionByName(System.IntPtr Instrument_Handle, int Window, double Reference_Position, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceRefPosition", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceRefPosition(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, out double Reference_Position);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceTop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceTop(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, double Top);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceTop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceTop(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, out double Top);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceAdd", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceAdd(System.IntPtr Instrument_Handle, int Channel, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceDisplayState(System.IntPtr Instrument_Handle, int Trace_Type, string Single_Trace_Name, ushort Show_Trace);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceDisplayState(System.IntPtr Instrument_Handle, int Trace_Type, string Single_Trace_Name, out ushort Show_Trace);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceAddSParameterGroup", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceAddSParameterGroup(System.IntPtr Instrument_Handle, int Channel, int Number_of_Logical_Port_Numbers, int[] Logical_Port_Number_s_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryTraceAddSParameterGroup", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryTraceAddSParameterGroup(System.IntPtr Instrument_Handle, int Channel, [In, Out] int[] Logical_Port_Number_s_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceAddDiagramArea", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceAddDiagramArea(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, int Channel, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceAssignDiagramArea", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceAssignDiagramArea(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceAssignWindowDiagramArea", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceAssignWindowDiagramArea(System.IntPtr Instrument_Handle, int Window, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceUnassignDiagramArea", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceUnassignDiagramArea(System.IntPtr Instrument_Handle, int Window, int Window__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceSelect", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceSelect(System.IntPtr Instrument_Handle, int Channel, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceDelete", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceDelete(System.IntPtr Instrument_Handle, int Channel, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceList", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceList(System.IntPtr Instrument_Handle, int Channel, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceRename", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceRename(System.IntPtr Instrument_Handle, string Old_Trace_Name, string New_Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelTraceRename", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelTraceRename(System.IntPtr Instrument_Handle, int Channel, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceListCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceListCatalog(System.IntPtr Instrument_Handle, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceGetTraceName", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceGetTraceName(System.IntPtr Instrument_Handle, int Trace_Number, System.Text.StringBuilder Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceGetTraceNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceGetTraceNumber(System.IntPtr Instrument_Handle, string Trace_Name, out int Trace_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceGetChannelName", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceGetChannelName(System.IntPtr Instrument_Handle, string Trace_Name, System.Text.StringBuilder Channel_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceGetChannelNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceGetChannelNumber(System.IntPtr Instrument_Handle, string Trace_Name, out int Channel_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceDataToMemory", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceDataToMemory(System.IntPtr Instrument_Handle, int Channel__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceDataToMemoryTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceDataToMemoryTrace(System.IntPtr Instrument_Handle, string Memory_Trace, string Data_Trace);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceMathToMemoryTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceMathToMemoryTrace(System.IntPtr Instrument_Handle, string Memory_Trace, string Data_Trace);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteMemoryTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteMemoryTrace(System.IntPtr Instrument_Handle, int Memory_Trace);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceUserDefinedMath", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceUserDefinedMath(System.IntPtr Instrument_Handle, int Channel__Trace_, string Mathematical_Expression);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceMathState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceMathState(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Math_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceMathState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceMathState(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Math_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceMathFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceMathFunction(System.IntPtr Instrument_Handle, int Channel__Trace_, int Mathematical_Function);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceMathFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceMathFunction(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Mathematical_Function);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceMathWaveQuantityState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceMathWaveQuantityState(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Math_Wave_Quantity_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceMathWaveQuantityState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceMathWaveQuantityState(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Math_Wave_Quantity_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceTransformDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceTransformDomain(System.IntPtr Instrument_Handle, int Channel__Trace_, int Transform_Domain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceTransformDomain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceTransformDomain(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Transform_Domain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceTransformConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceTransformConversion(System.IntPtr Instrument_Handle, int Channel__Trace_, int Conversion);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceTransformConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceTransformConversion(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Conversion);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainStartTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainStartTime(System.IntPtr Instrument_Handle, int Channel__Trace_, double Start_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainStartTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainStartTime(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Start_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainStopTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainStopTime(System.IntPtr Instrument_Handle, int Channel__Trace_, double Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainStopTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainStopTime(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainCenterTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainCenterTime(System.IntPtr Instrument_Handle, int Channel__Trace_, double Center_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainCenterTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainCenterTime(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Center_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainTimeSpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainTimeSpan(System.IntPtr Instrument_Handle, int Channel__Trace_, double Time_Span);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainTimeSpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainTimeSpan(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Time_Span);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainTimeAxisScaling", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainTimeAxisScaling(System.IntPtr Instrument_Handle, int Channel__Trace_, int Time_Axis_Scaling);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainTimeAxisScaling", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainTimeAxisScaling(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Time_Axis_Scaling);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainTransformationType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainTransformationType(System.IntPtr Instrument_Handle, int Channel__Trace_, int Transformation_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainTransformationType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainTransformationType(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Transformation_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainTransformationFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainTransformationFilter(System.IntPtr Instrument_Handle, int Channel__Trace_, int Filter_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainTransformationFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainTransformationFilter(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Filter_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainTransformationSidebandSuppression", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainTransformationSidebandSuppression(System.IntPtr Instrument_Handle, int Channel__Trace_, double Sideband_Suppression);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainTransformationSidebandSuppression", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainTransformationSidebandSuppression(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Sideband_Suppression);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeDomainTransformationResolutionEfactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeDomainTransformationResolutionEfactor(System.IntPtr Instrument_Handle, int Channel__Trace_, double Resolution);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeDomainTransformationResolutionEfactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeDomainTransformationResolutionEfactor(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Resolution);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHarmonicGridAndKeep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHarmonicGridAndKeep(System.IntPtr Instrument_Handle, int Channel__Trace_, int Calculation_Method);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDCValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDCValue(System.IntPtr Instrument_Handle, int Channel__Trace_, double DC_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDCValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDCValue(System.IntPtr Instrument_Handle, int Channel__Trace_, out double DC_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ExtrapolateDCValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int ExtrapolateDCValue(System.IntPtr Instrument_Handle, int Channel__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetContinuousExtrapolation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetContinuousExtrapolation(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Continuous_Extrapolation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetContinuousExtrapolation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetContinuousExtrapolation(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Continuous_Extrapolation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalculateHarmonicGrid", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalculateHarmonicGrid(System.IntPtr Instrument_Handle, int Channel__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateState(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Time_Gate);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateState(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Time_Gate);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateStartTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateStartTime(System.IntPtr Instrument_Handle, int Channel__Trace_, double Start_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateStartTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateStartTime(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Start_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateStopTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateStopTime(System.IntPtr Instrument_Handle, int Channel__Trace_, double Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateStopTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateStopTime(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateCenterTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateCenterTime(System.IntPtr Instrument_Handle, int Channel__Trace_, double Center_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateCenterTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateCenterTime(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Center_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateType(System.IntPtr Instrument_Handle, int Channel__Trace_, int Time_Gate_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateType(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Time_Gate_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateFilter(System.IntPtr Instrument_Handle, int Channel__Trace_, int Filter_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateFilter(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Filter_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateSidebandSuppression", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateSidebandSuppression(System.IntPtr Instrument_Handle, int Channel__Trace_, double Sideband_Suppression);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateSidebandSuppression", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateSidebandSuppression(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Sideband_Suppression);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateShape(System.IntPtr Instrument_Handle, int Channel__Trace_, int Time_Gate_Shape);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateShape", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateShape(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Time_Gate_Shape);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateSpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateSpan(System.IntPtr Instrument_Handle, int Channel__Trace_, double Span);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateSpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateSpan(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Span);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTimeGateDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTimeGateDisplayState(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Time_Gate_Display);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTimeGateDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTimeGateDisplayState(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Time_Gate_Display);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceEvaluationRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceEvaluationRange(System.IntPtr Instrument_Handle, int Channel__Trace_, int Evaluation_Range, double Start, double Stop);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceStatisticalEvaluation", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceStatisticalEvaluation(System.IntPtr Instrument_Handle, int Channel__Trace_, int Statistical_Parameter, ushort Info_Field, [In, Out] double[] Response_Value_s_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceEvaluationRangeShow", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceEvaluationRangeShow(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Show_Range);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceEvaluationRangeShow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceEvaluationRangeShow(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Show_Range);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceCompressionValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceCompressionValue(System.IntPtr Instrument_Handle, int Channel__Trace_, double Compression_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceCompressionValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceCompressionValue(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Compression_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceCompressionPoint", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceCompressionPoint(System.IntPtr Instrument_Handle, int Channel__Trace_, out double Compression_Point_In, out double Compression_Point_Out);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDisplayResultsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayResultsState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Result_Type, ushort Display_Results);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDisplayResultsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayResultsState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Result_Type, out ushort Display_Results);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceSmoothing", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceSmoothing(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Smoothing, double Aperture);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceSmoothing", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceSmoothing(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Smoothing, out double Aperture);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseData", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseData(System.IntPtr Instrument_Handle, int Channel__Trace_, int Data_Format, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseDataError", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseDataError(System.IntPtr Instrument_Handle, int Channel__Trace_, int Error_Term, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseDataAll", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseDataAll(System.IntPtr Instrument_Handle, int Channel__Trace_, int Data_Format, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseDataAllData", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseDataAllData(System.IntPtr Instrument_Handle, int Channel__Trace_, int Data_Format, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseSingleSweepData", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseSingleSweepData(System.IntPtr Instrument_Handle, int Channel__Trace_, int Sweep_Number, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseSingleSweepDataCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseSingleSweepDataCount(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Sweep_Count);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseSingleSweepDataForward", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseSingleSweepDataForward(System.IntPtr Instrument_Handle, int Channel__Trace_, int Sweep_Number, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceStimulusData", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceStimulusData(System.IntPtr Instrument_Handle, int Channel__Trace_, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WriteMemoryTraceData", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteMemoryTraceData(System.IntPtr Instrument_Handle, int Channel__Trace_, int No_of_Points, double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WriteMemoryTraceDataExt", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteMemoryTraceDataExt(System.IntPtr Instrument_Handle, int Channel__Trace_, int Data_Format, int No_of_Points, double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceFormatZVR", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceFormatZVR(System.IntPtr Instrument_Handle, int Data_Format);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceFormatZVR", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceFormatZVR(System.IntPtr Instrument_Handle, out int Data_Format);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseDataZVR", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseDataZVR(System.IntPtr Instrument_Handle, int Data_Format, int Values_To_Return, out int No_Of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceStimulusDataZVR", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceStimulusDataZVR(System.IntPtr Instrument_Handle, int Data_Format, int Values_To_Return, out int No_Of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceResponseDataSParameterGroup", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceResponseDataSParameterGroup(System.IntPtr Instrument_Handle, int Channel__Trace_, int Data_Format, int Values_To_Return, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceImportData", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceImportData(System.IntPtr Instrument_Handle, string Trace_Name, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceExportData", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceExportData(System.IntPtr Instrument_Handle, string Trace_Name, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceExportDataWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceExportDataWithOptions(System.IntPtr Instrument_Handle, string Trace_Name, string File_Name, int Export_Format, int Export_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceExportDataWithOptionsExt", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceExportDataWithOptionsExt(System.IntPtr Instrument_Handle, string Trace_Name, string File_Name, int Export_Format, int Export_Data, int Decimal_Separator, int Field_Separator);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelTraceExportData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelTraceExportData(System.IntPtr Instrument_Handle, int Select_Channel, int Channel__Trace_, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelTraceExportDataWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelTraceExportDataWithOptions(System.IntPtr Instrument_Handle, int Select_Channel, int Channel__Trace_, string File_Name, int Export_Format, int Export_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelTraceExportDataWithOptionsExt", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelTraceExportDataWithOptionsExt(System.IntPtr Instrument_Handle, int Select_Channel, int Channel__Trace_, string File_Name, int Export_Format, int Export_Data, int Decimal_Separator, int Field_Separator);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceShiftStimulusValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceShiftStimulusValue(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, double Shift_Stimulus_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceShiftResponseValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceShiftResponseValue(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, double Magnitude, double Phase, double Real, double Imaginary);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHold", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHold(System.IntPtr Instrument_Handle, int Channel, int Hold);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetHold", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHold(System.IntPtr Instrument_Handle, int Channel, out int Hold);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LinearityDeviationManual", CallingConvention = CallingConvention.StdCall)]
            public static extern int LinearityDeviationManual(System.IntPtr Instrument_Handle, int Channel, double Slope, double Constant, double Electrical_Length);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LinearityDeviationAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int LinearityDeviationAuto(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLinearityDeviationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLinearityDeviationState(System.IntPtr Instrument_Handle, int Channel, int State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLinearityDeviationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLinearityDeviationState(System.IntPtr Instrument_Handle, int Channel, out int State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLinearityDeviationSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLinearityDeviationSlope(System.IntPtr Instrument_Handle, int Channel, double Slope);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLinearityDeviationSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLinearityDeviationSlope(System.IntPtr Instrument_Handle, int Channel, out double Slope);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLinearityDeviationConstant", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLinearityDeviationConstant(System.IntPtr Instrument_Handle, int Channel, double Constant);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLinearityDeviationConstant", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLinearityDeviationConstant(System.IntPtr Instrument_Handle, int Channel, out double Constant);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLinearityDeviationElectricalLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLinearityDeviationElectricalLength(System.IntPtr Instrument_Handle, int Channel, double Electrical_Length);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLinearityDeviationElectricalLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLinearityDeviationElectricalLength(System.IntPtr Instrument_Handle, int Channel, out double Electrical_Length);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Marker_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out ushort Marker_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerStimulus(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, double Marker_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerStimulus(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out double Marker_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerResponse", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerResponse(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, [In, Out] double[] Marker_Response);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReferenceMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReferenceMarkerState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Reference_Marker_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceMarkerState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out ushort Reference_Marker_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReferenceMarkerStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReferenceMarkerStimulus(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, double Reference_Marker_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceMarkerStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceMarkerStimulus(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out double Reference_Marker_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceMarkerResponse", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceMarkerResponse(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out double Reference_Marker_Response);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReferenceDiscreteMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReferenceDiscreteMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceDiscreteMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceDiscreteMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out int Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReferenceFixedMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReferenceFixedMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceFixedMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceFixedMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out int Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDeltaMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDeltaMarkerState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Delta_Marker_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDeltaMarkerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDeltaMarkerState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out ushort Delta_Marker_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCoupledMarkers", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCoupledMarkers(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Marker_Coupled);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCoupledMarkers", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCoupledMarkers(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out ushort Marker_Coupled);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDiscreteMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDiscreteMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Discrete_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDiscreteMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDiscreteMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out int Discrete_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFixedMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFixedMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Fixed_Marker);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFixedMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFixedMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out int Fixed_Marker);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerFormat(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Marker_Format);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerFormat", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerFormat(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out int Marker_Format);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAllMarkersOff", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAllMarkersOff(System.IntPtr Instrument_Handle, int Channel__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveAllMarkers", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveAllMarkers(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerSearch(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Search);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerTargetSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerTargetSearch(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Search);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerTargetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerTargetValue(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, double Target_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerTargetValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerTargetValue(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out double Target_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerBandpassSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerBandpassSearch(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerBandstopSearch", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerBandstopSearch(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerSearchMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerSearchMode(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Search_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerSearchMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerSearchMode(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out int Search_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerBandfilterTracking", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerBandfilterTracking(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Bandfilter_Tracking);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerxdBBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerxdBBandwidth(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, double x_dB_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerBandfilterResults", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerBandfilterResults(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out double Bandwidth, out double Center_Stimulus, out double Q, out double Loss, out double LBE, out double UBE);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerxdBBandwidthZVR", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerxdBBandwidthZVR(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, double x_dB_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerBandfilterResultsZVR", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerBandfilterResultsZVR(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out double Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerSearchResultState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerSearchResultState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Search_Results);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerSearchResultState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerSearchResultState(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out ushort Search_Results);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerTracking", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerTracking(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Marker_Tracking);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerTracking", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerTracking(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out ushort Marker_Tracking);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerSearchRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerSearchRange(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, int Search_Range, double Start, double Stop);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerSearchRangeShow", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerSearchRangeShow(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, ushort Show_Range);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerSearchRangeShow", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerSearchRangeShow(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out ushort Show_Range);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_MarkerSearchResults", CallingConvention = CallingConvention.StdCall)]
            public static extern int MarkerSearchResults(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker, out double Marker_Stimulus, [In, Out] double[] Marker_Response);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetStartToMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetStartToMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetStopToMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetStopToMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCenterToMarker", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCenterToMarker(System.IntPtr Instrument_Handle, int Channel__Trace_, int Marker);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ShowLimitLine", CallingConvention = CallingConvention.StdCall)]
            public static extern int ShowLimitLine(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Display_Limit_Line);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLimitCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLimitCheck(System.IntPtr Instrument_Handle, int Channel__Trace_, int Limit_Line, ushort Limit_Check);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLimitCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLimitCheck(System.IntPtr Instrument_Handle, int Channel__Trace_, int Limit_Line, out ushort Limit_Check);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLimitLineFailBeep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLimitLineFailBeep(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Fail_Beep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLimitLineFailBeep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLimitLineFailBeep(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Fail_Beep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLimitCheckResult", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLimitCheckResult(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Limit_Check_Result);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AddLimitLineSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int AddLimitLineSegment(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, int Type, double Start_Stimulus, double Stop_Stimulus, double Start_Response, double Stop_Response);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_EditLimitLineSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int EditLimitLineSegment(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, int Type, double Start_Stimulus, double Stop_Stimulus, double Start_Response, double Stop_Response);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ReadLimitLineSegmentList", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadLimitLineSegmentList(System.IntPtr Instrument_Handle, int Channel__Trace_, int List_Size, out int Segments_Count, [In, Out] int[] Type, [In, Out] double[] Start_Stimulus, [In, Out] double[] Stop_Stimulus, [In, Out] double[] Start_Response, [In, Out] double[] Stop_Response);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WriteLimitLineSegmentList", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteLimitLineSegmentList(System.IntPtr Instrument_Handle, int Channel__Trace_, int List_Size, int Type, double[] Start_Stimulus, double[] Stop_Stimulus, double[] Start_Response, double[] Stop_Response);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ShiftLimitLineSegmentList", CallingConvention = CallingConvention.StdCall)]
            public static extern int ShiftLimitLineSegmentList(System.IntPtr Instrument_Handle, int Channel__Trace_, int Limit_Line_Type, double Stimulus_Offset, double Response_Offset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteLimitLineSegments", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteLimitLineSegments(System.IntPtr Instrument_Handle, int Channel__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_RecallLimitLine", CallingConvention = CallingConvention.StdCall)]
            public static extern int RecallLimitLine(System.IntPtr Instrument_Handle, string Trace_Name, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_RecallLimitLineWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int RecallLimitLineWithOptions(System.IntPtr Instrument_Handle, string Trace_Name, string File_Name, string S_Parameter, double X_Offset, double Y_Offset, int Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveLimitLine", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveLimitLine(System.IntPtr Instrument_Handle, string Trace_Name, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ImportTraceasLimitLine", CallingConvention = CallingConvention.StdCall)]
            public static extern int ImportTraceasLimitLine(System.IntPtr Instrument_Handle, int Channel__Trace_, int Limit_Line_Type, double Stimulus_Offset, double Response_Offset, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLimitLineTTLOutPass", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLimitLineTTLOutPass(System.IntPtr Instrument_Handle, int Channel__Trace_, int Output_No, ushort TTL_Output);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLimitLineTTLOutPass", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLimitLineTTLOutPass(System.IntPtr Instrument_Handle, int Channel__Trace_, int Output_No, out ushort TTL_Output);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDisplayLine", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayLine(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Display_Line, double Position);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDisplayLine", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayLine(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Display_Line, out double Position);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLimitDomainUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLimitDomainUnits(System.IntPtr Instrument_Handle, int Channel__Trace_, int Domain_Units);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLimitResponseDomainComplexUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLimitResponseDomainComplexUnits(System.IntPtr Instrument_Handle, int Channel__Trace_, int Response_Units);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLimitResponseDomainFormatUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLimitResponseDomainFormatUnits(System.IntPtr Instrument_Handle, int Channel__Trace_, int Response_Units);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLimitResponseDomainSpacingUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLimitResponseDomainSpacingUnits(System.IntPtr Instrument_Handle, int Channel__Trace_, int Response_Units);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRippleCheckOn", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRippleCheckOn(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Limit_Check);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRippleCheckOn", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRippleCheckOn(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Limit_Check);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRippleLimitGlobalCheckResult", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRippleLimitGlobalCheckResult(System.IntPtr Instrument_Handle, int Channel__Trace_, out int Ripple_Limit_Check_Result);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCheckRippleLimitRangeSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCheckRippleLimitRangeSegment(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, ushort Limit_Check);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCheckRippleLimitRangeSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCheckRippleLimitRangeSegment(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, out ushort Limit_Check);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRippleLimitCheckSegmentResult", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRippleLimitCheckSegmentResult(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, out int Fail, out double Limit_Check_Result);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRippleLimitsDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRippleLimitsDisplayState(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Display_Line);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRippleLimitsDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRippleLimitsDisplayState(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Display_Line);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRippleFailBeepOn", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRippleFailBeepOn(System.IntPtr Instrument_Handle, int Channel__Trace_, ushort Fail_Beep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRippleFailBeepOn", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRippleFailBeepOn(System.IntPtr Instrument_Handle, int Channel__Trace_, out ushort Fail_Beep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AddRippleLimitLineRangesSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int AddRippleLimitLineRangesSegment(System.IntPtr Instrument_Handle, int Channel__Trace_, int No_of_Values, int[] Type, double[] Start_Stimulus, double[] Stop_Stimulus, double[] Limit);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_EditRippleLimitLineSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int EditRippleLimitLineSegment(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, double Start_Stimulus, double Stop_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteAllRippleLimitRanges", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteAllRippleLimitRanges(System.IntPtr Instrument_Handle, int Channel__Trace_);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRippleLimitPhysicalUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRippleLimitPhysicalUnits(System.IntPtr Instrument_Handle, int Channel__Trace_, int Physical_Units);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRippleLimitResponseDomainFormatUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRippleLimitResponseDomainFormatUnits(System.IntPtr Instrument_Handle, int Channel__Trace_, int Response_Units);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetNumberRippleLimitRanges", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNumberRippleLimitRanges(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, out int Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRippleLimitRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRippleLimitRange(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, double Limit);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRippleLimitRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRippleLimitRange(System.IntPtr Instrument_Handle, int Channel__Trace_, int Segment, out double Limit);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveRecallRippleLimit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveRecallRippleLimit(System.IntPtr Instrument_Handle, int Operation_to_be_Performed, string Trace_Name, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetStartFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetStartFrequency(System.IntPtr Instrument_Handle, int Channel, double Start_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetStartFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetStartFrequency(System.IntPtr Instrument_Handle, int Channel, out double Start_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetStopFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetStopFrequency(System.IntPtr Instrument_Handle, int Channel, double Stop_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetStopFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetStopFrequency(System.IntPtr Instrument_Handle, int Channel, out double Stop_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCenterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCenterFrequency(System.IntPtr Instrument_Handle, int Channel, double Center_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCenterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCenterFrequency(System.IntPtr Instrument_Handle, int Channel, out double Center_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencySpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencySpan(System.IntPtr Instrument_Handle, int Channel, double Span);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencySpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencySpan(System.IntPtr Instrument_Handle, int Channel, out double Span);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPower(System.IntPtr Instrument_Handle, int Channel, double Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPower(System.IntPtr Instrument_Handle, int Channel, out double Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCWFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCWFrequency(System.IntPtr Instrument_Handle, int Channel, double CW_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCWFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCWFrequency(System.IntPtr Instrument_Handle, int Channel, out double CW_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetStartPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetStartPower(System.IntPtr Instrument_Handle, int Channel, double Start_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetStartPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetStartPower(System.IntPtr Instrument_Handle, int Channel, out double Start_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetStopPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetStopPower(System.IntPtr Instrument_Handle, int Channel, double Stop_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetStopPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetStopPower(System.IntPtr Instrument_Handle, int Channel, out double Stop_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSourcePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSourcePort(System.IntPtr Instrument_Handle, int Channel, int Source_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSourcePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSourcePort(System.IntPtr Instrument_Handle, int Channel, out int Source_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigurePowerBandwidthAverage", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerBandwidthAverage(System.IntPtr Instrument_Handle, int Channel, ushort RF_State, double Meas_Bandwidth, ushort Average_State, int Average_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReceiverStepAttenuators", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReceiverStepAttenuators(System.IntPtr Instrument_Handle, int Channel, int Analyzer_Port, double Attenuation_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReceiverStepAttenuators", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReceiverStepAttenuators(System.IntPtr Instrument_Handle, int Channel, int Analyzer_Port, out double Attenuation_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetGeneratorStepAttenuators", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorStepAttenuators(System.IntPtr Instrument_Handle, int Channel, int Port, double Attenuation_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetGeneratorStepAttenuators", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorStepAttenuators(System.IntPtr Instrument_Handle, int Channel, int Port, out double Attenuation_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAutomaticGeneratorAttenuator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutomaticGeneratorAttenuator(System.IntPtr Instrument_Handle, int Channel, int Port, ushort Automatic_Attenuation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAutomaticGeneratorAttenuator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticGeneratorAttenuator(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort Automatic_Attenuation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetGeneratorAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorAttenuatorMode(System.IntPtr Instrument_Handle, int Channel, int Port, int Attenuation_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetGeneratorAttenuatorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorAttenuatorMode(System.IntPtr Instrument_Handle, int Channel, int Port, out int Attenuation_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRFState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFState(System.IntPtr Instrument_Handle, ushort RF_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRFState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFState(System.IntPtr Instrument_Handle, out ushort RF_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMeasBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasBandwidth(System.IntPtr Instrument_Handle, int Channel, double Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMeasBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasBandwidth(System.IntPtr Instrument_Handle, int Channel, out double Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMeasBandwidthSelectivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasBandwidthSelectivity(System.IntPtr Instrument_Handle, int Channel, int Meas_Bandwidth_Selectivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMeasBandwidthSelectivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasBandwidthSelectivity(System.IntPtr Instrument_Handle, int Channel, out int Meas_Bandwidth_Selectivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAverageState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAverageState(System.IntPtr Instrument_Handle, int Channel, ushort Average_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAverageState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAverageState(System.IntPtr Instrument_Handle, int Channel, out ushort Average_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAverageFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAverageFactor(System.IntPtr Instrument_Handle, int Channel, int Average_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAverageFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAverageFactor(System.IntPtr Instrument_Handle, int Channel, out int Average_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCurrentSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCurrentSweep(System.IntPtr Instrument_Handle, int Channel, out int Current_Sweep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_RestartAverage", CallingConvention = CallingConvention.StdCall)]
            public static extern int RestartAverage(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPartialMeasurementResolutionBandwidthMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPartialMeasurementResolutionBandwidthMode(System.IntPtr Instrument_Handle, int Channel, int Bandwidth_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPartialMeasurementResolutionBandwidthMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPartialMeasurementResolutionBandwidthMode(System.IntPtr Instrument_Handle, int Channel, out int Bandwidth_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetGeneratorPortResolutionBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPortResolutionBandwidth(System.IntPtr Instrument_Handle, int Channel, int Generator_Port, double Resolution_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetGeneratorPortResolutionBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPortResolutionBandwidth(System.IntPtr Instrument_Handle, int Channel, int Generator_Port, out double Resolution_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPhysicalPortResolutionBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPhysicalPortResolutionBandwidth(System.IntPtr Instrument_Handle, int Channel, int Analyzer_Port, double Resolution_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPhysicalPortResolutionBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPhysicalPortResolutionBandwidth(System.IntPtr Instrument_Handle, int Channel, int Analyzer_Port, out double Resolution_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepType(System.IntPtr Instrument_Handle, int Channel, int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepType(System.IntPtr Instrument_Handle, int Channel, out int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_InsertNewSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int InsertNewSegment(System.IntPtr Instrument_Handle, int Channel, int Segment, double Start_Frequency, double Stop_Frequency, int Number_Of_Points, double Power, int Sweep_Time_Select, double Time, double Point_Delay, double Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_RedefineSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int RedefineSegment(System.IntPtr Instrument_Handle, int Channel, int Segment, double Start_Frequency, double Stop_Frequency, int Number_Of_Points, double Power, int Sweep_Time_Select, double Time, double Point_Delay, double Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AddNewSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int AddNewSegment(System.IntPtr Instrument_Handle, int Channel, int Segment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteSelectedSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteSelectedSegment(System.IntPtr Instrument_Handle, int Channel, int Segment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteAllSegments", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteAllSegments(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentsCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentsCount(System.IntPtr Instrument_Handle, int Channel, out int Count);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentState(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentState(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentStartFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentStartFrequency(System.IntPtr Instrument_Handle, int Channel, int Segment, double Start_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentStartFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentStartFrequency(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Start_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentStopFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentStopFrequency(System.IntPtr Instrument_Handle, int Channel, int Segment, double Stop_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentStopFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentStopFrequency(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Stop_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentNumberOfPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentNumberOfPoints(System.IntPtr Instrument_Handle, int Channel, int Segment, int Number_Of_Points);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentNumberOfPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentNumberOfPoints(System.IntPtr Instrument_Handle, int Channel, int Segment, out int Number_Of_Points);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentPower(System.IntPtr Instrument_Handle, int Channel, int Segment, double Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentPower(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentIndependentPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentIndependentPower(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentIndependentPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentIndependentPower(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentMeasBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentMeasBandwidth(System.IntPtr Instrument_Handle, int Channel, int Segment, double Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentMeasBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentMeasBandwidth(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentIndependentBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentIndependentBandwidth(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentIndependentBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentIndependentBandwidth(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort Meas_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentSelectivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentSelectivity(System.IntPtr Instrument_Handle, int Channel, int Segment, int Selectivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentSelectivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentSelectivity(System.IntPtr Instrument_Handle, int Channel, int Segment, out int Selectivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentIndependentSelectivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentIndependentSelectivity(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort Selectivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentIndependentSelectivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentIndependentSelectivity(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort Selectivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentSweepTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentSweepTime(System.IntPtr Instrument_Handle, int Channel, int Segment, double Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentSweepTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentSweepTime(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentIndependentTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentIndependentTime(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentIndependentTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentIndependentTime(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentPointDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentPointDelay(System.IntPtr Instrument_Handle, int Channel, int Segment, double Point_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentPointDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentPointDelay(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Point_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentIndependentPointDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentIndependentPointDelay(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort Point_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentIndependentPointDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentIndependentPointDelay(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort Point_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentBitsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentBitsState(System.IntPtr Instrument_Handle, int Channel, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentBitsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentBitsState(System.IntPtr Instrument_Handle, int Channel, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSegmentBitValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSegmentBitValues(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort Bit_0, ushort Bit_1, ushort Bit_2, ushort Bit_3);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentBitValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentBitValues(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort Bit_0, out ushort Bit_1, out ushort Bit_2, out ushort Bit_3);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentCenterFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentCenterFrequency(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Center_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSegmentFrequencySpan", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSegmentFrequencySpan(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Frequency_Span);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveSegment(System.IntPtr Instrument_Handle, int Channel, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadSegment", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadSegment(System.IntPtr Instrument_Handle, int Channel, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryOverlappingSweepSegments", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryOverlappingSweepSegments(System.IntPtr Instrument_Handle, int Segment, out ushort Overlapping);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QuerySumOfSweepSegmentsTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int QuerySumOfSweepSegmentsTime(System.IntPtr Instrument_Handle, int Channel, out double Sweep_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseTimeStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseTimeStart(System.IntPtr Instrument_Handle, int Channel, double Time_Start);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTimeStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTimeStart(System.IntPtr Instrument_Handle, int Channel, out double Time_Start);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseTimeStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseTimeStop(System.IntPtr Instrument_Handle, int Channel, double Time_Stop);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTimeStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTimeStop(System.IntPtr Instrument_Handle, int Channel, out double Time_Stop);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseTimeBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseTimeBandwidth(System.IntPtr Instrument_Handle, int Channel, double Time_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTimeBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTimeBandwidth(System.IntPtr Instrument_Handle, int Channel, out double Time_Bandwidth);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseCoupledSectionLimitLinesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseCoupledSectionLimitLinesState(System.IntPtr Instrument_Handle, int Channel, ushort Couple_Limits);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseCoupledSectionLimitLinesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseCoupledSectionLimitLinesState(System.IntPtr Instrument_Handle, int Channel, out ushort Couple_Limits);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseEvaluationMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseEvaluationMode(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, int Evaluation_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseEvaluationMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseEvaluationMode(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out int Evaluation_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseEvaluationSectionStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseEvaluationSectionStart(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, double Evaluation_Start_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseEvaluationSectionStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseEvaluationSectionStart(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out double Evaluation_Start_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseEvaluationSectionStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseEvaluationSectionStop(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, double Evaluation_Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseEvaluationSectionStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseEvaluationSectionStop(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out double Evaluation_Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseSectionLimitLinesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseSectionLimitLinesState(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, ushort Limit_Lines_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseSectionLimitLinesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseSectionLimitLinesState(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out ushort Limit_Lines_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseShiftStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseShiftStimulus(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, double Shift_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseShiftStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseShiftStimulus(System.IntPtr Instrument_Handle, int Channel, int Receiver_Type, int Record_Number, int Interface_Type, int Generator_Port_Number, out double Shift_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ReadTimeSamplesData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadTimeSamplesData(System.IntPtr Instrument_Handle, int Channel__Trace_, out int No_of_Values, [In, Out] double[] Trace_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepNumberOfPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepNumberOfPoints(System.IntPtr Instrument_Handle, int Channel, int Number_Of_Points);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepNumberOfPoints", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepNumberOfPoints(System.IntPtr Instrument_Handle, int Channel, out int Number_Of_Points);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyStepSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyStepSize(System.IntPtr Instrument_Handle, int Channel, double Step_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyStepSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyStepSize(System.IntPtr Instrument_Handle, int Channel, out double Step_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepCount(System.IntPtr Instrument_Handle, int Channel, int Sweep_Count);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepCount(System.IntPtr Instrument_Handle, int Channel, out int Sweep_Count);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureSweepTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSweepTime(System.IntPtr Instrument_Handle, int Channel, ushort Auto_Sweep_Time, double Sweep_Time, double Meas_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepTime(System.IntPtr Instrument_Handle, int Channel, double Sweep_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepTime(System.IntPtr Instrument_Handle, int Channel, out double Sweep_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepMeasDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepMeasDelay(System.IntPtr Instrument_Handle, int Channel, double Meas_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepMeasDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepMeasDelay(System.IntPtr Instrument_Handle, int Channel, out double Meas_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepTimeAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepTimeAuto(System.IntPtr Instrument_Handle, int Channel, ushort Auto_Sweep_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepTimeAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepTimeAuto(System.IntPtr Instrument_Handle, int Channel, out ushort Auto_Sweep_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureTriggerFreeRun", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerFreeRun(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureTriggerExternal", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerExternal(System.IntPtr Instrument_Handle, int Channel, int Trigger_On);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureTriggerPeriodic", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerPeriodic(System.IntPtr Instrument_Handle, int Channel, double Trigger_Period);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureTriggerRFPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerRFPower(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureTriggerManual", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerManual(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureTriggerSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerSettings(System.IntPtr Instrument_Handle, int Channel, int Trigger_Meas_Sequence, double Trigger_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTriggerSource(System.IntPtr Instrument_Handle, int Channel, int Trigger_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTriggerSource(System.IntPtr Instrument_Handle, int Channel, out int Trigger_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTriggerDelay(System.IntPtr Instrument_Handle, int Channel, double Trigger_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTriggerDelay(System.IntPtr Instrument_Handle, int Channel, out double Trigger_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPartialMeasurementTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPartialMeasurementTriggerMode(System.IntPtr Instrument_Handle, int Channel, int Trigger_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPartialMeasurementTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPartialMeasurementTriggerMode(System.IntPtr Instrument_Handle, int Channel, out int Trigger_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetGeneratorPortTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorPortTriggerDelay(System.IntPtr Instrument_Handle, int Channel, int Generator_Port, double Trigger_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetGeneratorPortTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorPortTriggerDelay(System.IntPtr Instrument_Handle, int Channel, int Generator_Port, out double Trigger_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPhysicalPortTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPhysicalPortTriggerDelay(System.IntPtr Instrument_Handle, int Channel, int Analyzer_Port, double Trigger_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPhysicalPortTriggerDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPhysicalPortTriggerDelay(System.IntPtr Instrument_Handle, int Channel, int Analyzer_Port, out double Trigger_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTriggeredMeasSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTriggeredMeasSequence(System.IntPtr Instrument_Handle, int Channel, int Trigger_Meas_Sequence);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTriggeredMeasSequence", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTriggeredMeasSequence(System.IntPtr Instrument_Handle, int Channel, out int Trigger_Meas_Sequence);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTriggerOn", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTriggerOn(System.IntPtr Instrument_Handle, int Channel, int Trigger_On);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTriggerOn", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTriggerOn(System.IntPtr Instrument_Handle, int Channel, out int Trigger_On);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTriggerPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTriggerPeriod(System.IntPtr Instrument_Handle, int Channel, double Trigger_Period);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTriggerPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTriggerPeriod(System.IntPtr Instrument_Handle, int Channel, out double Trigger_Period);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SendTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendTrigger(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SendTriggerWaitOPC", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendTriggerWaitOPC(System.IntPtr Instrument_Handle, int Timeout);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SendChannelTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendChannelTrigger(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SendChannelTriggerWaitOPC", CallingConvention = CallingConvention.StdCall)]
            public static extern int SendChannelTriggerWaitOPC(System.IntPtr Instrument_Handle, int Channel, int Timeout);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSingleAllChans", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSingleAllChans(System.IntPtr Instrument_Handle, int Single_Sweep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSingleAllChans", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSingleAllChans(System.IntPtr Instrument_Handle, out int Single_Sweep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SweepRestart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SweepRestart(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSweepSingle", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSweepSingle(System.IntPtr Instrument_Handle, int Channel, int Single_Sweep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSweepSingle", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSweepSingle(System.IntPtr Instrument_Handle, int Channel, out int Single_Sweep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefineGroupOfMeasuredPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefineGroupOfMeasuredPorts(System.IntPtr Instrument_Handle, int Channel, int Group, int First_Port, int Last_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetGroupOfMeasuredPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGroupOfMeasuredPorts(System.IntPtr Instrument_Handle, int Channel, int Group, out int First_Port, out int Last_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefineGroupOfAllMeasuredPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefineGroupOfAllMeasuredPorts(System.IntPtr Instrument_Handle, int Channel, int Group, int Number_of_Ports_In_Group, int[] Ports);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetGroupOfAllMeasuredPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGroupOfAllMeasuredPorts(System.IntPtr Instrument_Handle, int Channel, int Group, out int Number_of_Ports_In_Group, [In, Out] int[] Ports);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPortGroupsCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPortGroupsCount(System.IntPtr Instrument_Handle, int Channel, out int Port_Groups);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteGroupOfMeasuredPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteGroupOfMeasuredPorts(System.IntPtr Instrument_Handle, int Channel, int Group);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteAllGroupsOfMeasuredPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteAllGroupsOfMeasuredPorts(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefineBalancedPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefineBalancedPort(System.IntPtr Instrument_Handle, int Channel, int Logical_Port, int Physical_Port_1, int Physical_Port_2);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetBalancedPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetBalancedPort(System.IntPtr Instrument_Handle, int Channel, int Logical_Port, out int Physical_Port_1, out int Physical_Port_2);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteBalancedPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteBalancedPort(System.IntPtr Instrument_Handle, int Channel, int Logical_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteAllBalancedPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteAllBalancedPorts(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDifferentialModeImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDifferentialModeImpedance(System.IntPtr Instrument_Handle, int Channel, int Logical_Port, double Impedance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDifferentialModeImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDifferentialModeImpedance(System.IntPtr Instrument_Handle, int Channel, int Logical_Port, out double Impedance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCommonModeImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCommonModeImpedance(System.IntPtr Instrument_Handle, int Channel, int Logical_Port, double Impedance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCommonModeImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCommonModeImpedance(System.IntPtr Instrument_Handle, int Channel, int Logical_Port, out double Impedance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefinePortPair", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefinePortPair(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, int Port_1, int Port_2);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeletePortPair", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeletePortPair(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDefaultConfigurationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDefaultConfigurationState(System.IntPtr Instrument_Handle, ushort Default_Settings);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDefaultConfigurationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDefaultConfigurationState(System.IntPtr Instrument_Handle, out ushort Default_Settings);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPortConfigration", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPortConfigration(System.IntPtr Instrument_Handle, int Channel, int Port_Group_A, int Port_Group_B, int Port_Group_C, int Port_Group_D);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPortConfigration", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPortConfigration(System.IntPtr Instrument_Handle, int Channel, out int Port_Group_A, out int Port_Group_B, out int Port_Group_C, out int Port_Group_D);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyConversion(System.IntPtr Instrument_Handle, int Measurement_Type, int Channel, int Port, int Numerator, int Denominator, double Offset, int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyConversion(System.IntPtr Instrument_Handle, int Measurement_Type, int Channel, int Port, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPowerMeterFrequencyConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerMeterFrequencyConversion(System.IntPtr Instrument_Handle, int Channel, int Power_Meter_Number, int Numerator, int Denominator, double Offset, int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPowerMeterFrequencyConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerMeterFrequencyConversion(System.IntPtr Instrument_Handle, int Channel, int Power_Meter_Number, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetGeneratorFrequencyConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetGeneratorFrequencyConversion(System.IntPtr Instrument_Handle, int Channel, int Port, int Generator_Number, ushort State, int Numerator, int Denominator, double Offset, int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetGeneratorFrequencyConversion", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetGeneratorFrequencyConversion(System.IntPtr Instrument_Handle, int Channel, int Port, int Generator_Number, out ushort State, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetConverterSourceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetConverterSourceFrequency(System.IntPtr Instrument_Handle, int Channel, int Port, int Numerator, int Denominator, double Offset, int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetConverterSourceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetConverterSourceFrequency(System.IntPtr Instrument_Handle, int Channel, int Port, out int Numerator, out int Denominator, out double Offset, out int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetConverterPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetConverterPowerOffset(System.IntPtr Instrument_Handle, int Channel, int Port, double Port_Power_Offset, int Offset_Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetConverterPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetConverterPowerOffset(System.IntPtr Instrument_Handle, int Channel, int Port, out double Port_Power_Offset, out int Offset_Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMeasureAWavesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMeasureAWavesState(System.IntPtr Instrument_Handle, int Channel, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMeasureAWavesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMeasureAWavesState(System.IntPtr Instrument_Handle, int Channel, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLocalOscilatorAState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLocalOscilatorAState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLocalOscilatorAState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLocalOscilatorAState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLocalOscilatorBState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLocalOscilatorBState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLocalOscilatorBState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLocalOscilatorBState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLogicalPortCommonRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLogicalPortCommonRefImpedance(System.IntPtr Instrument_Handle, int Channel, int Port, double Real, double Imaginary);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLogicalPortCommonRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLogicalPortCommonRefImpedance(System.IntPtr Instrument_Handle, int Channel, int Port, out double Real, out double Imaginary);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLogicalPortDifferentialRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLogicalPortDifferentialRefImpedance(System.IntPtr Instrument_Handle, int Channel, int Port, double Real, double Imaginary);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLogicalPortDifferentialRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLogicalPortDifferentialRefImpedance(System.IntPtr Instrument_Handle, int Channel, int Port, out double Real, out double Imaginary);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPortImpedancesRenormalization", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPortImpedancesRenormalization(System.IntPtr Instrument_Handle, int Channel, int Theory);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPortImpedancesRenormalization", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPortImpedancesRenormalization(System.IntPtr Instrument_Handle, int Channel, out int Theory);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPhysicalPortRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPhysicalPortRefImpedance(System.IntPtr Instrument_Handle, int Channel, int Port, double Real, double Imaginary);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPhysicalPortRefImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPhysicalPortRefImpedance(System.IntPtr Instrument_Handle, int Channel, int Port, out double Real, out double Imaginary);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIFGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIFGain(System.IntPtr Instrument_Handle, int Channel, int Port, int IF_Gain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIFGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIFGain(System.IntPtr Instrument_Handle, int Channel, int Port, out int IF_Gain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIFGainReferenceChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIFGainReferenceChannel(System.IntPtr Instrument_Handle, int Channel, int Port, int IF_Gain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIFGainReferenceChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIFGainReferenceChannel(System.IntPtr Instrument_Handle, int Channel, int Port, out int IF_Gain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRFSignalSourceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRFSignalSourceState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRFSignalSourceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRFSignalSourceState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPermanentSignalSourceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPermanentSignalSourceState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPermanentSignalSourceState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPermanentSignalSourceState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPermanentSignalGeneratorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPermanentSignalGeneratorState(System.IntPtr Instrument_Handle, int Channel, int Port, int Generator_Number, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPermanentSignalGeneratorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPermanentSignalGeneratorState(System.IntPtr Instrument_Handle, int Channel, int Port, int Generator_Number, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPortPowerGeneratorOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPortPowerGeneratorOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, int Generator_Number, double Port_Power_Offset, int Offset_Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPortPowerGeneratorOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPortPowerGeneratorOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, int Generator_Number, out double Port_Power_Offset, out int Offset_Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSlope(System.IntPtr Instrument_Handle, int Channel, int Port, double Slope);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSlope(System.IntPtr Instrument_Handle, int Channel, int Port, out double Slope);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSourceCombinerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSourceCombinerState(System.IntPtr Instrument_Handle, int Channel, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSourceCombinerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSourceCombinerState(System.IntPtr Instrument_Handle, int Channel, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyStimulus(System.IntPtr Instrument_Handle, int Channel, string Frequency_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyStimulus(System.IntPtr Instrument_Handle, int Channel, System.Text.StringBuilder Frequency_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPowerStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerStimulus(System.IntPtr Instrument_Handle, int Channel, string Power_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPowerStimulus", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerStimulus(System.IntPtr Instrument_Handle, int Channel, System.Text.StringBuilder Power_Stimulus);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFState(System.IntPtr Instrument_Handle, int Channel, ushort True_Differential_Mode_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFState(System.IntPtr Instrument_Handle, int Channel, out ushort True_Differential_Mode_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFAmplitudeImbalanceLogicalPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFAmplitudeImbalanceLogicalPort(System.IntPtr Instrument_Handle, int Channel, int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFAmplitudeImbalanceLogicalPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFAmplitudeImbalanceLogicalPort(System.IntPtr Instrument_Handle, int Channel, out int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFAmplitudeImbalanceStartPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFAmplitudeImbalanceStartPower(System.IntPtr Instrument_Handle, int Channel, double Start_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFAmplitudeImbalanceStartPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFAmplitudeImbalanceStartPower(System.IntPtr Instrument_Handle, int Channel, out double Start_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFAmplitudeImbalanceStopPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFAmplitudeImbalanceStopPower(System.IntPtr Instrument_Handle, int Channel, double Stop_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFAmplitudeImbalanceStopPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFAmplitudeImbalanceStopPower(System.IntPtr Instrument_Handle, int Channel, out double Stop_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFPhaseImbalanceLogicalPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFPhaseImbalanceLogicalPort(System.IntPtr Instrument_Handle, int Channel, int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFPhaseImbalanceLogicalPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFPhaseImbalanceLogicalPort(System.IntPtr Instrument_Handle, int Channel, out int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFPhaseImbalanceStartPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFPhaseImbalanceStartPhase(System.IntPtr Instrument_Handle, int Channel, double Start_Phase);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFPhaseImbalanceStartPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFPhaseImbalanceStartPhase(System.IntPtr Instrument_Handle, int Channel, out double Start_Phase);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFPhaseImbalanceStopPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFPhaseImbalanceStopPhase(System.IntPtr Instrument_Handle, int Channel, double Stop_Phase);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFPhaseImbalanceStopPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFPhaseImbalanceStopPhase(System.IntPtr Instrument_Handle, int Channel, out double Stop_Phase);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFSourcePowerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFSourcePowerMode(System.IntPtr Instrument_Handle, int Channel, int Source_Power_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFSourcePowerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFSourcePowerMode(System.IntPtr Instrument_Handle, int Channel, out int Source_Power_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTDIFCompensationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTDIFCompensationState(System.IntPtr Instrument_Handle, int Channel, ushort Compensation_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTDIFCompensationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTDIFCompensationState(System.IntPtr Instrument_Handle, int Channel, out ushort Compensation_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorState(System.IntPtr Instrument_Handle, int Channel, ushort Pulse_Generator_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorState(System.IntPtr Instrument_Handle, int Channel, out ushort Pulse_Generator_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefinePulseGenerator", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefinePulseGenerator(System.IntPtr Instrument_Handle, int Channel, int Generator, int Pulse_Type, double Pulse_Width, double Single_Train_Pulse_Period, int Pulse_Polarity, int Pulse_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefinePulseTrainSegments", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefinePulseTrainSegments(System.IntPtr Instrument_Handle, int Channel, int Buffer_Size, int[] Pulse_Train_Active, double[] Start_Time, double[] Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureChoppedPulseProfile", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureChoppedPulseProfile(System.IntPtr Instrument_Handle, int Channel, ushort Chopped_Pulse_Profile_Mode, double Delay_Increment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorType(System.IntPtr Instrument_Handle, int Channel, int Generator, int Pulse_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorType(System.IntPtr Instrument_Handle, int Channel, int Generator, out int Pulse_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorWidth(System.IntPtr Instrument_Handle, int Channel, int Generator, double Pulse_Width);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorWidth(System.IntPtr Instrument_Handle, int Channel, int Generator, out double Pulse_Width);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorSinglePeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorSinglePeriod(System.IntPtr Instrument_Handle, int Channel, double Single_Pulse_Period);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorSinglePeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorSinglePeriod(System.IntPtr Instrument_Handle, int Channel, out double Single_Pulse_Period);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorTrainPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorTrainPeriod(System.IntPtr Instrument_Handle, int Channel, double Train_Pulse_Period);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorTrainPeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorTrainPeriod(System.IntPtr Instrument_Handle, int Channel, out double Train_Pulse_Period);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorPolarity(System.IntPtr Instrument_Handle, int Channel, int Generator, int Pulse_Polarity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorPolarity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorPolarity(System.IntPtr Instrument_Handle, int Channel, int Generator, out int Pulse_Polarity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorMode(System.IntPtr Instrument_Handle, int Channel, int Pulse_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorMode(System.IntPtr Instrument_Handle, int Channel, out int Pulse_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTrainSegments", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTrainSegments(System.IntPtr Instrument_Handle, int Channel, int Buffer_Size, [In, Out] int[] Pulse_Train_Active, [In, Out] double[] Start_Time, [In, Out] double[] Stop_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseTrainSegmentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseTrainSegmentState(System.IntPtr Instrument_Handle, int Channel, int Segment, ushort Segment_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTrainSegmentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTrainSegmentState(System.IntPtr Instrument_Handle, int Channel, int Segment, out ushort Segment_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseTrainSegmentStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseTrainSegmentStart(System.IntPtr Instrument_Handle, int Channel, int Segment, double Segment_Start);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTrainSegmentStart", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTrainSegmentStart(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Segment_Start);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseTrainSegmentStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseTrainSegmentStop(System.IntPtr Instrument_Handle, int Channel, int Segment, double Segment_Stop);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTrainSegmentStop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTrainSegmentStop(System.IntPtr Instrument_Handle, int Channel, int Segment, out double Segment_Stop);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseTrainSegmentCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseTrainSegmentCount(System.IntPtr Instrument_Handle, int Channel, out int Segment_Count);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteAllPulseTrainSegments", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteAllPulseTrainSegments(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SavePulseTrainFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SavePulseTrainFile(System.IntPtr Instrument_Handle, int Channel, int Generator, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadPulseTrainFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadPulseTrainFile(System.IntPtr Instrument_Handle, int Channel, int Generator, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorDelay(System.IntPtr Instrument_Handle, int Channel, double Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorDelay(System.IntPtr Instrument_Handle, int Channel, out double Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetChoppedPulseProfileMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetChoppedPulseProfileMode(System.IntPtr Instrument_Handle, int Channel, ushort Chopped_Pulse_Profile_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetChoppedPulseProfileMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChoppedPulseProfileMode(System.IntPtr Instrument_Handle, int Channel, out ushort Chopped_Pulse_Profile_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetChoppedPulseProfileDelayIncrement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetChoppedPulseProfileDelayIncrement(System.IntPtr Instrument_Handle, int Channel, double Delay_Increment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetChoppedPulseProfileDelayIncrement", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChoppedPulseProfileDelayIncrement(System.IntPtr Instrument_Handle, int Channel, out double Delay_Increment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureZVAXPath", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureZVAXPath(System.IntPtr Instrument_Handle, int Channel, int Path, ushort Internal_Combiner, ushort Harmonic_Filter, ushort Pulse_Modulator);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigurePulseGenerators", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePulseGenerators(System.IntPtr Instrument_Handle, int Channel, ushort Ext_Signal_Generator_Input, ushort Ext_Signal_Generator_Output, int Assignment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetInternalCombiner", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetInternalCombiner(System.IntPtr Instrument_Handle, int Channel, ushort Internal_Combiner);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetInternalCombiner", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetInternalCombiner(System.IntPtr Instrument_Handle, int Channel, out ushort Internal_Combiner);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHarmonicFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHarmonicFilter(System.IntPtr Instrument_Handle, int Channel, int Path, ushort Harmonic_Filter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetHarmonicFilter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHarmonicFilter(System.IntPtr Instrument_Handle, int Channel, int Path, out ushort Harmonic_Filter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseModulator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseModulator(System.IntPtr Instrument_Handle, int Channel, int Path, ushort Pulse_Modulator);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseModulator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseModulator(System.IntPtr Instrument_Handle, int Channel, int Path, out ushort Pulse_Modulator);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetExternalSignalGeneratorInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSignalGeneratorInput(System.IntPtr Instrument_Handle, int Channel, ushort Ext_Signal_Generator_Input);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetExternalSignalGeneratorInput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSignalGeneratorInput(System.IntPtr Instrument_Handle, int Channel, out ushort Ext_Signal_Generator_Input);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPulseGeneratorAssignment", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPulseGeneratorAssignment(System.IntPtr Instrument_Handle, int Channel, int Assignment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPulseGeneratorAssignment", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPulseGeneratorAssignment(System.IntPtr Instrument_Handle, int Channel, out int Assignment);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetExternalSignalGeneratorOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSignalGeneratorOutput(System.IntPtr Instrument_Handle, int Channel, ushort Ext_Signal_Generator_Output);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetExternalSignalGeneratorOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSignalGeneratorOutput(System.IntPtr Instrument_Handle, int Channel, out ushort Ext_Signal_Generator_Output);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureHarmonicMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureHarmonicMeasurement(System.IntPtr Instrument_Handle, int Channel, int Harmonic_Measurement, ushort Relative_Harmonic_Measurement, int Source, int Harmonic_Measured_at, int Harmonic_Order);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHarmonicMeasurementState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHarmonicMeasurementState(System.IntPtr Instrument_Handle, int Channel, int Harmonic_Measurement);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetHarmonicMeasurementState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHarmonicMeasurementState(System.IntPtr Instrument_Handle, int Channel, out int Harmonic_Measurement);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHarmonicOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHarmonicOrder(System.IntPtr Instrument_Handle, int Channel, int Harmonic_Order);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetHarmonicOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHarmonicOrder(System.IntPtr Instrument_Handle, int Channel, out int Harmonic_Order);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHarmonicSourcePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHarmonicSourcePort(System.IntPtr Instrument_Handle, int Channel, int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetHarmonicSourcePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHarmonicSourcePort(System.IntPtr Instrument_Handle, int Channel, out int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHarmonicReceivePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHarmonicReceivePort(System.IntPtr Instrument_Handle, int Channel, int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetHarmonicReceivePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHarmonicReceivePort(System.IntPtr Instrument_Handle, int Channel, out int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetHarmonicRelativeState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetHarmonicRelativeState(System.IntPtr Instrument_Handle, int Channel, ushort Relative_Harmonic_Measurement);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetHarmonicRelativeState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetHarmonicRelativeState(System.IntPtr Instrument_Handle, int Channel, out ushort Relative_Harmonic_Measurement);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerMode(System.IntPtr Instrument_Handle, int Channel, int Mixer_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerMode(System.IntPtr Instrument_Handle, int Channel, out int Mixer_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetInternalSignalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetInternalSignalSource(System.IntPtr Instrument_Handle, int Channel, int Internal_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetInternalSignalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetInternalSignalSource(System.IntPtr Instrument_Handle, int Channel, out int Internal_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetExternalSignalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSignalSource(System.IntPtr Instrument_Handle, int Channel, int External_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetExternalSignalSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSignalSource(System.IntPtr Instrument_Handle, int Channel, out int External_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigurePowerSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePowerSettings(System.IntPtr Instrument_Handle, int Channel, int Fundamental_Power, double Fixed_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFundamentalPowerSignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFundamentalPowerSignal(System.IntPtr Instrument_Handle, int Channel, int Fundamental_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFundamentalPowerSignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFundamentalPowerSignal(System.IntPtr Instrument_Handle, int Channel, out int Fundamental_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFixedPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFixedPower(System.IntPtr Instrument_Handle, int Channel, double Fixed_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFixedPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFixedPower(System.IntPtr Instrument_Handle, int Channel, out double Fixed_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureFrequencySettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFrequencySettings(System.IntPtr Instrument_Handle, int Channel, int Fundamental_Frequency_Signal, int Fixed_Frequency_Signal, double Fixed_Frequency, int Frequency_Conversion_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFundamentalFrequencySignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFundamentalFrequencySignal(System.IntPtr Instrument_Handle, int Channel, int Fundamental_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFundamentalFrequencySignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFundamentalFrequencySignal(System.IntPtr Instrument_Handle, int Channel, out int Fundamental_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFixedFrequencySignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFixedFrequencySignal(System.IntPtr Instrument_Handle, int Channel, int Fixed_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFixedFrequencySignal", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFixedFrequencySignal(System.IntPtr Instrument_Handle, int Channel, out int Fixed_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFixedFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFixedFrequency(System.IntPtr Instrument_Handle, int Channel, double Fixed_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFixedFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFixedFrequency(System.IntPtr Instrument_Handle, int Channel, out double Fixed_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyConversionMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyConversionMode(System.IntPtr Instrument_Handle, int Channel, int Frequency_Conversion_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyConversionMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyConversionMode(System.IntPtr Instrument_Handle, int Channel, out int Frequency_Conversion_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyHighAccuracy", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyHighAccuracy(System.IntPtr Instrument_Handle, int Channel, ushort High_Accuracy);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyHighAccuracy", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyHighAccuracy(System.IntPtr Instrument_Handle, int Channel, out ushort High_Accuracy);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetExternalPowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalPowerMeter(System.IntPtr Instrument_Handle, int Channel, int Number_Of_External_Power_Meter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetExternalPowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalPowerMeter(System.IntPtr Instrument_Handle, int Channel, out int Number_Of_External_Power_Meter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_RFSourceCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int RFSourceCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_IFReceiverCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int IFReceiverCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LOSourceCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int LOSourceCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerDelayMeasurementSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerDelayMeasurementSetup(System.IntPtr Instrument_Handle, int Channel, int Measurement_Setup);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerDelayMeasurementSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerDelayMeasurementSetup(System.IntPtr Instrument_Handle, int Channel, out int Measurement_Setup);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerDelayLANConnection", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerDelayLANConnection(System.IntPtr Instrument_Handle, int Channel, int LAN_Connection);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerDelayLANConnection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerDelayLANConnection(System.IntPtr Instrument_Handle, int Channel, out int LAN_Connection);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefineMixerDelayReceiver", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefineMixerDelayReceiver(System.IntPtr Instrument_Handle, string Measurement_Setup);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ClearMixerDelayReceiverList", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearMixerDelayReceiverList(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartMixerDelayCalibrationSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartMixerDelayCalibrationSweep(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerDelayAperture", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerDelayAperture(System.IntPtr Instrument_Handle, int Channel, double Aperture);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerDelayAperture", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerDelayAperture(System.IntPtr Instrument_Handle, int Channel, out double Aperture);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerDelayConstant", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerDelayConstant(System.IntPtr Instrument_Handle, int Channel, double Constant_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerDelayConstant", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerDelayConstant(System.IntPtr Instrument_Handle, int Channel, out double Constant_Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerDelayCombinerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerDelayCombinerState(System.IntPtr Instrument_Handle, int Channel, ushort Internal_Combiner);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerDelayCombinerState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerDelayCombinerState(System.IntPtr Instrument_Handle, int Channel, out ushort Internal_Combiner);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerDelayCorrection", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerDelayCorrection(System.IntPtr Instrument_Handle, int Channel, ushort Correction);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerDelayCorrection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerDelayCorrection(System.IntPtr Instrument_Handle, int Channel, out ushort Correction);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMixerDelayUpperToneSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMixerDelayUpperToneSource(System.IntPtr Instrument_Handle, int Channel, int Source, int Port_number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMixerDelayUpperToneSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMixerDelayUpperToneSource(System.IntPtr Instrument_Handle, int Channel, out int Source, out int Port_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadMixerDelayValues", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadMixerDelayValues(System.IntPtr Instrument_Handle, int Channel, int Type, string File);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadMixerDelayCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadMixerDelayCalibrationData(System.IntPtr Instrument_Handle, int Channel, string File);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StoreMixerDelayCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int StoreMixerDelayCalibrationData(System.IntPtr Instrument_Handle, int Channel, string File);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVectorMixerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVectorMixerMode(System.IntPtr Instrument_Handle, int Channel, int Mixer_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVectorMixerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVectorMixerMode(System.IntPtr Instrument_Handle, int Channel, out int Mixer_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetInternalSignalSourceAUX", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetInternalSignalSourceAUX(System.IntPtr Instrument_Handle, int Channel, int Internal_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetInternalSignalSourceAUX", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetInternalSignalSourceAUX(System.IntPtr Instrument_Handle, int Channel, out int Internal_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetExternalSignalSourceAUX", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetExternalSignalSourceAUX(System.IntPtr Instrument_Handle, int Channel, int External_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetExternalSignalSourceAUX", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetExternalSignalSourceAUX(System.IntPtr Instrument_Handle, int Channel, out int External_Signal_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAUXMixerPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAUXMixerPort(System.IntPtr Instrument_Handle, int Channel, int Port_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAUXMixerPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAUXMixerPort(System.IntPtr Instrument_Handle, int Channel, out int Port_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAUXFixedPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAUXFixedPower(System.IntPtr Instrument_Handle, int Channel, double Fixed_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAUXFixedPower", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAUXFixedPower(System.IntPtr Instrument_Handle, int Channel, out double Fixed_Power);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODLowerToneSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODLowerToneSource(System.IntPtr Instrument_Handle, int Channel, int Source, int Source_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODLowerToneSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODLowerToneSource(System.IntPtr Instrument_Handle, int Channel, out int Source, out int Source_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODUpperToneSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODUpperToneSource(System.IntPtr Instrument_Handle, int Channel, int Source, int Source_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODUpperToneSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODUpperToneSource(System.IntPtr Instrument_Handle, int Channel, out int Source, out int Source_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODToneDistance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODToneDistance(System.IntPtr Instrument_Handle, int Channel, double Tone_Distance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODToneDistance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODToneDistance(System.IntPtr Instrument_Handle, int Channel, out double Tone_Distance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODReceiverPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODReceiverPort(System.IntPtr Instrument_Handle, int Channel, int Receiver_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODReceiverPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODReceiverPort(System.IntPtr Instrument_Handle, int Channel, out int Receiver_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODMeasurementOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODMeasurementOrder(System.IntPtr Instrument_Handle, int Channel, int Product_Order, ushort Measurement_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODMeasurementOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODMeasurementOrder(System.IntPtr Instrument_Handle, int Channel, int Product_Order, out ushort Measurement_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODInternalCombiner", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODInternalCombiner(System.IntPtr Instrument_Handle, int Channel, ushort Internal_Combiner);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODInternalCombiner", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODInternalCombiner(System.IntPtr Instrument_Handle, int Channel, out ushort Internal_Combiner);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODSpectrumMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODSpectrumMeasurement(System.IntPtr Instrument_Handle, int Channel, ushort Spectrum_Measurement);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODSpectrumMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODSpectrumMeasurement(System.IntPtr Instrument_Handle, int Channel, out ushort Spectrum_Measurement);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODMaxOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODMaxOrder(System.IntPtr Instrument_Handle, int Channel, int Max_Order);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODMaxOrder", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODMaxOrder(System.IntPtr Instrument_Handle, int Channel, out int Max_Order);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIMODTwoToneOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIMODTwoToneOutput(System.IntPtr Instrument_Handle, int Channel, int Two_Tone_Output);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIMODTwoToneOutput", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIMODTwoToneOutput(System.IntPtr Instrument_Handle, int Channel, out int Two_Tone_Output);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartIMODLowerToneSourcePowerCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartIMODLowerToneSourcePowerCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartIMODUpperToneSourcePowerCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartIMODUpperToneSourcePowerCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartIMODReceiverPowerCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartIMODReceiverPowerCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetNoiseFigureDetectorMeasurementTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNoiseFigureDetectorMeasurementTime(System.IntPtr Instrument_Handle, int Channel, double Detector_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetNoiseFigureDetectorMeasurementTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNoiseFigureDetectorMeasurementTime(System.IntPtr Instrument_Handle, int Channel, out double Detector_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetNoiseFigureMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNoiseFigureMeasurementMode(System.IntPtr Instrument_Handle, int Channel, ushort Measurement_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetNoiseFigureMeasurementMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNoiseFigureMeasurementMode(System.IntPtr Instrument_Handle, int Channel, out ushort Measurement_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetNoiseFigureLOOscillator", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNoiseFigureLOOscillator(System.IntPtr Instrument_Handle, int Channel, ushort LO_Oscillator);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetNoiseFigureLOOscillator", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNoiseFigureLOOscillator(System.IntPtr Instrument_Handle, int Channel, out ushort LO_Oscillator);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetNoiseFigureCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNoiseFigureCalibrationState(System.IntPtr Instrument_Handle, int Channel, ushort Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetNoiseFigureCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNoiseFigureCalibrationState(System.IntPtr Instrument_Handle, int Channel, out ushort Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DefineNoiseFigureCalibrationSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int DefineNoiseFigureCalibrationSettings(System.IntPtr Instrument_Handle, int Channel, int Port_1, int Port_2, ushort External_Attenuator, double Source_Noise_Cal_Attenuation, double DUT_Measurement_Attenuation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartNoiseFigureCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartNoiseFigureCalibration(System.IntPtr Instrument_Handle, int Channel, int Calibration_Step);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TerminateNoiseFigureCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int TerminateNoiseFigureCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CompleteNoiseFigureCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int CompleteNoiseFigureCalibration(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_OverwriteNoiseFigureChannelSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int OverwriteNoiseFigureChannelSettings(System.IntPtr Instrument_Handle, int Channel, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformBalancedState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformBalancedState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformBalancedState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformBalancedState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformBalancedPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformBalancedPort(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, double Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformBalancedPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformBalancedPort(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, out double Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformBalancedCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformBalancedCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformBalancedCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformBalancedCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, out int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadBalancedPortCircuitModelData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadBalancedPortCircuitModelData(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, string File_Name, int Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadAndInterchangeBalancedPortCircuitModelData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadAndInterchangeBalancedPortCircuitModelData(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Logical_Port_Number, string File_Name, int Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformSingleEndedState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformSingleEndedState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformSingleEndedState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformSingleEndedState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformSingleEndedPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformSingleEndedPort(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, double Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformSingleEndedPort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformSingleEndedPort(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, int Parameter_Type, int Parameter_Number, int Circuit_Model, out double Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformSingleEndedCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformSingleEndedCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformSingleEndedCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformSingleEndedCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, out int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadSingleEndedPortCircuitModelData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadSingleEndedPortCircuitModelData(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadAndInterchangeSingleEndedPortCircuitModelData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadAndInterchangeSingleEndedPortCircuitModelData(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Physical_Port_Number, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformGroundLoopState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformGroundLoopState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformGroundLoopState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformGroundLoopState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformGroundLoop", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformGroundLoop(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Parameter_Type, int Circuit_Model, double Ground_Loop_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformGroundLoop", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformGroundLoop(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Parameter_Type, int Circuit_Model, out double Ground_Loop_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformGroundLoopCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformGroundLoopCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformGroundLoopCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformGroundLoopCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, out int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadGroundLoopCircuitModelData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadGroundLoopCircuitModelData(System.IntPtr Instrument_Handle, int Channel, int Function_Type, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformPortPairState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformPortPairState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformPortPairState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformPortPairState(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformPortPair", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformPortPair(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, int Parameter_Type, int Parameter_Number, int Circuit_Model, double Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformPortPair", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformPortPair(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, int Parameter_Type, int Parameter_Number, int Circuit_Model, out double Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVirtualTransformPortPairCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVirtualTransformPortPairCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVirtualTransformPortPairCircuitModel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVirtualTransformPortPairCircuitModel(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, out int Circuit_Model);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadPortPairCircuitModelData", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadPortPairCircuitModelData(System.IntPtr Instrument_Handle, int Channel, int Function_Type, int Port_Pair, string File_Name, int Parameter, ushort Interchange_Port_Numbers);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCoherentSignalState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCoherentSignalState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort Coherent_Signal);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCoherentSignalState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCoherentSignalState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort Coherent_Signal);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCoherentSignalAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCoherentSignalAmplitude(System.IntPtr Instrument_Handle, int Channel, int Port, double Amplitude);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCoherentSignalAmplitude", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCoherentSignalAmplitude(System.IntPtr Instrument_Handle, int Channel, int Port, out double Amplitude);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCoherentSignalPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCoherentSignalPhase(System.IntPtr Instrument_Handle, int Channel, int Port, double Phase);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCoherentSignalPhase", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCoherentSignalPhase(System.IntPtr Instrument_Handle, int Channel, int Port, out double Phase);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCoherentSignalReferencePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCoherentSignalReferencePort(System.IntPtr Instrument_Handle, int Channel, int Reference_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCoherentSignalReferencePort", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCoherentSignalReferencePort(System.IntPtr Instrument_Handle, int Channel, out int Reference_Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAlternateSweepMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAlternateSweepMode(System.IntPtr Instrument_Handle, int Channel, int Alternate_Sweep_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAlternateSweepMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAlternateSweepMode(System.IntPtr Instrument_Handle, int Channel, out int Alternate_Sweep_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSpuriousAvoidance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSpuriousAvoidance(System.IntPtr Instrument_Handle, int Channel, int Spurious_Avoidance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSpuriousAvoidance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSpuriousAvoidance(System.IntPtr Instrument_Handle, int Channel, out int Spurious_Avoidance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAutomaticLevelControlState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutomaticLevelControlState(System.IntPtr Instrument_Handle, ushort ALC_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAutomaticLevelControlState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutomaticLevelControlState(System.IntPtr Instrument_Handle, out ushort ALC_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetIndividualALCPortState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetIndividualALCPortState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetIndividualALCPortState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetIndividualALCPortState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetALCPortState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetALCPortState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetALCPortState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetALCPortState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetALCPortClamp", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetALCPortClamp(System.IntPtr Instrument_Handle, int Channel, int Port, ushort Clamp_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetALCPortClamp", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetALCPortClamp(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort Clamp_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLowPhaseNoiseState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLowPhaseNoiseState(System.IntPtr Instrument_Handle, int Channel, ushort Low_Phase_Noise_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLowPhaseNoiseState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLowPhaseNoiseState(System.IntPtr Instrument_Handle, int Channel, out ushort Low_Phase_Noise_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigurePortPIController", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePortPIController(System.IntPtr Instrument_Handle, int Channel, int Port, int PI_Controller_Mode, double Gain, double Integration_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureSAWMatchingNetwork", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSAWMatchingNetwork(System.IntPtr Instrument_Handle, int Channel, ushort Apply, double Parallel_L, double Serial_C, double Differential_Mode_Impedance, double Common_Mode_Impedance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSAWState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSAWState(System.IntPtr Instrument_Handle, int Channel, ushort Apply);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSAWState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSAWState(System.IntPtr Instrument_Handle, int Channel, out ushort Apply);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSAWParallelL", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSAWParallelL(System.IntPtr Instrument_Handle, int Channel, double Parallel_L);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSAWParallelL", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSAWParallelL(System.IntPtr Instrument_Handle, int Channel, out double Parallel_L);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSAWSerialC", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSAWSerialC(System.IntPtr Instrument_Handle, int Channel, double Serial_C);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSAWSerialC", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSAWSerialC(System.IntPtr Instrument_Handle, int Channel, out double Serial_C);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSAWSimulationType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSAWSimulationType(System.IntPtr Instrument_Handle, int Channel, int Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSAWSimulationType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSAWSimulationType(System.IntPtr Instrument_Handle, int Channel, out int Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPIControllerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPIControllerMode(System.IntPtr Instrument_Handle, int Channel, int Port, int PI_Controller_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPIControllerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPIControllerMode(System.IntPtr Instrument_Handle, int Channel, int Port, out int PI_Controller_Mode);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPIControllerGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPIControllerGain(System.IntPtr Instrument_Handle, int Channel, int Port, double Gain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPIControllerGain", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPIControllerGain(System.IntPtr Instrument_Handle, int Channel, int Port, out double Gain);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPIControllerIntegrationTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPIControllerIntegrationTime(System.IntPtr Instrument_Handle, int Channel, int Port, double Integration_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPIControllerIntegrationTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPIControllerIntegrationTime(System.IntPtr Instrument_Handle, int Channel, int Port, out double Integration_Time);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelAdd", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelAdd(System.IntPtr Instrument_Handle, int Channel, string Channel_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelAddTrace", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelAddTrace(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, int Channel, string Channel_Name, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelAddTraceDiagramArea", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelAddTraceDiagramArea(System.IntPtr Instrument_Handle, int Window, int Window__Trace_, int Channel, string Channel_Name, string Trace_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelDelete", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelDelete(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelList", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelList(System.IntPtr Instrument_Handle, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelGetChannelName", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelGetChannelName(System.IntPtr Instrument_Handle, int Channel, System.Text.StringBuilder Channel_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelGetChannelNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelGetChannelNumber(System.IntPtr Instrument_Handle, string Channel_Name, out int Channel_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelSetActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelSetActive(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelGetActive", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelGetActive(System.IntPtr Instrument_Handle, out int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ChannelRename", CallingConvention = CallingConvention.StdCall)]
            public static extern int ChannelRename(System.IntPtr Instrument_Handle, int Channel, string Channel_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetConnector", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetConnector(System.IntPtr Instrument_Handle, int Channel, int Port, int Connector);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetConnector", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetConnector(System.IntPtr Instrument_Handle, int Channel, int Port, out int Connector);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSameConnectorTypeAtAllPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSameConnectorTypeAtAllPorts(System.IntPtr Instrument_Handle, int Channel, ushort Same_Connector_At_All_Ports);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSameConnectorTypeAtAllPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSameConnectorTypeAtAllPorts(System.IntPtr Instrument_Handle, int Channel, out ushort Same_Connector_At_All_Ports);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSameConnectorGenderAtAllPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSameConnectorGenderAtAllPorts(System.IntPtr Instrument_Handle, int Channel, ushort Same_Gender_At_All_Ports);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSameConnectorGenderAtAllPorts", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSameConnectorGenderAtAllPorts(System.IntPtr Instrument_Handle, int Channel, out ushort Same_Gender_At_All_Ports);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetUserConnector", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserConnector(System.IntPtr Instrument_Handle, int Channel, int Port, string Connector, int Connector_Gender);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetUserConnector", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserConnector(System.IntPtr Instrument_Handle, int Channel, int Port, System.Text.StringBuilder Connector, out int Connector_Gender);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SelectCalibrationType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SelectCalibrationType(System.IntPtr Instrument_Handle, int Channel, string Calibration_Name, int Parameters, int Port_1, int Port_2, int Port_3, int Port_4);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationType(System.IntPtr Instrument_Handle, int Channel, out int Calibration_Type, out int Port_1, out int Port_2, out int Port_3, out int Port_4);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartCalibration(System.IntPtr Instrument_Handle, int Channel, int Standard, int Port_1, int Port_2);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartCalibrationWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartCalibrationWithOptions(System.IntPtr Instrument_Handle, int Channel, int Standard, int Port_1, int Port_2, ushort Dispersion, int Delay_Phase, double Delay_Phase_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveCalibrationData(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GenerateDefaultCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int GenerateDefaultCalibrationData(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteCalibrationData(System.IntPtr Instrument_Handle, int Channel, string Calibration_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteAllCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteAllCalibrationData(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ReadCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadCalibrationData(System.IntPtr Instrument_Handle, int Channel, int Error_Term_Parameters, int Port_1, int Port_2, [In, Out] double[] Calibration_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WriteCalibrationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteCalibrationData(System.IntPtr Instrument_Handle, int Channel, int Error_Term_Parameters, int Port_1, int Port_2, double[] Calibration_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCorrectionState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCorrectionState(System.IntPtr Instrument_Handle, int Channel, ushort Correction_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCorrectionState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCorrectionState(System.IntPtr Instrument_Handle, int Channel, out ushort Correction_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AcquireSourcePowerCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int AcquireSourcePowerCalibration(System.IntPtr Instrument_Handle, int Channel, int Source, int Port_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_InitiateSourcePowerCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitiateSourcePowerCalibration(System.IntPtr Instrument_Handle, int Channel, int Port_Number, int External_Power_Meter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDummySourcePowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDummySourcePowerCalibrationState(System.IntPtr Instrument_Handle, ushort Dummy_Source_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDummySourcePowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDummySourcePowerCalibrationState(System.IntPtr Instrument_Handle, out ushort Dummy_Source_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSourcePowerCalibrationPortState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSourcePowerCalibrationPortState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, ushort Port_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSourcePowerCalibrationPortState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSourcePowerCalibrationPortState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out ushort Port_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSourcePowerCalibrationGeneratorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSourcePowerCalibrationGeneratorState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, ushort Generator_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSourcePowerCalibrationGeneratorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSourcePowerCalibrationGeneratorState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out ushort Generator_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetVerificationSweepState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetVerificationSweepState(System.IntPtr Instrument_Handle, int Channel, ushort Verification_Sweep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetVerificationSweepState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetVerificationSweepState(System.IntPtr Instrument_Handle, int Channel, out ushort Verification_Sweep);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryVerificationSweepResults", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryVerificationSweepResults(System.IntPtr Instrument_Handle, out ushort Calibration_Passed, out double Max_Offset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GeneratorPowerCalibrationHarmonic", CallingConvention = CallingConvention.StdCall)]
            public static extern int GeneratorPowerCalibrationHarmonic(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSourcePowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSourcePowerCalibrationState(System.IntPtr Instrument_Handle, ushort Calibration_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSourcePowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSourcePowerCalibrationState(System.IntPtr Instrument_Handle, out ushort Calibration_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReferenceReceiverCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReferenceReceiverCalibrationState(System.IntPtr Instrument_Handle, ushort Calibration_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceReceiverCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceReceiverCalibrationState(System.IntPtr Instrument_Handle, out ushort Calibration_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ModifySourcePowerCalibrationSettings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ModifySourcePowerCalibrationSettings(System.IntPtr Instrument_Handle, int Channel, int Port_Number, int Number_Of_Readings, double Tolerance, ushort Other_Sources, double Port_Power_Offset, int Offset_Parameter, double Calibration_Power_Offset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetNumberOfReadings", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNumberOfReadings(System.IntPtr Instrument_Handle, int Channel, int Number_Of_Readings);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetNumberOfReadings", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNumberOfReadings(System.IntPtr Instrument_Handle, int Channel, out int Number_Of_Readings);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTolerance", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTolerance(System.IntPtr Instrument_Handle, int Channel, double Tolerance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTolerance", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTolerance(System.IntPtr Instrument_Handle, int Channel, out double Tolerance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetOtherSourcesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetOtherSourcesState(System.IntPtr Instrument_Handle, int Channel, ushort Other_Sources);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetOtherSourcesState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetOtherSourcesState(System.IntPtr Instrument_Handle, int Channel, out ushort Other_Sources);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPortPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPortPowerOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, double Port_Power_Offset, int Offset_Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPortPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPortPowerOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out double Port_Power_Offset, out int Offset_Parameter);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationPowerOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, double Calibration_Power_Offset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationPowerOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationPowerOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out double Calibration_Power_Offset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationPowerGeneratorOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationPowerGeneratorOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, int Generator_Number, double Cal_Power_Generator_Offset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationPowerGeneratorOffset", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationPowerGeneratorOffset(System.IntPtr Instrument_Handle, int Channel, int Port_Number, int Generator_Number, out double Cal_Power_Generator_Offset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReferenceReceiverAfterFirstCalSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReferenceReceiverAfterFirstCalSweep(System.IntPtr Instrument_Handle, ushort Fast_Source_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceReceiverAfterFirstCalSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceReceiverAfterFirstCalSweep(System.IntPtr Instrument_Handle, out ushort Fast_Source_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ReadSourcePowerCorrectionData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadSourcePowerCorrectionData(System.IntPtr Instrument_Handle, int Channel, int Port_Number, string Calibrated_Wave, out int Number_Of_Values, [In, Out] double[] Power_Correction_Values);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WriteSourcePowerCorrectionData", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteSourcePowerCorrectionData(System.IntPtr Instrument_Handle, int Channel, int Port_Number, string Calibrated_Wave, int Number_Of_Values, double[] Power_Correction_Values);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSourcePowerCalibrationConvergenceFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSourcePowerCalibrationConvergenceFactor(System.IntPtr Instrument_Handle, double Convergence_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSourcePowerCalibrationConvergenceFactor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSourcePowerCalibrationConvergenceFactor(System.IntPtr Instrument_Handle, out double Convergence_Factor);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDummySourcePowerCalibrationSensitivityCorrectionRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDummySourcePowerCalibrationSensitivityCorrectionRange(System.IntPtr Instrument_Handle, int Channel, int Frequency_Range);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDummySourcePowerCalibrationSensitivityCorrectionRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDummySourcePowerCalibrationSensitivityCorrectionRange(System.IntPtr Instrument_Handle, int Channel, out int Frequency_Range);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AcquireReceiverPowerCalibration", CallingConvention = CallingConvention.StdCall)]
            public static extern int AcquireReceiverPowerCalibration(System.IntPtr Instrument_Handle, int Channel, int Wave, int Port_Number, int Source, int Source_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAWaveReceiverPowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAWaveReceiverPowerCalibrationState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, ushort Receiver_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAWaveReceiverPowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAWaveReceiverPowerCalibrationState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out ushort Receiver_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetBWaveReceiverPowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetBWaveReceiverPowerCalibrationState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, ushort Receiver_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetBWaveReceiverPowerCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetBWaveReceiverPowerCalibrationState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out ushort Receiver_Power_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ReadReceiverPowerCorrectionData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadReceiverPowerCorrectionData(System.IntPtr Instrument_Handle, int Channel, int Port_Number, string Calibrated_Wave, out int Number_Of_Values, [In, Out] double[] Power_Correction_Values);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_WriteReceiverPowerCorrectionData", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteReceiverPowerCorrectionData(System.IntPtr Instrument_Handle, int Channel, int Port_Number, string Calibrated_Wave, int Number_Of_Values, double[] Power_Correction_Values);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ReceiverPowerCalibrationHarmonic", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReceiverPowerCalibrationHarmonic(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSourcePowerCorrectionState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSourcePowerCorrectionState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, ushort Source_Power_Correction_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetSourcePowerCorrectionState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetSourcePowerCorrectionState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out ushort Source_Power_Correction_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReceiverPowerCorrectionState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReceiverPowerCorrectionState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, ushort Receiver_Power_Correction_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReceiverPowerCorrectionState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReceiverPowerCorrectionState(System.IntPtr Instrument_Handle, int Channel, int Port_Number, out ushort Receiver_Power_Correction_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationManager", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationManager(System.IntPtr Instrument_Handle, int Channel, int Operation_to_be_Performed, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationAuto", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationAuto(System.IntPtr Instrument_Handle, int Channel, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4, int Cal_Unit_Port_1, int Cal_Unit_Port_2, int Cal_Unit_Port_3, int Cal_Unit_Port_4);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationAutoSimplified", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationAutoSimplified(System.IntPtr Instrument_Handle, int Channel, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationAutoType", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationAutoType(System.IntPtr Instrument_Handle, int Channel, int Parameters, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4, int Cal_Unit_Port_1, int Cal_Unit_Port_2, int Cal_Unit_Port_3, int Cal_Unit_Port_4);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationAutoTypeSimplified", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationAutoTypeSimplified(System.IntPtr Instrument_Handle, int Channel, int Parameters, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationConnection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationConnection(System.IntPtr Instrument_Handle, int Channel, out int Analyzer_Port_1, out int Analyzer_Port_2, out int Analyzer_Port_3, out int Analyzer_Port_4);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationAutoEx", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationAutoEx(System.IntPtr Instrument_Handle, int Channel, string Calibration_Kit_Name, int Analyzer_Port_1, int Analyzer_Port_2, int Analyzer_Port_3, int Analyzer_Port_4, int Cal_Unit_Port_1, int Cal_Unit_Port_2, int Cal_Unit_Port_3, int Cal_Unit_Port_4, int Timeout);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationDataCurrentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationDataCurrentState(System.IntPtr Instrument_Handle, int Channel, ushort Keep_Meas_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationDataCurrentState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationDataCurrentState(System.IntPtr Instrument_Handle, int Channel, out ushort Keep_Meas_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationDataDefaultState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationDataDefaultState(System.IntPtr Instrument_Handle, int Channel, ushort Keep_Meas_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationDataDefaultState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationDataDefaultState(System.IntPtr Instrument_Handle, int Channel, out ushort Keep_Meas_Data);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ExpCharDataTouchstoneFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int ExpCharDataTouchstoneFile(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationConnector", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationConnector(System.IntPtr Instrument_Handle, int Channel, string Connector_Name, int Propagation_Mode, int Connector_Type, double Relative_Permittivity, double Impedance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationConnector", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationConnector(System.IntPtr Instrument_Handle, int Channel, string Connector_Name, out int Propagation_Mode, out int Connector_Type, out double Relative_Permittivity, out double Impedance);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationConnectorCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationConnectorCatalog(System.IntPtr Instrument_Handle, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteCalibrationConnector", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteCalibrationConnector(System.IntPtr Instrument_Handle, int Channel, string Connector_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationDate", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationDate(System.IntPtr Instrument_Handle, int Channel, int Buffer_Size, System.Text.StringBuilder Calibration_Date);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationState(System.IntPtr Instrument_Handle, int Channel, out int Calibration_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationDataParameters", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationDataParameters(System.IntPtr Instrument_Handle, int Channel, out double Frequency_Start, out double Frequency_Stop, out int Number_Of_Points, out double Internal_Signal_Source_Power, out int Sweep_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetActiveCalibrationUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetActiveCalibrationUnit(System.IntPtr Instrument_Handle, string Calibration_Unit);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetActiveCalibrationUnit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetActiveCalibrationUnit(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Calibration_Unit);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAllCalibrationUnits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAllCalibrationUnits(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Calibration_Unit);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureCalibrationUnitStandard", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCalibrationUnitStandard(System.IntPtr Instrument_Handle, int Standard, int Port_1, int Port_2);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFactoryCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFactoryCalibrationState(System.IntPtr Instrument_Handle, int Channel, ushort Factory_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFactoryCalibrationState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFactoryCalibrationState(System.IntPtr Instrument_Handle, int Channel, out ushort Factory_Calibration);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationKit(System.IntPtr Instrument_Handle, int Connector, string Calibration_Kit_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationKit(System.IntPtr Instrument_Handle, int Connector, int Buffer_Size, System.Text.StringBuilder Calibration_Kit_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationKitUserConnectorType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationKitUserConnectorType(System.IntPtr Instrument_Handle, string Connector, string Calibration_Kit_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationKitUserConnectorType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationKitUserConnectorType(System.IntPtr Instrument_Handle, string Connector, int Buffer_Size, System.Text.StringBuilder Calibration_Kit_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationKitCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationKitCatalog(System.IntPtr Instrument_Handle, string Connector_Name, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ImportZVRCalibrationKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ImportZVRCalibrationKit(System.IntPtr Instrument_Handle, string Calibration_Kit_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureCalibrationStandard", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureCalibrationStandard(System.IntPtr Instrument_Handle, int Connector, int Standard, string Kit, string Serial_Number, double Min__Freq__Hz_, double Max__Freq__Hz_, double Length__mm_, double Loss, double C0_L0, double C1_L1, double C2_L2, double C3_L3, int Approximation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_CalibrationStandardsCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int CalibrationStandardsCatalog(System.IntPtr Instrument_Handle, string Calibration_Kit_Name, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveCalibrationKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveCalibrationKit(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadCalibrationKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadCalibrationKit(System.IntPtr Instrument_Handle, string Connector_Name, string Calibration_Kit_Name, int Standard, string Calibration_Kit_Label, string File_Name, int Port_Number_1, int Port_Number_2);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetCalibrationKitLabel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetCalibrationKitLabel(System.IntPtr Instrument_Handle, string Calibration_Kit_Name, string Label);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetCalibrationKitLabel", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetCalibrationKitLabel(System.IntPtr Instrument_Handle, string Calibration_Kit_Name, System.Text.StringBuilder Label);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteCalibrationKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteCalibrationKit(System.IntPtr Instrument_Handle, string Calibration_Kit_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ImportKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ImportKit(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AdditionalDirectoryCalibrationKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int AdditionalDirectoryCalibrationKit(System.IntPtr Instrument_Handle, string Directory);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ExportKit", CallingConvention = CallingConvention.StdCall)]
            public static extern int ExportKit(System.IntPtr Instrument_Handle, string Kit_Name, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ResetOffsets", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetOffsets(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryResetOffsets", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryResetOffsets(System.IntPtr Instrument_Handle, int Channel, out int Offsets);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetElectricalLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetElectricalLength(System.IntPtr Instrument_Handle, int Channel, int Port, double Electrical_Length);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetElectricalLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetElectricalLength(System.IntPtr Instrument_Handle, int Channel, int Port, out double Electrical_Length);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureMechanicalLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMechanicalLength(System.IntPtr Instrument_Handle, int Channel, int Port, double Mechanical_Length, double Permittivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMechanicalLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMechanicalLength(System.IntPtr Instrument_Handle, int Channel, int Port, double Mechanical_Length);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMechanicalLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMechanicalLength(System.IntPtr Instrument_Handle, int Channel, int Port, out double Mechanical_Length);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPermittivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPermittivity(System.IntPtr Instrument_Handle, int Channel, int Port, double Permittivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPermittivity", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPermittivity(System.IntPtr Instrument_Handle, int Channel, int Port, out double Permittivity);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureLoss", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureLoss(System.IntPtr Instrument_Handle, int Channel, int Port, double Loss_At_DC, double Loss_At_Frequency, double Loss_Reference_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLossAtDC", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLossAtDC(System.IntPtr Instrument_Handle, int Channel, int Port, double Loss_At_DC);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLossAtDC", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLossAtDC(System.IntPtr Instrument_Handle, int Channel, int Port, out double Loss_At_DC);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLossAtFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLossAtFrequency(System.IntPtr Instrument_Handle, int Channel, int Port, double Loss_At_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLossAtFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLossAtFrequency(System.IntPtr Instrument_Handle, int Channel, int Port, out double Loss_At_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetLossReferenceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetLossReferenceFrequency(System.IntPtr Instrument_Handle, int Channel, int Port, double Loss_Reference_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetLossReferenceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetLossReferenceFrequency(System.IntPtr Instrument_Handle, int Channel, int Port, out double Loss_Reference_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDelay(System.IntPtr Instrument_Handle, int Channel, int Port, double Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDelay", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDelay(System.IntPtr Instrument_Handle, int Channel, int Port, out double Delay);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryDirectFixtureCompensation", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryDirectFixtureCompensation(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort Direct_Fixture_Compensation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AutoLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int AutoLength(System.IntPtr Instrument_Handle, int Channel, int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AutoLengthAndLoss", CallingConvention = CallingConvention.StdCall)]
            public static extern int AutoLengthAndLoss(System.IntPtr Instrument_Handle, int Channel, int Port);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AcquireFixtureCompensationSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int AcquireFixtureCompensationSweep(System.IntPtr Instrument_Handle, int Channel, int Standard_Type, int Array_Size, int[] Ports);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_StartFixtureCompensationSweep", CallingConvention = CallingConvention.StdCall)]
            public static extern int StartFixtureCompensationSweep(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveFixtureCompensationData", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveFixtureCompensationData(System.IntPtr Instrument_Handle, int Channel);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFixtureCompensationAutoLengthAndLossCalculation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFixtureCompensationAutoLengthAndLossCalculation(System.IntPtr Instrument_Handle, ushort Auto_Length_and_Loss);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFixtureCompensationAutoLengthAndLossCalculation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFixtureCompensationAutoLengthAndLossCalculation(System.IntPtr Instrument_Handle, out ushort Auto_Length_and_Loss);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFixtureCompensationDirectCompensation", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFixtureCompensationDirectCompensation(System.IntPtr Instrument_Handle, ushort Direct_Compensation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFixtureCompensationDirectCompensation", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFixtureCompensationDirectCompensation(System.IntPtr Instrument_Handle, out ushort Direct_Compensation);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DiagramAreaAdd", CallingConvention = CallingConvention.StdCall)]
            public static extern int DiagramAreaAdd(System.IntPtr Instrument_Handle, int Window);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DiagramAreaDelete", CallingConvention = CallingConvention.StdCall)]
            public static extern int DiagramAreaDelete(System.IntPtr Instrument_Handle, int Window);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DiagramAreaMaximize", CallingConvention = CallingConvention.StdCall)]
            public static extern int DiagramAreaMaximize(System.IntPtr Instrument_Handle, int Window, int Diagram_Area);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DiagramAreaTitle", CallingConvention = CallingConvention.StdCall)]
            public static extern int DiagramAreaTitle(System.IntPtr Instrument_Handle, int Window, ushort Title, string Title_String);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DiagramAreaName", CallingConvention = CallingConvention.StdCall)]
            public static extern int DiagramAreaName(System.IntPtr Instrument_Handle, int Window, string Area_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DiagramAreaCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int DiagramAreaCatalog(System.IntPtr Instrument_Handle, int Window, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceDiagramAreaCatalog", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceDiagramAreaCatalog(System.IntPtr Instrument_Handle, int Window, System.Text.StringBuilder Catalog, int Buffer_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetColorScheme", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetColorScheme(System.IntPtr Instrument_Handle, int Color_Scheme);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetColorScheme", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetColorScheme(System.IntPtr Instrument_Handle, out int Color_Scheme);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SaveColorScheme", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveColorScheme(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_LoadColorScheme", CallingConvention = CallingConvention.StdCall)]
            public static extern int LoadColorScheme(System.IntPtr Instrument_Handle, string File_Name);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyInfo(System.IntPtr Instrument_Handle, ushort Frequency_Info);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyInfo(System.IntPtr Instrument_Handle, out ushort Frequency_Info);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFontSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFontSize(System.IntPtr Instrument_Handle, int Font_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFontSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFontSize(System.IntPtr Instrument_Handle, out int Font_Size);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetChannelInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetChannelInfo(System.IntPtr Instrument_Handle, ushort Channel_Info);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetChannelInfo", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChannelInfo(System.IntPtr Instrument_Handle, out ushort Channel_Info);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetMarkerColorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetMarkerColorState(System.IntPtr Instrument_Handle, ushort Same_Color);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetMarkerColorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetMarkerColorState(System.IntPtr Instrument_Handle, out ushort Same_Color);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRGBColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRGBColor(System.IntPtr Instrument_Handle, int Element, double Red, double Green, double Blue, int Trace_Style, int Trace_Width);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRGBColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRGBColor(System.IntPtr Instrument_Handle, int Element, out double Red, out double Green, out double Blue, out int Trace_Style, out int Trace_Width);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetTraceColorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetTraceColorState(System.IntPtr Instrument_Handle, ushort Trace_Color);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetTraceColorState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetTraceColorState(System.IntPtr Instrument_Handle, out ushort Trace_Color);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceSetRGBColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceSetRGBColor(System.IntPtr Instrument_Handle, string Trace_Name, double Red, double Green, double Blue, int Trace_Style, int Trace_Width);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_TraceGetRGBColor", CallingConvention = CallingConvention.StdCall)]
            public static extern int TraceGetRGBColor(System.IntPtr Instrument_Handle, string Trace_Name, out double Red, out double Green, out double Blue, out int Trace_Style, out int Trace_Width);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPowerPortLimitState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerPortLimitState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort Limit_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPowerPortLimitState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerPortLimitState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort Limit_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPowerPortLimitValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerPortLimitValue(System.IntPtr Instrument_Handle, int Channel, int Port, double Limit_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPowerPortLimitValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerPortLimitValue(System.IntPtr Instrument_Handle, int Channel, int Port, out double Limit_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPowerPortLimitDirectGeneratorAndReceiverState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerPortLimitDirectGeneratorAndReceiverState(System.IntPtr Instrument_Handle, int Channel, int Port, ushort DRG_Access_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPowerPortLimitDirectGeneratorAndReceiverState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerPortLimitDirectGeneratorAndReceiverState(System.IntPtr Instrument_Handle, int Channel, int Port, out ushort DRG_Access_State);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPresets", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPresets(System.IntPtr Instrument_Handle, int Preset_Scope);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPresets", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPresets(System.IntPtr Instrument_Handle, out int Preset_Scope);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetUserDefinedPresetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserDefinedPresetState(System.IntPtr Instrument_Handle, ushort User_Defined_Preset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetUserDefinedPresetState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserDefinedPresetState(System.IntPtr Instrument_Handle, out ushort User_Defined_Preset);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetUserDefinedPresetFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetUserDefinedPresetFile(System.IntPtr Instrument_Handle, string User_Defined_Preset_File);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetUserDefinedPresetFile", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetUserDefinedPresetFile(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder User_Defined_Preset_File);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDisplayUpdate", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDisplayUpdate(System.IntPtr Instrument_Handle, int Display_Update);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDisplayUpdate", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDisplayUpdate(System.IntPtr Instrument_Handle, out int Display_Update);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ImmediateSettingsUpdate", CallingConvention = CallingConvention.StdCall)]
            public static extern int ImmediateSettingsUpdate(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryFrequencyRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryFrequencyRange(System.IntPtr Instrument_Handle, out double Minimum_Frequency, out double Maximum_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SystemKeylock", CallingConvention = CallingConvention.StdCall)]
            public static extern int SystemKeylock(System.IntPtr Instrument_Handle, ushort Lockout);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetRemoteLanguage", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetRemoteLanguage(System.IntPtr Instrument_Handle, int Language);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetRemoteLanguage", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetRemoteLanguage(System.IntPtr Instrument_Handle, out int Language);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureExternalGenerator", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureExternalGenerator(System.IntPtr Instrument_Handle, int Generator_Number, string Generator_Name, string Generator_Type, string Interface_Type, string Interface_Address, ushort Fast_Sweep_Mode, ushort _10_MHz_Reference_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExternalGenerator", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExternalGenerator(System.IntPtr Instrument_Handle, int Generator_Number, System.Text.StringBuilder Generator_Name, System.Text.StringBuilder Generator_Type, System.Text.StringBuilder Interface_Type, System.Text.StringBuilder Interface_Address, out ushort Fast_Sweep_Mode, out ushort _10_MHz_Reference_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExternalGeneratorCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExternalGeneratorCount(System.IntPtr Instrument_Handle, out int Generator_Count);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExternalGeneratorNumbers", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExternalGeneratorNumbers(System.IntPtr Instrument_Handle, int Array_Size, System.Text.StringBuilder Generator_Numbers);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteExternalGenerator", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteExternalGenerator(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_ConfigureExternalPowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureExternalPowerMeter(System.IntPtr Instrument_Handle, int Power_Meter_Number, string Power_Meter_Name, string Power_Meter_Type, string Interface_Type, string Interface_Address);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExternalPowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExternalPowerMeter(System.IntPtr Instrument_Handle, int Power_Meter_Number, System.Text.StringBuilder Power_Meter_Name, System.Text.StringBuilder Power_Meter_Type, System.Text.StringBuilder Interface_Type, System.Text.StringBuilder Interface_Address);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExternalPowerMeterCount", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExternalPowerMeterCount(System.IntPtr Instrument_Handle, out int Power_Meter_Count);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExternalPowerMeterNumbers", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExternalPowerMeterNumbers(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Power_Meter_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_AutoZeroingExternalPowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int AutoZeroingExternalPowerMeter(System.IntPtr Instrument_Handle, int Power_Meter_Number);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAutoConfigNRPZxx", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAutoConfigNRPZxx(System.IntPtr Instrument_Handle, int Power_Meter_Number, ushort Auto_Config);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAutoConfigNRPZxx", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAutoConfigNRPZxx(System.IntPtr Instrument_Handle, int Power_Meter_Number, out ushort Auto_Config);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_DeleteExternalPowerMeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int DeleteExternalPowerMeter(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetAlarmSoundsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAlarmSoundsState(System.IntPtr Instrument_Handle, ushort Alarm_Sounds);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetAlarmSoundsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAlarmSoundsState(System.IntPtr Instrument_Handle, out ushort Alarm_Sounds);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetStatusSoundsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetStatusSoundsState(System.IntPtr Instrument_Handle, ushort Status_Sounds);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetStatusSoundsState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetStatusSoundsState(System.IntPtr Instrument_Handle, out ushort Status_Sounds);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetDataTransfer", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetDataTransfer(System.IntPtr Instrument_Handle, int Data_Transfer);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetDataTransfer", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetDataTransfer(System.IntPtr Instrument_Handle, out int Data_Transfer);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetErrorDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetErrorDisplayState(System.IntPtr Instrument_Handle, ushort Error_Display);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetErrorDisplayState", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetErrorDisplayState(System.IntPtr Instrument_Handle, out ushort Error_Display);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyConversionType", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyConversionType(System.IntPtr Instrument_Handle, string Converter_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyConversionType", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyConversionType(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Converter_Type);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFrequencyConversionSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFrequencyConversionSource(System.IntPtr Instrument_Handle, int Conversion_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFrequencyConversionSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFrequencyConversionSource(System.IntPtr Instrument_Handle, out int Conversion_Source);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetFastMultiportCorrection", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetFastMultiportCorrection(System.IntPtr Instrument_Handle, ushort Fast_Multiport_Correction);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetFastMultiportCorrection", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetFastMultiportCorrection(System.IntPtr Instrument_Handle, out ushort Fast_Multiport_Correction);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPowerCoeficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerCoeficients(System.IntPtr Instrument_Handle, int Port, double[] Coeficient);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPowerCoeficients", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerCoeficients(System.IntPtr Instrument_Handle, int Port, [In, Out] double[] Coeficients);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetPowerCoeficientsDefault", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetPowerCoeficientsDefault(System.IntPtr Instrument_Handle, ushort Default_Coeficients);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPowerCoeficientsDefault", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPowerCoeficientsDefault(System.IntPtr Instrument_Handle, out ushort Default_Coeficients);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExtensionUnitDeviceID", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExtensionUnitDeviceID(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Device_ID);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_QueryExtensionUnitHardwareOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryExtensionUnitHardwareOptions(System.IntPtr Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Options);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetNWAApplicationPriority", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetNWAApplicationPriority(System.IntPtr Instrument_Handle, int Priority);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetNWAApplicationPriority", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNWAApplicationPriority(System.IntPtr Instrument_Handle, out int Priority);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SystemShutdown", CallingConvention = CallingConvention.StdCall)]
            public static extern int SystemShutdown(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetSoftKeyLabel", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetSoftKeyLabel(System.IntPtr Instrument_Handle, int Key_Number, string Label);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetPressedSoftKey", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetPressedSoftKey(System.IntPtr Instrument_Handle, out int Key_Number, int Buffer_Size, System.Text.StringBuilder Label);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetChannelBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetChannelBits(System.IntPtr Instrument_Handle, int Channel_Bits);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetChannelBits", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChannelBits(System.IntPtr Instrument_Handle, out int Channel_Bits);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReference(System.IntPtr Instrument_Handle, int Reference);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReference", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReference(System.IntPtr Instrument_Handle, out int Reference);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_SetReferenceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetReferenceFrequency(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_GetReferenceFrequency", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetReferenceFrequency(System.IntPtr Instrument_Handle, out double Reference_Frequency);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_setStatusRegister", CallingConvention = CallingConvention.StdCall)]
            public static extern int setStatusRegister(System.IntPtr Instrument_Handle, int Register_Operation, int Questionable_Register, int Enable, int PTransition, int NTransition);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_getStatusRegister", CallingConvention = CallingConvention.StdCall)]
            public static extern int getStatusRegister(System.IntPtr Instrument_Handle, int Status_Registers_Query, out int Register_Value);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_setTimeOut", CallingConvention = CallingConvention.StdCall)]
            public static extern int setTimeOut(System.IntPtr Instrument_Handle, int Timeout);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_getTimeOut", CallingConvention = CallingConvention.StdCall)]
            public static extern int getTimeOut(System.IntPtr Instrument_Handle, out int Timeout);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_errorCheckState", CallingConvention = CallingConvention.StdCall)]
            public static extern int errorCheckState(System.IntPtr Instrument_Handle, ushort State_Checking);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_setCheckOption", CallingConvention = CallingConvention.StdCall)]
            public static extern int setCheckOption(System.IntPtr Instrument_Handle, ushort Option_Checking);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_setCheckRange", CallingConvention = CallingConvention.StdCall)]
            public static extern int setCheckRange(System.IntPtr Instrument_Handle, ushort Range_Checking);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_writeInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int writeInstrData(System.IntPtr Instrument_Handle, string Write_Buffer);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_readInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int readInstrData(System.IntPtr Instrument_Handle, int Number_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int NumBytes_Read);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.IntPtr Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.IntPtr Instrument_Handle, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.IntPtr Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.IntPtr Instrument_Handle);

            [DllImport("rszvb_32.dll", EntryPoint = "rszvb_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.IntPtr Instrument_Handle, int Status_Code, System.Text.StringBuilder Message);


            public static int TestForError(System.IntPtr handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.IntPtr handle, int code)
            {
                System.Text.StringBuilder msg = new System.Text.StringBuilder(256);
                PInvoke.error_message(handle, code, msg);
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class rszvbConstants
    {

        public const int Emf = 0;

        public const int Bmp = 1;

        public const int Jpg = 2;

        public const int Png = 3;

        public const int HcopyAll = 0;

        public const int HcopyActive = 1;

        public const int HcopySingle = 2;

        public const int Portrait = 0;

        public const int Landscape = 1;

        public const int FileManCdrive = 0;

        public const int FileManCdir = 1;

        public const int FileManMdir = 2;

        public const int FileManRdir = 3;

        public const int FileManCopy = 4;

        public const int FileManMove = 5;

        public const int FileManDelete = 6;

        public const int FileManCdirDef = 7;

        public const int SingleEnded = 0;

        public const int Differential = 1;

        public const int Common = 2;

        public const int RatioB2A1SrcPort1 = 0;

        public const int RatioB1A1SrcPort1 = 1;

        public const int RatioB2B1SrcPort1 = 2;

        public const int RatioB1B2SrcPort1 = 3;

        public const int A = 0;

        public const int B = 1;

        public const int DetRms = 0;

        public const int DetPeak = 1;

        public const int DetAvg = 2;

        public const int WquantityA1SrcPort1 = 0;

        public const int WquantityB1SrcPort1 = 1;

        public const int WquantityB2SrcPort1 = 2;

        public const int WquantityA2SrcPort2 = 3;

        public const int WquantityB1SrcPort2 = 4;

        public const int WquantityB2SrcPort2 = 5;

        public const int SfactorK = 0;

        public const int SfactorU1 = 1;

        public const int SfactorU2 = 2;

        public const int DcMeas1v = 0;

        public const int DcMeas10v = 1;

        public const int PaeExpC10 = 0;

        public const int PaeExpC1 = 1;

        public const int PaeExpK101 = 2;

        public const int PaeExpCk11 = 3;

        public const int DbMag = 0;

        public const int Phase = 1;

        public const int Smith = 2;

        public const int Polar = 3;

        public const int Delay = 4;

        public const int Swr = 5;

        public const int LinMag = 6;

        public const int Real = 7;

        public const int Imag = 8;

        public const int Ismith = 9;

        public const int Uphase = 10;

        public const int DispTracData = 0;

        public const int DispTracMem = 1;

        public const int DispTracSing = 2;

        public const int TraceMdata1 = 0;

        public const int TraceMdata2 = 1;

        public const int TraceMdata3 = 2;

        public const int TraceMdata4 = 3;

        public const int TraceMdata5 = 4;

        public const int TraceMdata6 = 5;

        public const int TraceMdata7 = 6;

        public const int TraceMdata8 = 7;

        public const int MathFuncNorm = 0;

        public const int MathFuncAdd = 1;

        public const int MathFuncSub = 2;

        public const int MathFuncMult = 3;

        public const int MathFuncDiv = 4;

        public const int Frequency = 0;

        public const int Time = 1;

        public const int ConvS = 0;

        public const int ConvY = 1;

        public const int ConvZ = 2;

        public const int Distance = 0;

        public const int TypeBpasImp = 0;

        public const int TypeLpasImp = 1;

        public const int TypeLpasStep = 2;

        public const int FilterRect = 0;

        public const int FilterHann = 1;

        public const int FilterHamm = 2;

        public const int FilterBohm = 3;

        public const int FilterDch = 4;

        public const int GridKfst = 0;

        public const int GridKdfr = 1;

        public const int GridKsdfr = 2;

        public const int TgateTypeBpas = 0;

        public const int TgateTypeNotch = 1;

        public const int TgateShapeMax = 0;

        public const int TgateShapeWide = 1;

        public const int TgateShapeNorm = 2;

        public const int TgateShapeMin = 3;

        public const int FullSpan = 0;

        public const int Range1 = 1;

        public const int Range2 = 2;

        public const int Range3 = 3;

        public const int Range4 = 4;

        public const int Range5 = 5;

        public const int Range6 = 6;

        public const int Range7 = 7;

        public const int Range8 = 8;

        public const int Range9 = 9;

        public const int Range10 = 10;

        public const int All = 0;

        public const int Mean = 1;

        public const int Stddev = 2;

        public const int Max = 3;

        public const int Min = 4;

        public const int Rms = 5;

        public const int Ptpeak = 6;

        public const int Elength = 7;

        public const int Pdelay = 8;

        public const int Slope = 9;

        public const int Flatness = 10;

        public const int Gain = 11;

        public const int DisplayResultsEpd = 0;

        public const int DisplayResultsMmpt = 1;

        public const int DisplayResultsMstd = 2;

        public const int DisplayResultsRms = 3;

        public const int DisplayResultsSfl = 4;

        public const int DisplayResultsComp = 5;

        public const int Unformatted = 0;

        public const int Formatted = 1;

        public const int UnformattedMath = 2;

        public const int PulseProfile = 3;

        public const int TraceZvrCh1data = 0;

        public const int TraceZvrCh2data = 1;

        public const int TraceZvrCh3data = 2;

        public const int TraceZvrCh4data = 3;

        public const int TraceZvrCh1mem = 4;

        public const int TraceZvrCh2mem = 5;

        public const int TraceZvrCh3mem = 6;

        public const int TraceZvrCh4mem = 7;

        public const int TraceZvrMdata1 = 8;

        public const int TraceZvrMdata2 = 9;

        public const int TraceZvrMdata3 = 10;

        public const int TraceZvrMdata4 = 11;

        public const int TraceZvrMdata5 = 12;

        public const int TraceZvrMdata6 = 13;

        public const int TraceZvrMdata7 = 14;

        public const int TraceZvrMdata8 = 15;

        public const int Complex = 0;

        public const int Linp = 1;

        public const int Logp = 2;

        public const int Poin = 0;

        public const int Comm = 1;

        public const int Sem = 0;

        public const int Tab = 2;

        public const int Spac = 3;

        public const int ChannelTraceSingle = 0;

        public const int ChannelTraceAll = 1;

        public const int HoldMax = 1;

        public const int HoldMin = 2;

        public const int HoldOff = 0;

        public const int LdevOff = 0;

        public const int LdevOn = 1;

        public const int LdevTrac = 2;

        public const int Continuous = 0;

        public const int Discrete = 1;

        public const int Normal = 0;

        public const int Fixed = 1;

        public const int DbMagPhase = 11;

        public const int LinMagPhase = 12;

        public const int RealImag = 13;

        public const int Default = 14;

        public const int RJx = 15;

        public const int GJb = 16;

        public const int MarkerMax = 0;

        public const int MarkerMin = 1;

        public const int MarkerNext = 2;

        public const int MarkerRpeak = 3;

        public const int MarkerLpeak = 4;

        public const int MarkerTarget = 0;

        public const int MarkerRtarget = 1;

        public const int MarkerLtarget = 2;

        public const int BwidModeBpas = 0;

        public const int BwidModeBst = 1;

        public const int BwidModeBprm = 2;

        public const int BwidModeBsrm = 3;

        public const int BwidModeBpab = 4;

        public const int BwidModeBsab = 5;

        public const int LimitUpper = 1;

        public const int LimitLower = 2;

        public const int LimitAll = 3;

        public const int LimitOff = 0;

        public const int LimitDomFlin = 0;

        public const int LimitDomFlog = 1;

        public const int LimitDomFseg = 2;

        public const int LimitDomFsin = 3;

        public const int LimitDomTlin = 4;

        public const int LimitDomTlog = 5;

        public const int LimitDomPlin = 6;

        public const int LimitDomPlog = 7;

        public const int LimitDomPsin = 8;

        public const int LimitRdomCompS = 0;

        public const int LimitRdomCompSinv = 1;

        public const int LimitRdomCompY = 2;

        public const int LimitRdomCompZ = 3;

        public const int LimitRdomCompYrel = 4;

        public const int LimitRdomCompZrel = 5;

        public const int LimitRdomFormComp = 0;

        public const int LimitRdomFormMagn = 1;

        public const int LimitRdomFormPhas = 2;

        public const int LimitRdomFormReal = 3;

        public const int LimitRdomFormImag = 4;

        public const int LimitRdomFormSwr = 5;

        public const int LimitRdomFormGdel = 6;

        public const int LimitRdomFormL = 7;

        public const int LimitRdomFormC = 8;

        public const int LimitRdomSpacLin = 0;

        public const int LimitRdomSpacLog = 1;

        public const int LimitRdomSpacDb = 2;

        public const int LimitRdomSpacSic = 3;

        public const int Save = 0;

        public const int Recall = 1;

        public const int AttenArec = 0;

        public const int AttenBrec = 1;

        public const int AttenCrec = 2;

        public const int AttenDrec = 3;

        public const int AttenModeAuto = 0;

        public const int AttenModeMan = 1;

        public const int AttenModeLno = 2;

        public const int SelectivityNormal = 0;

        public const int SelectivityHigh = 1;

        public const int ModePall = 0;

        public const int ModePsp = 1;

        public const int SweepLin = 0;

        public const int SweepLog = 1;

        public const int SweepSeg = 2;

        public const int SweepPow = 3;

        public const int SweepTim = 4;

        public const int SweepCw = 5;

        public const int SweepPulse = 6;

        public const int SweepIamp = 7;

        public const int SweepIph = 8;

        public const int SegTime = 0;

        public const int SegPoint = 1;

        public const int PulseRecA = 0;

        public const int PulseRecB = 1;

        public const int PulseInterfaceGen = 0;

        public const int PulseInterfaceSrc = 1;

        public const int PulseModeNormal = 0;

        public const int PulseModeMean = 1;

        public const int Neg = 0;

        public const int Pos = 1;

        public const int TrgseqSwe = 0;

        public const int TrgseqSegm = 1;

        public const int TrgseqPoin = 2;

        public const int TrgseqPpo = 3;

        public const int TrgImm = 0;

        public const int TrgExt = 1;

        public const int TrgTim = 2;

        public const int TrgMan = 3;

        public const int TrgRfp = 4;

        public const int TrgPge = 5;

        public const int SweepSingleChan = 0;

        public const int SweepAllChan = 1;

        public const int SweepSingle = 0;

        public const int SweepCont = 1;

        public const int VnetFuncDeembed = 0;

        public const int VnetFuncEmbed = 1;

        public const int Receiver = 0;

        public const int Source = 1;

        public const int SweepTypeSweep = 0;

        public const int SweepTypeFixed = 1;

        public const int PwrCalOffsetOnly = 0;

        public const int PwrCalOffsetCpadd = 1;

        public const int RenormalizationTwav = 0;

        public const int RenormalizationPwav = 1;

        public const int IfGainAuto = 0;

        public const int IfGainLnoise = 1;

        public const int IfGainLdist = 2;

        public const int PowerSended = 0;

        public const int PowerDcmode = 1;

        public const int PulsTypeSing = 0;

        public const int PulsTypeTrai = 1;

        public const int PulsTypeChig = 2;

        public const int PulsTypeClow = 3;

        public const int PulsPolNorm = 0;

        public const int PulsPolInv = 1;

        public const int PulsModeCsp = 0;

        public const int PulsModeCont = 1;

        public const int AssignG1m = 0;

        public const int AssignG2m = 1;

        public const int AssignG2m2 = 2;

        public const int AssignG1m3 = 3;

        public const int MeasHarmonic = 1;

        public const int MeasFundamental = 0;

        public const int MixModeMixer = 0;

        public const int MixModeFreqConvOff = 1;

        public const int FundamentalTypeRf = 0;

        public const int FundamentalTypeLo = 1;

        public const int FundamentalTypeIf = 2;

        public const int ConversionDclower = 0;

        public const int ConversionDcupper = 1;

        public const int ConversionUconversion = 2;

        public const int Int = 0;

        public const int Ext = 1;

        public const int MdelLan1 = 1;

        public const int MdelLan2 = 2;

        public const int ImodSrcPort = 1;

        public const int ImodSrcGen = 2;

        public const int MixerLoadFile = 0;

        public const int MixerLoadDelay = 1;

        public const int MixModeVmixer = 0;

        public const int ImodSourcePort = 0;

        public const int ImodSourceEdev = 1;

        public const int NoiseFigureCalStepRec = 0;

        public const int NoiseFigureCalStepSrc = 1;

        public const int NoiseFigureCalStepAtt = 2;

        public const int VnetParamC = 0;

        public const int VnetParamL = 1;

        public const int VnetParamR = 2;

        public const int BalancedCircuitStsl = 1;

        public const int BalancedCircuitStsc = 2;

        public const int BalancedCircuitSlst = 3;

        public const int BalancedCircuitScst = 4;

        public const int BalancedCircuitCssl = 5;

        public const int BalancedCircuitLssc = 6;

        public const int BalancedCircuitCssc = 7;

        public const int BalancedCircuitLssl = 8;

        public const int BalancedCircuitSlcs = 9;

        public const int BalancedCircuitScls = 10;

        public const int BalancedCircuitSccs = 11;

        public const int BalancedCircuitSlls = 12;

        public const int BalancedCircuitFimp = 0;

        public const int VnetParamPmain = 0;

        public const int VnetParamPsecond = 1;

        public const int SendedCircuitCsl = 1;

        public const int SendedCircuitLsc = 2;

        public const int SendedCircuitCsc = 3;

        public const int SendedCircuitLsl = 4;

        public const int SendedCircuitSlc = 5;

        public const int SendedCircuitScl = 6;

        public const int SendedCircuitScc = 7;

        public const int SendedCircuitSll = 8;

        public const int SendedCircuitFimp = 0;

        public const int GloopCircuitSl = 1;

        public const int GloopCircuitSc = 2;

        public const int GloopCircuitFimp = 0;

        public const int AltSweModeNormal = 0;

        public const int AltSweModeAlter = 1;

        public const int AvoidAuto = 0;

        public const int AvoidPos = 1;

        public const int AvoidNeg = 2;

        public const int SawSbal = 0;

        public const int ConnectorN50female = 0;

        public const int ConnectorN50male = 1;

        public const int ConnectorN75female = 2;

        public const int ConnectorN75male = 3;

        public const int ConnectorPc7 = 4;

        public const int ConnectorPc35female = 5;

        public const int ConnectorPc35male = 6;

        public const int ConnectorPc292female = 7;

        public const int ConnectorPc292male = 8;

        public const int ConnectorUfemale1 = 9;

        public const int ConnectorUmale1 = 10;

        public const int ConnectorUfemale2 = 11;

        public const int ConnectorUmale2 = 12;

        public const int ConnectorSmafemale = 13;

        public const int ConnectorSmamale = 14;

        public const int ConnectorGenderMale = 0;

        public const int ConnectorGenderFemale = 1;

        public const int CaltypeRefl = 0;

        public const int CaltypeRsh = 1;

        public const int CaltypeFop = 2;

        public const int CaltypeFrtr = 3;

        public const int CaltypeOptp = 4;

        public const int CaltypeTosm = 5;

        public const int CaltypeTom = 6;

        public const int CaltypeTrm = 7;

        public const int CaltypeTrl = 8;

        public const int CaltypeTna = 9;

        public const int CaltypeUosm = 12;

        public const int CaltypeFtr = 13;

        public const int CaltypeRtr = 14;

        public const int CalcollstdgenThr = 0;

        public const int CalcollstdgenOpen = 1;

        public const int CalcollstdgenShort = 2;

        public const int CalcollstdgenMatch = 3;

        public const int CalcollstdgenNet = 4;

        public const int CalcollstdgenAtt = 5;

        public const int CalcollstdgenRefl = 6;

        public const int CalcollstdgenLine = 7;

        public const int CalcollstdgenLine2 = 8;

        public const int CalcollstdgenOsh = 9;

        public const int CalcollstdgenLine3 = 10;

        public const int CalcollstdgenSlid = 11;

        public const int CalcollstdgenOsh2 = 12;

        public const int CalcollstdgenOsh3 = 13;

        public const int CalcollstdgenUthr = 0;

        public const int UthrAuto = 0;

        public const int UthrMan = 1;

        public const int CalDataDirectivity = 0;

        public const int CalDataSrcmatch = 1;

        public const int CalDataRefltrack = 2;

        public const int CalDataIsolation = 3;

        public const int CalDataLoadmatch = 4;

        public const int CalDataTranstrack = 5;

        public const int CalDataG11 = 6;

        public const int CalDataG12 = 7;

        public const int CalDataG21 = 8;

        public const int CalDataG22 = 9;

        public const int CalDataH11 = 10;

        public const int CalDataH12 = 11;

        public const int CalDataH21 = 12;

        public const int CalDataH22 = 13;

        public const int PwrCalPort = 0;

        public const int PwrCalGen = 1;

        public const int PwrCalA1 = 2;

        public const int PwrCalA2 = 3;

        public const int PwrCalA3 = 4;

        public const int PwrCalA4 = 5;

        public const int PwrCalA5 = 6;

        public const int PwrCalA6 = 7;

        public const int PwrCalA7 = 8;

        public const int PwrCalA8 = 9;

        public const int PwrCalEsrc1 = 10;

        public const int PwrCalEsrc2 = 11;

        public const int PwrCalConv = 12;

        public const int PwrCalAsensor = 0;

        public const int PwrCalBsensor = 1;

        public const int ViFalse = 0;

        public const int ViTrue = 1;

        public const int PwrCalAwave = 0;

        public const int PwrCalBwave = 1;

        public const int PwrCalB1 = 2;

        public const int PwrCalB2 = 3;

        public const int PwrCalB3 = 4;

        public const int PwrCalB4 = 5;

        public const int PwrCalB5 = 6;

        public const int PwrCalB6 = 7;

        public const int PwrCalB7 = 8;

        public const int PwrCalB8 = 9;

        public const int CorrManCopy = 0;

        public const int CorrManApply = 1;

        public const int CorrManResolve = 2;

        public const int CorrManApplyAll = 4;

        public const int CorrManResolveAll = 5;

        public const int CorrManMerge = 7;

        public const int CaltypeFnp = 10;

        public const int CaltypeSftp = 11;

        public const int ConnectionModeTem = 0;

        public const int ConnectionModeWguide = 1;

        public const int ConnectionConnectorGender = 0;

        public const int ConnectionConnectorNgender = 1;

        public const int CalunitStdThr = 0;

        public const int CalunitStdOpen = 1;

        public const int CalunitStdShor = 2;

        public const int CalunitStdMatc = 3;

        public const int ConnectorKitN50 = 0;

        public const int ConnectorKitN75 = 1;

        public const int ConnectorKitPc7 = 2;

        public const int ConnectorKitPc35 = 3;

        public const int ConnectorKitPc292 = 4;

        public const int ConnectorKitUser1 = 5;

        public const int ConnectorKitUser2 = 6;

        public const int ConnectorKitSma = 7;

        public const int CalstdMmth = 0;

        public const int CalstdFfth = 1;

        public const int CalstdMfth = 2;

        public const int CalstdMmli = 3;

        public const int CalstdFfli = 4;

        public const int CalstdMfli = 5;

        public const int CalstdOsh = 6;

        public const int CalstdMosh = 7;

        public const int CalstdFosh = 8;

        public const int CalstdMmat = 9;

        public const int CalstdFfat = 10;

        public const int CalstdMfat = 11;

        public const int CalstdMmsn = 12;

        public const int CalstdFfsn = 13;

        public const int CalstdMfsn = 14;

        public const int CalstdMop = 15;

        public const int CalstdFop = 16;

        public const int CalstdMsh = 17;

        public const int CalstdFsh = 18;

        public const int CalstdMref = 19;

        public const int CalstdFref = 20;

        public const int CalstdMmtc = 21;

        public const int CalstdFmtc = 22;

        public const int CalstdMsm = 23;

        public const int CalstdFsm = 24;

        public const int CalstdMmli2 = 25;

        public const int CalstdFfli2 = 26;

        public const int CalstdMfli2 = 27;

        public const int CalstdMmli3 = 28;

        public const int CalstdFfli3 = 29;

        public const int CalstdMfli3 = 30;

        public const int CalstdMosh2 = 31;

        public const int CalstdFosh2 = 32;

        public const int CalstdMosh3 = 33;

        public const int CalstdFosh3 = 34;

        public const int Open = 0;

        public const int Short = 1;

        public const int Restore = 0;

        public const int Maximize = 1;

        public const int Dbackground = 0;

        public const int Lbackground = 1;

        public const int BwLstyles = 2;

        public const int BwSolid = 3;

        public const int ElementBackground = 1;

        public const int ElementText = 2;

        public const int ElementSeltext = 3;

        public const int ElementGrid = 4;

        public const int ElementRefline = 5;

        public const int ElementAllmakers = 6;

        public const int ElementHline = 7;

        public const int ElementDtitle = 8;

        public const int ElementLimitfailtrace = 9;

        public const int ElementLimitlineoff = 10;

        public const int ElementLimitlineupper = 11;

        public const int ElementLimitlinelower = 12;

        public const int ElementTrace1 = 13;

        public const int ElementTrace2 = 14;

        public const int ElementTrace3 = 15;

        public const int ElementTrace4 = 16;

        public const int ElementTrace5 = 17;

        public const int ElementTrace6 = 18;

        public const int ElementTrace7 = 19;

        public const int ElementTrace8 = 20;

        public const int ElementTrace9 = 21;

        public const int ElementTrace10 = 22;

        public const int ElementTrace11 = 23;

        public const int ElementTrace12 = 24;

        public const int ElementTrace13 = 25;

        public const int ElementTrace14 = 26;

        public const int ElementTrace15 = 27;

        public const int ElementTrace16 = 28;

        public const int TraceStyleSolid = 0;

        public const int TraceStyleDashed = 1;

        public const int TraceStyleDotted = 2;

        public const int TraceStyleDdotted = 3;

        public const int TraceStyleDddotted = 4;

        public const int PresetSingle = 0;

        public const int PresetAll = 1;

        public const int DispUpdateOff = 0;

        public const int DispUpdateOn = 1;

        public const int DispUpdateOnce = 2;

        public const int LangScpi = 0;

        public const int LangPna = 1;

        public const int LangHp8510 = 2;

        public const int LangHp8720 = 3;

        public const int LangHp8753 = 4;

        public const int FormatBorderSwap = 0;

        public const int FormatBorderNorm = 1;

        public const int FreqConversionRili = 0;

        public const int FreqConversionRile = 1;

        public const int PriorityNormal = 0;

        public const int PriorityAboveNormal = 1;

        public const int PriorityHigh = 2;
    }
}
